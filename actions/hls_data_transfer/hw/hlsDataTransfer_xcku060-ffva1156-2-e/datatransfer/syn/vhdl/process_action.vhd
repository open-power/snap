-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_action is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_din_gmem_V_AWVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_AWREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_din_gmem_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_WVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_WREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_din_gmem_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_WLAST : OUT STD_LOGIC;
    m_axi_din_gmem_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_ARVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_ARREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_din_gmem_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RVALID : IN STD_LOGIC;
    m_axi_din_gmem_V_RREADY : OUT STD_LOGIC;
    m_axi_din_gmem_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_din_gmem_V_RLAST : IN STD_LOGIC;
    m_axi_din_gmem_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_BVALID : IN STD_LOGIC;
    m_axi_din_gmem_V_BREADY : OUT STD_LOGIC;
    m_axi_din_gmem_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    din_gmem_V1 : IN STD_LOGIC_VECTOR (57 downto 0);
    dout_gmem_V3 : IN STD_LOGIC_VECTOR (57 downto 0);
    act_reg_Data_in_addr : IN STD_LOGIC_VECTOR (63 downto 0);
    act_reg_Data_in_size : IN STD_LOGIC_VECTOR (31 downto 0);
    act_reg_Data_out_add : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of process_action is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_102 : STD_LOGIC_VECTOR (8 downto 0) := "100000010";
    constant ap_const_lv9_104 : STD_LOGIC_VECTOR (8 downto 0) := "100000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal din_gmem_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal din_gmem_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal din_gmem_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal din_gmem_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal din_gmem_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal icmp_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_151 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_sig_ioackin_m_axi_din_gmem_V_AWREADY : STD_LOGIC;
    signal icmp_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_204_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal sum_reg_314 : STD_LOGIC_VECTOR (58 downto 0);
    signal sum3_fu_214_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal sum3_reg_319 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_sig_ioackin_m_axi_din_gmem_V_ARREADY : STD_LOGIC;
    signal tmp_beta_reg_330 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_gamma_reg_335 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_theta_reg_340 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_345 : STD_LOGIC_VECTOR (191 downto 0);
    signal beta_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal gamma_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal theta_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal act_reg_Control_Retc_phi_fu_139_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal act_reg_Control_Retc_reg_135 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_cast_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_din_gmem_V_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_din_gmem_V_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_din_gmem_V_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_din_gmem_V_WREADY : STD_LOGIC;
    signal grp_fu_147_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_156_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_3_fu_170_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_4_fu_184_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal din_gmem_V1_cast_fu_200_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal i_idx_1_cast_fu_166_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal dout_gmem_V3_cast_fu_210_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal o_idx_1_cast_fu_180_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal val_assign_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_296_p4 : STD_LOGIC_VECTOR (319 downto 0);
    signal grp_fu_147_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_return_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component hls_action_dmul_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    hls_action_dmul_6bkb_U1 : component hls_action_dmul_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_147_p0,
        din1 => grp_fu_147_p1,
        ce => grp_fu_147_ce,
        dout => grp_fu_147_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_din_gmem_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_din_gmem_V_ARREADY))) then 
                        ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_din_gmem_V_ARREADY)) then 
                        ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_din_gmem_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_din_gmem_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state29)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_din_gmem_V_AWREADY))) then 
                        ap_reg_ioackin_m_axi_din_gmem_V_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_din_gmem_V_AWREADY)) then 
                        ap_reg_ioackin_m_axi_din_gmem_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_din_gmem_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_din_gmem_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state30)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_din_gmem_V_WREADY))) then 
                        ap_reg_ioackin_m_axi_din_gmem_V_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_din_gmem_V_WREADY)) then 
                        ap_reg_ioackin_m_axi_din_gmem_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(8) <= '0';
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state35) and not(((icmp_reg_310 = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0))))) then 
                                        ap_return_preg(2 downto 1) <= act_reg_Control_Retc_phi_fu_139_p4(2 downto 1);                    ap_return_preg(8) <= act_reg_Control_Retc_phi_fu_139_p4(8);
                end if; 
            end if;
        end if;
    end process;


    act_reg_Control_Retc_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = icmp_fu_194_p2)))) then 
                act_reg_Control_Retc_reg_135(1) <= '0';
                act_reg_Control_Retc_reg_135(2) <= '1';
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state35) and (icmp_reg_310 = ap_const_lv1_0) and not(((icmp_reg_310 = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0))))) then 
                act_reg_Control_Retc_reg_135(1) <= '1';
                act_reg_Control_Retc_reg_135(2) <= '0';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                icmp_reg_310 <= icmp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state29) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_din_gmem_V_AWREADY))))) then
                reg_151 <= grp_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_194_p2))) then
                sum3_reg_319 <= sum3_fu_214_p2;
                sum_reg_314 <= sum_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((m_axi_din_gmem_V_RVALID = ap_const_logic_0)))) then
                tmp_2_reg_345 <= m_axi_din_gmem_V_RDATA(319 downto 128);
                tmp_beta_reg_330 <= m_axi_din_gmem_V_RDATA(191 downto 128);
                tmp_gamma_reg_335 <= m_axi_din_gmem_V_RDATA(255 downto 192);
                tmp_theta_reg_340 <= m_axi_din_gmem_V_RDATA(319 downto 256);
            end if;
        end if;
    end process;
    act_reg_Control_Retc_reg_135(0) <= '0';
    act_reg_Control_Retc_reg_135(8 downto 3) <= "100000";
    ap_return_preg(0) <= '0';
    ap_return_preg(7 downto 3) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, m_axi_din_gmem_V_RVALID, m_axi_din_gmem_V_BVALID, icmp_reg_310, ap_sig_ioackin_m_axi_din_gmem_V_AWREADY, icmp_fu_194_p2, ap_sig_ioackin_m_axi_din_gmem_V_ARREADY, ap_sig_ioackin_m_axi_din_gmem_V_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = icmp_fu_194_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                elsif ((not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_194_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_din_gmem_V_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (not((m_axi_din_gmem_V_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_din_gmem_V_AWREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_din_gmem_V_WREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (not(((icmp_reg_310 = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    act_reg_Control_Retc_phi_fu_139_p4_assign_proc : process(ap_CS_fsm_state35, icmp_reg_310, act_reg_Control_Retc_reg_135)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state35) and (icmp_reg_310 = ap_const_lv1_0))) then 
            act_reg_Control_Retc_phi_fu_139_p4 <= ap_const_lv9_102;
        else 
            act_reg_Control_Retc_phi_fu_139_p4 <= act_reg_Control_Retc_reg_135;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34 downto 34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_din_gmem_V_BVALID, ap_CS_fsm_state35, icmp_reg_310)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state35) and not(((icmp_reg_310 = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_din_gmem_V_BVALID, ap_CS_fsm_state35, icmp_reg_310)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state35) and not(((icmp_reg_310 = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(m_axi_din_gmem_V_BVALID, ap_CS_fsm_state35, icmp_reg_310, act_reg_Control_Retc_phi_fu_139_p4, ap_return_preg)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state35) and not(((icmp_reg_310 = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0))))) then 
            ap_return <= act_reg_Control_Retc_phi_fu_139_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_din_gmem_V_ARREADY_assign_proc : process(m_axi_din_gmem_V_ARREADY, ap_reg_ioackin_m_axi_din_gmem_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_din_gmem_V_ARREADY)) then 
            ap_sig_ioackin_m_axi_din_gmem_V_ARREADY <= m_axi_din_gmem_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_din_gmem_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_din_gmem_V_AWREADY_assign_proc : process(m_axi_din_gmem_V_AWREADY, ap_reg_ioackin_m_axi_din_gmem_V_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_din_gmem_V_AWREADY)) then 
            ap_sig_ioackin_m_axi_din_gmem_V_AWREADY <= m_axi_din_gmem_V_AWREADY;
        else 
            ap_sig_ioackin_m_axi_din_gmem_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_din_gmem_V_WREADY_assign_proc : process(m_axi_din_gmem_V_WREADY, ap_reg_ioackin_m_axi_din_gmem_V_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_din_gmem_V_WREADY)) then 
            ap_sig_ioackin_m_axi_din_gmem_V_WREADY <= m_axi_din_gmem_V_WREADY;
        else 
            ap_sig_ioackin_m_axi_din_gmem_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    beta_fu_270_p1 <= tmp_beta_reg_330;
    din_gmem_V1_cast_fu_200_p1 <= std_logic_vector(resize(unsigned(din_gmem_V1),59));

    din_gmem_V_blk_n_AR_assign_proc : process(m_axi_din_gmem_V_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            din_gmem_V_blk_n_AR <= m_axi_din_gmem_V_ARREADY;
        else 
            din_gmem_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_AW_assign_proc : process(m_axi_din_gmem_V_AWREADY, ap_CS_fsm_state29)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
            din_gmem_V_blk_n_AW <= m_axi_din_gmem_V_AWREADY;
        else 
            din_gmem_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_B_assign_proc : process(m_axi_din_gmem_V_BVALID, ap_CS_fsm_state35, icmp_reg_310)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state35) and (icmp_reg_310 = ap_const_lv1_0))) then 
            din_gmem_V_blk_n_B <= m_axi_din_gmem_V_BVALID;
        else 
            din_gmem_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_R_assign_proc : process(m_axi_din_gmem_V_RVALID, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            din_gmem_V_blk_n_R <= m_axi_din_gmem_V_RVALID;
        else 
            din_gmem_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_W_assign_proc : process(m_axi_din_gmem_V_WREADY, ap_CS_fsm_state30)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state30))) then 
            din_gmem_V_blk_n_W <= m_axi_din_gmem_V_WREADY;
        else 
            din_gmem_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    dout_gmem_V3_cast_fu_210_p1 <= std_logic_vector(resize(unsigned(dout_gmem_V3),59));
    gamma_fu_274_p1 <= tmp_gamma_reg_335;

    grp_fu_147_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_sig_ioackin_m_axi_din_gmem_V_AWREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) or (ap_const_lv1_1 = ap_CS_fsm_state2) or (ap_const_lv1_1 = ap_CS_fsm_state9) or (ap_const_lv1_1 = ap_CS_fsm_state30) or (ap_const_lv1_1 = ap_CS_fsm_state35) or ((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_din_gmem_V_AWREADY)) or (ap_const_lv1_1 = ap_CS_fsm_state3) or (ap_const_lv1_1 = ap_CS_fsm_state4) or (ap_const_lv1_1 = ap_CS_fsm_state5) or (ap_const_lv1_1 = ap_CS_fsm_state6) or (ap_const_lv1_1 = ap_CS_fsm_state7) or (ap_const_lv1_1 = ap_CS_fsm_state8) or (ap_const_lv1_1 = ap_CS_fsm_state31) or (ap_const_lv1_1 = ap_CS_fsm_state32) or (ap_const_lv1_1 = ap_CS_fsm_state33) or (ap_const_lv1_1 = ap_CS_fsm_state34))) then 
            grp_fu_147_ce <= ap_const_logic_0;
        else 
            grp_fu_147_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_147_p0_assign_proc : process(reg_151, beta_fu_270_p1, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            grp_fu_147_p0 <= reg_151;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            grp_fu_147_p0 <= beta_fu_270_p1;
        else 
            grp_fu_147_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_147_p1_assign_proc : process(ap_CS_fsm_state10, gamma_fu_274_p1, theta_fu_278_p1, ap_CS_fsm_state20)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            grp_fu_147_p1 <= theta_fu_278_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            grp_fu_147_p1 <= gamma_fu_274_p1;
        else 
            grp_fu_147_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_idx_1_cast_fu_166_p1 <= std_logic_vector(resize(unsigned(tmp_fu_156_p4),59));
    icmp_fu_194_p2 <= "1" when (tmp_4_fu_184_p4 = ap_const_lv28_0) else "0";
    m_axi_din_gmem_V_ARADDR <= sum_cast_fu_220_p1;
    m_axi_din_gmem_V_ARBURST <= ap_const_lv2_0;
    m_axi_din_gmem_V_ARCACHE <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARID <= ap_const_lv1_0;
    m_axi_din_gmem_V_ARLEN <= ap_const_lv32_1;
    m_axi_din_gmem_V_ARLOCK <= ap_const_lv2_0;
    m_axi_din_gmem_V_ARPROT <= ap_const_lv3_0;
    m_axi_din_gmem_V_ARQOS <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARREGION <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARSIZE <= ap_const_lv3_0;
    m_axi_din_gmem_V_ARUSER <= ap_const_lv1_0;

    m_axi_din_gmem_V_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_m_axi_din_gmem_V_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_din_gmem_V_ARREADY))) then 
            m_axi_din_gmem_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_din_gmem_V_AWADDR <= sum3_cast_fu_282_p1;
    m_axi_din_gmem_V_AWBURST <= ap_const_lv2_0;
    m_axi_din_gmem_V_AWCACHE <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWID <= ap_const_lv1_0;
    m_axi_din_gmem_V_AWLEN <= ap_const_lv32_1;
    m_axi_din_gmem_V_AWLOCK <= ap_const_lv2_0;
    m_axi_din_gmem_V_AWPROT <= ap_const_lv3_0;
    m_axi_din_gmem_V_AWQOS <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWREGION <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWSIZE <= ap_const_lv3_0;
    m_axi_din_gmem_V_AWUSER <= ap_const_lv1_0;

    m_axi_din_gmem_V_AWVALID_assign_proc : process(ap_CS_fsm_state29, ap_reg_ioackin_m_axi_din_gmem_V_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_din_gmem_V_AWREADY))) then 
            m_axi_din_gmem_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_din_gmem_V_BREADY_assign_proc : process(m_axi_din_gmem_V_BVALID, ap_CS_fsm_state35, icmp_reg_310)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state35) and (icmp_reg_310 = ap_const_lv1_0) and not(((icmp_reg_310 = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0))))) then 
            m_axi_din_gmem_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_din_gmem_V_RREADY_assign_proc : process(m_axi_din_gmem_V_RVALID, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((m_axi_din_gmem_V_RVALID = ap_const_logic_0)))) then 
            m_axi_din_gmem_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_din_gmem_V_WDATA <= std_logic_vector(resize(unsigned(tmp_i_fu_296_p4),512));
    m_axi_din_gmem_V_WID <= ap_const_lv1_0;
    m_axi_din_gmem_V_WLAST <= ap_const_logic_0;
    m_axi_din_gmem_V_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_din_gmem_V_WUSER <= ap_const_lv1_0;

    m_axi_din_gmem_V_WVALID_assign_proc : process(ap_CS_fsm_state30, ap_reg_ioackin_m_axi_din_gmem_V_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_din_gmem_V_WREADY))) then 
            m_axi_din_gmem_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    o_idx_1_cast_fu_180_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_170_p4),59));
    sum3_cast_fu_282_p1 <= std_logic_vector(resize(unsigned(sum3_reg_319),64));
    sum3_fu_214_p2 <= std_logic_vector(unsigned(dout_gmem_V3_cast_fu_210_p1) + unsigned(o_idx_1_cast_fu_180_p1));
    sum_cast_fu_220_p1 <= std_logic_vector(resize(unsigned(sum_reg_314),64));
    sum_fu_204_p2 <= std_logic_vector(unsigned(din_gmem_V1_cast_fu_200_p1) + unsigned(i_idx_1_cast_fu_166_p1));
    theta_fu_278_p1 <= tmp_theta_reg_340;
    tmp_3_fu_170_p4 <= act_reg_Data_out_add(63 downto 6);
    tmp_4_fu_184_p4 <= act_reg_Data_in_size(31 downto 4);
    tmp_fu_156_p4 <= act_reg_Data_in_addr(63 downto 6);
    tmp_i_fu_296_p4 <= ((tmp_2_reg_345 & ap_const_lv64_1) & val_assign_fu_292_p1);
    val_assign_fu_292_p1 <= reg_151;
end behav;
