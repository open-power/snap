#!/bin/bash
############################################################################
############################################################################
##
## Copyright 2016,2017 International Business Machines
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE#2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions AND
## limitations under the License.
##
############################################################################
############################################################################
#
snapdir=$(dirname $(readlink -f "$BASH_SOURCE")) # path containing this script

snap_env_sh=$snapdir/.snap_env.sh

unset PSL_DCP
unset ACTION_ROOT
unset PSLSE_ROOT
unset DCP_ROOT
if [ -f "$1" ]; then
  source $1
fi
if [ -f "$snap_env_sh" ]; then
  source "$snap_env_sh"
fi

unset SETUP_DONE
while [ -z "$SETUP_DONE" ]; do
  SETUP_WARNING=""
  SNAP_ENV=""
  echo "======================================================="
  echo "== SNAP ENVIRONMENT SETUP                            =="
  echo "======================================================="


  ####### checking Xilinx Vivado
  echo "=====Checking Xilinx Vivado============================"
  if [ ! -d "$XILINX_VIVADO" ]; then
    echo "XILINX_VIVADO is not set, please source settings64.sh from your Vivado installation"
    break
  fi
  if [ -z "$XILINXD_LICENSE_FILE" ]; then
    echo "XILINXD_LICENSE_FILE is not set. The following commands needs to be executed before calling this script:"
    echo "	export XILINXD_LICENSE_FILE=<pointer to Vivado license>"
    break
  fi

  if [ -z `which vivado 2> /dev/null` ]; then
    echo "Path to vivado not set, please add to environment variable \$PATH"
    break
  fi
  # printing Vivado version
  echo "Path to vivado          is set to: `which vivado`"
  echo "Vivado version          is set to: `vivado -version|head -n1`"


  ####### checking path to PSL design checkpoint
  echo "=====Checking path to PSL design checkpoint============"
  echo "PSL_DCP                 is set to: \"$PSL_DCP\""
  SNAP_ENV="$SNAP_ENV""export PSL_DCP=$PSL_DCP\n"
  if [ -f "$PSL_DCP" ]; then
    # checking card type for PSL design checkpoint
    PSL_DCP_TYPE=`$snapdir/hardware/snap_check_psl $PSL_DCP`
    if [ "$PSL_DCP_TYPE" != "$FPGACARD" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### PSL_DCP is pointing to a checkpoint for a $PSL_DCP_TYPE card while FPGACARD is set to $FPGACARD"
    fi
  else
    SETUP_WARNING="$SETUP_WARNING\n### WARNING ### The environment variable PSL_DCP must point to the CAPI PSL Checkpoint file (b_route_design.dcp)."
  fi
  ####### checking path to PSLSE
  echo "=====Simulation setup: Checking path to PSLSE=========="
  echo "PSLSE_ROOT              is set to: \"$PSLSE_ROOT\""
  SNAP_ENV="$SNAP_ENV""export PSLSE_ROOT=$PSLSE_ROOT\n"
  if [ ! -d "$PSLSE_ROOT" ]; then
    SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to PSLSE not set properly. For simulation please clone PSL Simulation Environment from https://github.com/ibm-capi/pslse and let \$PSLSE_ROOT point to it"
  fi


  ####### SNAP path variables
  echo "=====ACTION ROOT setup================================="
  unset AR
  if [ -n "$HDL_EXAMPLE" ]; then
    AR='${SNAP_ROOT}/actions/hdl_example'
  elif [ -n "$HLS_BFS" ]; then
    AR='${SNAP_ROOT}/actions/hls_bfs'
  elif [ -n "$HLS_HASHJOIN" ]; then
    AR='${SNAP_ROOT}/actions/hls_hashjoin'
  elif [ -n "$HLS_INTERSECT" ]; then
    AR='${SNAP_ROOT}/actions/hls_intersect'
  elif [ -n "$HLS_MEMCOPY" ]; then
    AR='${SNAP_ROOT}/actions/hls_memcopy'
  elif [ -n "$HLS_SEARCH" ]; then
    AR='${SNAP_ROOT}/actions/hls_search'
  elif [ -n "$HLS_SPONGE" ]; then
    AR='${SNAP_ROOT}/actions/hls_sponge'
  elif [ -n "$HLS_NVME_MEMCOPY" ]; then
    AR='${SNAP_ROOT}/actions/hls_nvme_memcopy'
  fi
  if [ -z "$AR" ]; then
    AR=$ACTION_ROOT
    echo "ACTION_ROOT             is set to: \"$ACTION_ROOT\""
    # check if ACTION_ROOT points to an existing direcory or ACTION_ROOT ends in 'vhdl' for an HLS action
    if [ ! -d "$ACTION_ROOT" ] && ( ( [ -z `echo "x$ACTION_ROOT" | grep -i /HLS` ] && [ "${HLS_SUPPORT^^}" != "TRUE" ] ) || [ `basename "x$ACTION_ROOT"` != "vhdl" ] ); then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Please make sure that ACTION_ROOT points to an existing directory."
    fi
  else
    echo "Setting ACTION_ROOT            to: \"$AR\""
  fi

  if [ -n "$AR" ]; then
    SNAP_ENV="$SNAP_ENV""export ACTION_ROOT=$AR\n"
  fi


  ####### settings for Partial Reconfiguration flow
  # Note: USE_PRFLOW is defined via snap_config
  if [ "$USE_PRFLOW" = "TRUE" ]; then
    echo "=====PR flow setup====================================="
    if [ -z "$DCP_ROOT" ]; then
      export DCP_ROOT='${SNAP_ROOT}/dcp'
      echo "Setting DCP_ROOT               to: \"$DCP_ROOT\""
      mkdir -p $snapdir/dcp
    else
      echo "DCP_ROOT                is set to: \"$DCP_ROOT\""
    fi
    SNAP_ENV="$SNAP_ENV""export DCP_ROOT=$DCP_ROOT\n"
  fi


  ####### Cadence simulation setup:
  # Note: SIMULATOR is defined via snap_config
  if [ "$SIMULATOR" == "irun" ]; then
    echo "=====Cadence simulation setup=========================="

    if [ -z `which irun 2> /dev/null` ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to irun not set, Cadence simulation won't work"
    else
      echo "Path to irun                   is: \"`which irun`\""
      # checking version
      echo "irun version                   is: \"$(irun -version| cut -f 3)\""
      if [ -z "$CDS_INST_DIR" ]; then
        SETUP_WARNING="$SETUP_WARNING\n### WARNING ### SIMULATOR is $SIMULATOR but CDS_INST_DIR is not set. Simulation may not work."
      fi
      echo "CDS_INST_DIR            is set to: \"$CDS_INST_DIR\""
    fi
    if [ -f "$IES_LIBS/cds.lib" ]; then
      echo "cds.lib (IES_LIBS)       found in: \"$IES_LIBS\""
    else
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Cannot find cds.lib in IES_LIBS=$IES_LIBS. Cadence compilation won't work."
    fi
    if [ -z "$CDS_LIC_FILE" ] && [ -z "$LM_LICENSE_FILE" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Cadence license not defined with CDS_LIC_FILE or LM_LICENSE_FILE. Simulation may not work."
    else
      if [ -n "$CDS_LIC_FILE" ]; then
        echo "CDS_LIC_FILE            is set to: \"$CDS_LIC_FILE\""
      fi
      if [ -n "$LM_LICENSE_FILE" ]; then
        echo "LM_LICENSE_FILE         is set to: \"$LM_LICENSE_FILE\""
      fi
    fi
  fi

  # Note: NVME_USED is defined via snap_config
  if [[ "$NVME_USED" = "TRUE" ]]; then
    echo "=====Denali setup======================================"
    if [ -z "$DENALI_TOOLS" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Setting of NVME_USED=$NVME_USED but DENALI_TOOLS not set!"
    else
      echo "DENALI_TOOLS            is set to: \"$DENALI_TOOLS\""
    fi

    if [ -z "$DENALI_CUSTOM" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Setting of NVME_USED=$NVME_USED but DENALI_CUSTOM not set!"
    else
      echo "DENALI_CUSTOM           is set to: \"$DENALI_CUSTOM\""
    fi
  fi


  ####### Print warning messages and create .snap_env.sh
  if [ -n "$SETUP_WARNING" ]; then
    echo -e "$SETUP_WARNING"
  fi

  if [ -n "$SNAP_ENV" ]; then
    echo -e "$SNAP_ENV" > $snap_env_sh
  fi
  echo

  SETUP_DONE="1"
done
# set a return value in case that the file was sourced
if [[ "$_" = "$0" ]]; then
  if [[ "$SETUP_DONE" == "1" ]]; then return 0; else return 1; fi
fi
