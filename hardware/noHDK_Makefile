############################################################################
############################################################################
##
## Copyright 2016,2017 International Business Machines
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE#2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions AND
## limitations under the License.
##
############################################################################
############################################################################

PSL_DCP=$(HDK_ROOT)/Checkpoint/b_route_design.dcp

export BUILD_NAME=noHDK_build
export BUILD_DIR=$(DONUT_HARDWARE_ROOT)/$(BUILD_NAME)
export DONUT_HDL_CORE=$(DONUT_HARDWARE_ROOT)/hdl/core
export DONUT_SIM_CORE=$(DONUT_HARDWARE_ROOT)/sim/core
export LOGS_DIR=$(BUILD_DIR)/Logs

SNAP_CONFIG_FILES=$(DONUT_HDL_CORE)/psl_fpga.vhd \
		$(DONUT_HDL_CORE)/psl_accel.vhd \
		$(DONUT_HDL_CORE)/psl_accel_types.vhd \
		$(DONUT_SIM_CORE)/top.sv \
		$(DONUT_HDL_CORE)/donut.vhd \
		$(DONUT_HDL_CORE)/donut_types.vhd
PROJECT_COMPILE_LIST = $(DONUT_HARDWARE_ROOT)/sim/xsim/file_info.txt

ifeq "$(FPGACARD)" "KU3"
export DDR3_USED=$(SDRAM_USED)
export DDR4_USED=FALSE
export DDRI_USED=$(SDRAM_USED)
export NVME_USED=FALSE
endif

ifeq "$(FPGACARD)" "FGT"
export DDR3_USED=FALSE
export DDR4_USED=$(SDRAM_USED)
export DDRI_USED=$(SDRAM_USED)
endif

ifndef BRAM_USED
export BRAM_USED=FALSE
endif
ifeq "$(BRAM_USED)" "TRUE"
export DDR3_USED=FALSE
export DDR4_USED=FALSE
export DDRI_USED=TRUE
endif

ifndef NVME_USED
export NVME_USED=FALSE
endif

ifndef MSG_LEVEL
export MSG_LEVEL=-quiet
endif

.PHONY: all image model check_donut_settings action_config create_environment copy clean config gitclean patch_version xpr_image snap_config

all: config model image

check_donut_settings:
	@if [ ! -d "$(DONUT_HARDWARE_ROOT)" ]; then \
		echo "DONUT_HARDWARE_ROOT does not point to a directory."; \
		echo "Please source donut_settings before calling make!"; \
		exit 1; \
	fi
	@if [[ $(SIMULATOR) != "irun" && $(SIMULATOR) != "xsim" && $(SIMULATOR) != "questa" ]];then \
		echo "unknown simulator=$SIMULATOR"; \
		exit 1; \
	fi
	@if [ -z `which git 2> /dev/null` ]; then \
		echo "The SNAP framework make process relies on git."; \
		echo "Please make sure that you have installed git and that"; \
		echo "the environment variable PATH points to its executable."; \
		exit 1; \
	fi
	@cd $(DONUT_HARDWARE_ROOT); if [ -z `git describe HEAD 2> /dev/null` ]; then \
		echo "$(DONUT_HARDWARE_ROOT) (DONUT_HARDWARE_ROOT) does not belong to a git repository."; \
		echo "Please check out the SNAP framework as git clone from git@github.com:open-power/donut.git"; \
		exit 1; \
	fi
	@if [ -z $(FPGACARD) ] || [ -z $(SDRAM_USED) ] || [ -z $(ILA_DEBUG) ] || [ -z $(NUM_OF_ACTIONS) ] || [ -z $(ACTION_ROOT) ]; then \
		echo "Missing one or more environment  variables"; \
		echo "Please check the following variables and source donut_settings before calling make!"; \
		echo "FPGACARD:       $(FPGACARD)"; \
		echo "SDRAM_USED:     $(SDRAM_USED)"; \
		echo "ILA_DEBUG:      $(ILA_DEBUG)"; \
		echo "NUM_OF_ACTIONS: $(NUM_OF_ACTIONS)"; \
		echo "ACTION_ROOT:    $(ACTION_ROOT)"; \
		exit 1; \
	fi

copy $(BUILD_DIR)/Checkpoint/b_route_design.dcp:
	@echo -e "\t[COPY..............] psl build env";
	@mkdir $(BUILD_DIR); 
	@mkdir $(BUILD_DIR)/Reports; 
	@mkdir $(BUILD_DIR)/Logs; 
	@mkdir $(BUILD_DIR)/Images; 
	@mkdir $(BUILD_DIR)/Checkpoint; 
	@ln -s $(BUILD_DIR)/Checkpoint                       $(BUILD_DIR)/Checkpoints;
	@ln -s $(BUILD_NAME)                                   build;
	@ln -s $(DONUT_HARDWARE_ROOT)/setup/noHDK_build.tcl  $(BUILD_DIR)/noHDK_build.tcl; 
	@ln -s $(DONUT_HARDWARE_ROOT)/setup/fw_xpr_build.tcl $(BUILD_DIR)/fw_xpr_build.tcl; 
	@cp -p $(PSL_DCP)                                    $(BUILD_DIR)/Checkpoint/; 
	@if [ $(FPGACARD) = "KU3" ]; then ln -f -s $(DONUT_HDL_CORE)/psl_fpga_ku3.vhd_source $(DONUT_HDL_CORE)/psl_fpga.vhd_source; fi
	@if [ $(FPGACARD) = "FGT" ]; then ln -f -s $(DONUT_HDL_CORE)/psl_fpga_fgt.vhd_source $(DONUT_HDL_CORE)/psl_fpga.vhd_source; fi

%.vhd: %.vhd_source
	@echo "Creating $@"; $(DONUT_HARDWARE_ROOT)/setup/snap_config.sh $@_source $@

%.sv: %.sv_source
	@echo "Creating $@"; $(DONUT_HARDWARE_ROOT)/setup/snap_config.sh $@_source $@

snap_config: $(SNAP_CONFIG_FILES)

action_config: $(ACTION_ROOT)
	@if [ -e "$(ACTION_ROOT)/action_config.sh" ]; then \
		echo -e "Executing $(ACTION_ROOT)/action_config.sh"; \
		cd $(ACTION_ROOT) && ./action_config.sh; \
	fi

# In case we have a HLS action there will be no vhdl directory,
# such that ACTION_ROOT does not exist. To build it, we go one directory
# above and issue "make", such that the vhdl code can be synthesized.
$(ACTION_ROOT):
	$(MAKE) -C `dirname $(ACTION_ROOT)`

create_environment:
	@echo -e "\t[CREATE_ENVIRONMENT] start `date`";
	$(eval BUILD_DATE := $(shell date +%Y.%m.%d_%H:%M))
	@cd $(DONUT_HARDWARE_ROOT)/setup                                    && vivado $(MSG_LEVEL) -mode batch -source create_ip.tcl        -notrace -log $(LOGS_DIR)/vivado_create_ip_$(BUILD_DATE).log         -journal $(LOGS_DIR)/vivado_create_ip_$(BUILD_DATE).jou
	@if [ $(NVME_USED) = "TRUE" ]; then cd $(DONUT_HARDWARE_ROOT)/setup && vivado $(MSG_LEVEL) -mode batch -source create_nvme_host.tcl -notrace -log $(LOGS_DIR)/vivado_create_nvme_host_$(BUILD_DATE).log  -journal $(LOGS_DIR)/vivado_create_nvme_host_$(BUILD_DATE).jou; fi
	@cd $(DONUT_HARDWARE_ROOT)/setup                                    && vivado $(MSG_LEVEL) -mode batch -source create_framework.tcl -notrace -log $(LOGS_DIR)/vivado_create_framework_$(BUILD_DATE).log  -journal $(LOGS_DIR)/vivado_create_frame_work_$(BUILD_DATE).jou
	@echo -e "\t[CREATE_ENVIRONMENT] done `date`"

config: copy_denali check_donut_settings $(BUILD_DIR)/Checkpoint/b_route_design.dcp $(SNAP_CONFIG_FILES) action_config create_environment patch_NVMe
#config: copy_denali check_donut_settings $(BUILD_DIR)/Checkpoint/b_route_design.dcp $(SNAP_CONFIG_FILES) action_config create_environment

	@echo -e "\t[CONFIG............] done `date`"

patch_version:
	@echo  -e "\t[PATCH.............] SNAP version and build date registers"; \
	$(DONUT_HARDWARE_ROOT)/setup/patch_version.sh $(DONUT_HDL_CORE) donut.vhd

patch_NVMe:
	@if [[ -e "$(DONUT_HARDWARE_ROOT)/setup/patch_NVMe.sh" && $(NVME_USED) = "TRUE" ]]; then \
		cd $(DONUT_HARDWARE_ROOT)/setup && ./patch_NVMe.sh && cd .. ; \
		echo  -e "\t[PATCH.............] NVMe PCIe Root Complex sim. files"; \
	fi	
 
copy_denali:
	@if [[ -e "$(FRAMEWORK_ROOT)/denali/tmp/" && $(NVME_USED) = "TRUE" ]]; then \
                cp $(FRAMEWORK_ROOT)/denali/tmp/* $(DONUT_HARDWARE_ROOT)/sim/nvme/. ;  \
                echo  -e "\t[COPY..............] NVMe: denali files"; \
        fi


image: $(SNAP_CONFIG_FILES) patch_version
	@echo -e "\t[BUILD IMAGE.......] start `date`"
	$(eval BUILD_DATE := $(shell date +%Y.%m.%d_%H:%M))
	@cd $(BUILD_DIR) && time vivado $(MSG_LEVEL) -mode batch -source noHDK_build.tcl -notrace -log $(LOGS_DIR)/vivado_build_$(BUILD_DATE).log  -journal $(LOGS_DIR)/vivado_build_$(BUILD_DATE).jou
	@grep -A6 "Design Timing Summary" $(BUILD_DIR)/Reports/framework_timing_summary.rpt | egrep -v "^$|^\-\-"
	@rm -r -f .bitstream_name.txt
	@echo -e "\t[BUILD IMAGE.......] done  `date`"

xpr_image: $(SNAP_CONFIG_FILES) patch_version
	@echo -e "\t[BUILD XPR IMAGE...] start `date`"
	$(eval BUILD_DATE := $(shell date +%Y.%m.%d_%H:%M))
	@cd $(BUILD_DIR) && time vivado $(MSG_LEVEL) -mode batch -source fw_xpr_build.tcl -notrace -log $(LOGS_DIR)/vivado_build_$(BUILD_DATE).log  -journal $(LOGS_DIR)/vivado_build_$(BUILD_DATE).jou
	@grep -A6 "Design Timing Summary" $(BUILD_DIR)/Reports/framework_timing_summary_routed.rpt | egrep -v "^$|^\-\-"
	@rm -r -f .bitstream_name.txt
	@echo -e "\t[BUILD XPR IMAGE...] done  `date`"

model: pslse software $(SNAP_CONFIG_FILES) patch_version $(SIMULATOR)
#	@echo -e "\t[BUILD MODEL.......] start `date`"
#	@cd $(DONUT_HARDWARE_ROOT)/setup && ./create_environment -b
#	@echo -e "\t[BUILD MODEL.......] done `date`"

pslse:
	@echo -e "\t[COMPILE PSLSE ....] start `date`"
	@make -C $(PSLSE_ROOT)/afu_driver/src >compile_pslse.log 2>&1
	@make -C $(PSLSE_ROOT)/pslse         >>compile_pslse.log 2>&1
	@make -C $(PSLSE_ROOT)/libcxl        >>compile_pslse.log 2>&1
	@make -C $(PSLSE_ROOT)/debug         >>compile_pslse.log 2>&1

software:
	@echo -e "\t[COMPILE SOFTWARE..] start `date`"
	@make -C $(DONUT_SOFTWARE_ROOT)       >compile_sw.log 2>&1

xsim:
	@echo -e "\t[BUILD xsim........] start `date`"
	@if [ ! -d "$(DONUT_HARDWARE_ROOT)/sim/xsim" ];then \
		time vivado $(MSG_LEVEL) -mode batch -source setup/export_xsim.tcl -notrace -log compile_$(SIMULATOR).log; \
		$(DONUT_HARDWARE_ROOT)/setup/patch_sim.sh $(DONUT_HARDWARE_ROOT)/sim/xsim top.sh >>compile_$(SIMULATOR).log 2>&1; \
		cd $(DONUT_HARDWARE_ROOT)/sim/xsim && ln -sf $(PSLSE_ROOT)/afu_driver/src/libdpi.so; \
	fi
	cd $(DONUT_HARDWARE_ROOT)/sim/xsim && ./top.sh >>../../compile_$(SIMULATOR).log 2>&1

irun:
	@echo -e "\t[BUILD irun........] start `date`"
	@if [ ! -d "$(DONUT_HARDWARE_ROOT)/sim/ies" ];then \
		time vivado $(MSG_LEVEL) -mode batch -source setup/export_irun.tcl -notrace -log compile_$(SIMULATOR).log; \
		$(DONUT_HARDWARE_ROOT)/setup/patch_sim.sh $(DONUT_HARDWARE_ROOT)/sim/ies top.sh >>compile_$(SIMULATOR).log 2>&1; \
		cd $(DONUT_HARDWARE_ROOT)/sim/ies && ln -sf $(PSLSE_ROOT)/afu_driver/src/libdpi.so; \
	fi
	cd $(DONUT_HARDWARE_ROOT)/sim/ies && ./top.sh
#	cd $(DONUT_HARDWARE_ROOT)/sim/ies && ./top.sh >>../../compile_$(SIMULATOR).log 2>&1

questa:
	@echo -e "\t[BUILD questa......] start `date`"
	@if [ ! -d "$(DONUT_HARDWARE_ROOT)/sim/questa" ];then \
		time vivado $(MSG_LEVEL) -mode batch -source setup/export_questa.tcl -notrace -log compile_$(SIMULATOR).log; \
		$(DONUT_HARDWARE_ROOT)/setup/patch_sim.sh $(DONUT_HARDWARE_ROOT)/sim/questa top.sh >>compile_$(SIMULATOR).log 2>&1; \
		cd $(DONUT_HARDWARE_ROOT)/sim/questa && ln -sf $(PSLSE_ROOT)/afu_driver/src/libdpi.so; \
	fi
	cd $(DONUT_HARDWARE_ROOT)/sim/questa && ./top.sh >>../../compile_$(SIMULATOR).log 2>&1

clean: check_donut_settings
	@echo -e "\t[CLEAN.............] build environment";
	@rm -r -f  $(BUILD_DIR)
	@rm    -f  build
	@echo -e "\t                     vivado project";
	@rm -r -f  $(DONUT_HARDWARE_ROOT)/viv_project
	@echo -e "\t                     IPs";
	@rm -r -f  $(DONUT_HARDWARE_ROOT)/ip
	@echo -e "\t                     sim files";
	@rm -r -f  $(DONUT_HARDWARE_ROOT)/sim/ies
	@rm -r -f  $(DONUT_HARDWARE_ROOT)/sim/xsim
	@rm -r -f  $(DONUT_HARDWARE_ROOT)/sim/questa
	@rm -r -f  $(DONUT_HARDWARE_ROOT)/viv_project_tmp
	@echo -e "\t                     NVMe files";
	@rm -r -f  $(DONUT_HARDWARE_ROOT)/hdl/nvme/component.xml
	@rm -r -f  $(DONUT_HARDWARE_ROOT)/hdl/nvme/xgui
	@rm -f     $(SNAP_CONFIG_FILES)
	@rm -f     ./vivado*.log ./*/vivado*.log
	@rm -f     ./vivado*.jou ./*/vivado*.jou
	@echo -e "\t                     Software";
	@make -C $(DONUT_SOFTWARE_ROOT)       clean >/dev/null
	@echo -e "\t                     PSLSE";
	@make -C $(PSLSE_ROOT)/afu_driver/src clean >/dev/null
	@make -C $(PSLSE_ROOT)/pslse          clean >/dev/null
	@make -C $(PSLSE_ROOT)/libcxl         clean >/dev/null
	@make -C $(PSLSE_ROOT)/debug          clean >/dev/null

gitclean:
	@echo -e "\t[GITCLEAN] cleaning and resetting donut git";
	git clean -f -d -x
	git reset --hard
