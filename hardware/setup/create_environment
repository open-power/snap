#!/bin/bash
#
# Copyright 2016, International Business Machines
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
###############################################################################
#
# used to compile Xilinx model and associated code for CAPI Streaming Framework
# works with the following environment variables:
# export FRAMEWORK_ROOT=<your local workspace base>
# export USERHOME=$FRAMEWORK_ROOT/$USER               # each user has his own workspace
# export PSLSE_ROOT=$USERHOME/pslse                   # PSLSE clone from github
# export SNAP_ROOT=$USERHOME/dnout                    # donut clone from github
# export SNAP_SOFTWARE_ROOT=$SNAP_ROOT/software       # path to snap software
# export SNAP_HARDWARE_ROOT=$SNAP_ROOT/hardware       # path to snap hardware
# export SIMULATOR=xsim                               # ncsim,irun,xsim and questa are supported
#
# This script may download code from GIT:
# git clone git@github.com:ibm-capi/pslse             $PSLSE_ROOT
# git clone git@github.com:open-power/donut.git       $SNAP_ROOT
#
# DEFAULTS ##############
 CLONE=0                 # do git clone, if root doesn't exist
 PULL=""                 # git pull before compile
 UPDATE=0                # no repository update
 CLEAN=""                # clean compile
 export CDS_COVERAGE=0   # compile with/without coverage information
 DEBUG=""                # compile with debug options
 SOFE=1                  # stop on first error
 PREPARE_ENV=0           # do not prepare environment
 BUILD_MODEL=0           # do not build simulation model


# VARIABLES ###################
 maxrc=0


# FUNCTIONS ###################
 function check_rc() {
           grep -i error ${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log|grep -v "errors: 0"
   errors=`grep -i error ${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log|grep -v "errors: 0"|wc -l`  # you cannot trust the RC alone, better grep for errors in the log
   echo "compile $source args=$DEBUG $CLEAN pwd=$PWD subdir=$dir RC=$rc error lines=$errors";
   git branch -a >>${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log
   git log --pretty=format:"%h %ad" -n1 --date=iso|awk '{print $1 " "  $2 " " $3}'>>${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log
   if [[ $rc > $maxrc ]];then
     maxrc=$rc;
     if [[ $SOFE > 0 ]];then
       less         ${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log
       exit 1;
     fi
   fi
 }

 function print_help_msg() {
   echo "Valid options for $0:"
   echo "  -c | clean       : make clean before make all"
   echo "  -d | debug       : compile with debug options"
   echo "  -clone|clone     : use GIT CLONE to create repositories"
   echo "  -pull | pull     : use GIT PULL to update repositories before compilation"
   echo "  -cov|-nocov      : set/unset CDS_COVERAGE to compile with/without coverage information (default: no coverage info)"
   echo "  -sofe, -continue : stop on first error, continue on error (default: stop on first error)"
   echo "  -p | prep_env    : prepare environment"
   echo "  -b | build_model : build simulation model"
   echo "  -h | help        : print this help message"
}


# ARGUMENTS #############
#echo "arguments=$@"
 compile_args=$@
 while [[ $# > 0 ]]; do         # consume multiple args per loop with shift
#  echo "arg=$1"
   case $1 in
     -c|clean)            CLEAN="clean";;                 # make clean before make all
     -d|debug)            DEBUG="DEBUG=1";CLEAN="clean";; # compile with debug options, need to clean before
     -clone|clone)        CLONE=1;;                       # use GIT PULL to update repositories before compilation
     -pull|pull)          UPDATE=1;;                      # use GIT PULL to update repositories before compilation
     -cov|coverage)       export CDS_COVERAGE=1;;         # set CDS_COVERAGE=1 to compile with coverage information, to be tested
     -nocov|nocoverage)   unset CDS_COVERAGE;;            # remove CDS_COVERAGE to compile without coverage information
     -sofe|sofe)          SOFE=1;;                        # stop on first error
     -continue|continue)  SOFE=0;;                        # continue on error
     -p|prep_env)         PREPARE_ENV=1;;                 # prepare environment
     -b|build_model)      BUILD_MODEL=1;;                 # build simulation model
     -h|help)             print_help_msg; exit;;
      *)                  echo "Unknown option $1"; print_help_msg; exit -1;;
   esac;shift
 done


# MAIN PROGRAM #########
 # Check/Clone/pull Git repositories
 if [ -z ${PSLSE_ROOT} ]    ;then echo "variable PSLSE_ROOT not set"        ;maxrc+=1;fi # check for code path
 if [ -z ${SNAP_SOFTWARE_ROOT} ];then echo "variable SNAP_SOFTWARE_ROOT not set";maxrc+=1;fi # check for code path
 if [ -z ${SNAP_HARDWARE_ROOT} ];then echo "variable SNAP_HARDWARE_ROOT not set";maxrc+=1;fi # check for code path
 if [[ -z ${AFU_CONNECT_TYPE} || ${SIMULATOR} == "xsim" ]]  ;then AFU_CONNECT_TYPE='DPI'; fi
 if [ -z ${SIMULATOR} ]         ;then SIMULATOR="xsim"; fi
 if [[ $maxrc > 0 ]];then exit;fi

 if [ $PREPARE_ENV == 1 ]; then
   if [ -d ${PSLSE_ROOT} ]    ;then           # directory exists
     echo "directory $PSLSE_ROOT exists"
     source="pslse";cd ${PSLSE_ROOT};
     if [ $UPDATE == 1 ]; then
       git branch
       git pull
     fi
   else
     if [ $CLONE == 1 ]; then
       if [ ${AFU_CONNECT_TYPE} == "DPI" ] ;then
         echo "clone -b master to $PSLSE_ROOT"
         git clone -b master      git@github.com:ibm-capi/pslse.git ${PSLSE_ROOT} # VPI+DPI works from the master branch
       else
         echo "clone -b afudirected to $PSLSE_ROOT"
         git clone -b afudirected git@github.com:ibm-capi/pslse.git ${PSLSE_ROOT} # VPI works from the afudirected branch
       fi
     else echo "directory $PSLSE_ROOT doesn't exist";maxrc+=1;fi
   fi

   if [ -d ${SNAP_SOFTWARE_ROOT} ]   ;then
     echo "directory $SNAP_SOFTWARE_ROOT exists"
     source="SW";cd ${SNAP_SOFTWARE_ROOT};
     if [ $UPDATE == 1 ]; then git branch;git pull;fi
   else
     if [ $CLONE == 1 ]; then
       echo "clone -b master to $SNAP_ROOT"
       git clone -b master      git@github.com:open-power/donut.git ${SNAP_ROOT}
     else echo "directory $SNAP_SOFTWARE_ROOT doesn't exist";maxrc+=1;fi
   fi

   if [ -d ${SNAP_HARDWARE_ROOT} ]   ;then
     echo "directory $SNAP_HARDWARE_ROOT exists"
     source="hw";cd ${SNAP_HARDWARE_ROOT};
     if [ $UPDATE == 1 ]; then git branch;git pull;fi
   else
     echo "directory $SNAP_HARDWARE_ROOT doesn't exist";maxrc+=1;
   fi

   if [[ $maxrc > 0 ]];then exit;fi


   # Compile local repositories in the order: pslse, SW, HW
   source='pslse';cd ${PSLSE_ROOT};
   dir="afu_driver/src"; make -C $dir $DEBUG $CLEAN all        >${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc
   dir="pslse"         ; make -C $dir $DEBUG FINISH=1 $CLEAN all  >>${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc
   dir="libcxl"        ; make -C $dir $DEBUG $CLEAN all       >>${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc
   dir="debug"         ; make -C $dir $DEBUG $CLEAN all       >>${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc

   source="sw";cd ${SNAP_SOFTWARE_ROOT};
   dir='.'             ; make         $DEBUG $CLEAN all       >${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc

   source="hw";cd ${SNAP_HARDWARE_ROOT};
   if [ "$CLEAN" == "clean" ];then
     rm -rf sim/ies
     rm -rf sim/xsim
     rm -rf sim/questa
   fi
   if [ ! -d ${SNAP_HARDWARE_ROOT}/sim/ies ];then 
     cd ${SNAP_HARDWARE_ROOT}/setup; echo "run Vivado setup scripts"
     vivado -mode batch -source create_ip.tcl -notrace -log ${SNAP_HARDWARE_ROOT}/logs/create_ip.log
     if [[ $? != 0 ]];then echo "error in create_ip.tcl";exit -1;fi

     vivado -mode batch -source create_framework.tcl -notrace -log ${SNAP_HARDWARE_ROOT}/logs/create_framework.log
     if [[ $? != 0 ]];then echo "error in create_framework.tcl";exit -1;fi

     vivado -mode batch -source export_xsim.tcl -notrace

   fi
 fi # PREPARE_ENV == 1

 if [ $BUILD_MODEL == 1 ]; then
   if [[ "$SIMULATOR" != "ncsim" && "$SIMULATOR" != "irun" && "$SIMULATOR" != "xsim" && "$SIMULATOR" != "questa" ]];then
     echo "unknown simulator=$SIMULATOR";maxrc+=1
   fi
   if [[ $maxrc > 0 ]];then exit;fi

   echo "compile for simulator=$SIMULATOR afu_connnect_type=${AFU_CONNECT_TYPE}"
   if [ $SIMULATOR == "xsim" ]; then
     # patches for xsim only, rest is done in separate tcl scripts
     sed -i "s/  simulate/# simulate/g" ${SNAP_HARDWARE_ROOT}/sim/xsim/top.sh          # run up to elaboration, skip execution
     sed -i "s/-log elaborate.log/-log elaborate.log -sv_lib libdpi -sv_root ./g" ${SNAP_HARDWARE_ROOT}/sim/xsim/top.sh

     cd ${SNAP_HARDWARE_ROOT}/sim/xsim;dir=.;source="xsim"
     ln -sf ${PSLSE_ROOT}/afu_driver/src/libdpi.so 2>/dev/null
     ./top.sh >${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc;cd -
   fi

   if [ $SIMULATOR == "ncsim" ]; then
     if [ ! -f ${SNAP_HARDWARE_ROOT}/sim/ies/top.sh ]; then                              # modbld script doesnt exist yet
       vivado -mode batch -source export_ncsim.tcl -notrace
       if [[ $? != 0 ]];then echo "error in export_ncsim.tcl";exit -1;fi
     fi
     sed -i "s/  simulate/# simulate/g" ${SNAP_HARDWARE_ROOT}/sim/ies/top.sh             # run ncsim up to elaboration, skip execution
     sed -i "s/opts_ver=/set -e\nopts_ver=/g" ${SNAP_HARDWARE_ROOT}/sim/ies/top.sh       # use set -e to stop compilation on first error
     cd ${SNAP_HARDWARE_ROOT}/sim/ies;dir=.;source=$SIMULATOR
     ln -sf ${PSLSE_ROOT}/afu_driver/src/libdpi.so 2>/dev/null
     ./top.sh >${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc;cd -
   fi

   if [ $SIMULATOR == "irun" ]; then
     if [ ! -f ${SNAP_HARDWARE_ROOT}/sim/ies/top.sh ]; then                              # modbld script doesnt exist yet
       vivado -mode batch -source export_irun.tcl -notrace
       if [[ $? != 0 ]];then echo "error in export_irun.tcl";exit -1;fi
     fi
     sed -i "s/93 -relax/93 -elaborate -relax/gI"        ${SNAP_HARDWARE_ROOT}/sim/ies/top.sh # run irun up to elaboration, skip execution
     sed -i "s/-top xil_defaultlib.top/-top work.top/gI" ${SNAP_HARDWARE_ROOT}/sim/ies/top.sh # build top in work library
     if [ -f ${SNAP_HARDWARE_ROOT}/sim/ies/run.f ]; then
       perl -i.ori -pe 's/(.*\/verilog\/top.v)/ -sv $1/mg' ${SNAP_HARDWARE_ROOT}/sim/ies/run.f                          # compile top.v with system verilog
       perl -i.ori -pe 'BEGIN{undef $/;} s/(^-makelib.*\n.*glbl.v.*\n.*endlib)//mg' ${SNAP_HARDWARE_ROOT}/sim/ies/run.f # remove glbl.v from compile list
     fi
     cd ${SNAP_HARDWARE_ROOT}/sim/ies;dir=.;source=$SIMULATOR
     ln -sf ${PSLSE_ROOT}/afu_driver/src/libdpi.so 2>/dev/null
     ./top.sh >${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc;cd -
   fi

   if [ $SIMULATOR == "questa" ]; then
     if [ ! -f ${SNAP_HARDWARE_ROOT}/sim/questa/top.sh ]; then                           # modbld script doesnt exist yet
       vivado -mode batch -source export_questa.tcl -notrace
       if [[ $? != 0 ]];then echo "error in export_irun.tcl";exit -1;fi
       sed -i "s/  simulate/# simulate/g" ${SNAP_HARDWARE_ROOT}/sim/questa/top.sh        # run up to elaboration, skip execution
     fi
     cd ${SNAP_HARDWARE_ROOT}/sim/questa;dir=.;source=$SIMULATOR
     ln -sf ${PSLSE_ROOT}/afu_driver/src/libdpi.so 2>/dev/null
     ./top.sh >${SNAP_HARDWARE_ROOT}/sim/compile_${source}.log 2>&1; rc=$?;check_rc;cd -
   fi
 fi # BUILD_MODEL == 1
