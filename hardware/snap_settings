#!/bin/bash
############################################################################
############################################################################
##
## Copyright 2016,2017 International Business Machines
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE#2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions AND
## limitations under the License.
##
############################################################################
############################################################################
#
# important environment variables for running tools
# the goal is to be able to source this file and have everything set as needed
called=$BASH_SOURCE                # can be path+name, absolut or relative
script=$(readlink -f "$called")    # absolute path+name
scriptdir=$(dirname  "$script")    # just path
snapdir=$(dirname "$scriptdir")

unset SETUP_DONE;
while [ -z "$SETUP_DONE" ]; do
  SETUP_WARNING=""
  if [ ! -d "$XILINX_VIVADO" ] || [ -z "$XILINXD_LICENSE_FILE" ] || [ ! -d "$FRAMEWORK_ROOT" ]; then
    echo "Note: The following commands need to be executed before calling this script:"
    echo
    echo "export FRAMEWORK_ROOT       = <your local workspace base>"
    echo "source <xilinx_root>/Vivado/<version>/settings64.sh"
    echo "export XILINXD_LICENSE_FILE = <pointer to Vivado license>"
    echo
    echo "For more information see also README.md"
    break
  fi
  echo

  ####### Checking Xilinx Vivado:
  echo "Checking Xilinx Vivado:"
  echo "======================="
  if [ ! -d "$XILINX_VIVADO" ]; then
    echo "XILINX_VIVADO is not set, please source settings64.sh from your Vivado installation"
    break
  fi
  if [ -z `which vivado 2> /dev/null` ]; then
    echo "Path to vivado not set, please add to environment variable \$PATH"
    break
  fi
  # checking Vivado version
  echo "Path to vivado: `which vivado`"
  echo "Vivado version: `vivado -version|head -n1`"

  ####### user settings for CAPI STREAMING FRAMEWORK
  echo
  echo "Setting environment variables that are not pre-defined:"
  echo "======================================================="
  if [ ! -d "$USERHOME" ]; then
    export USERHOME=$FRAMEWORK_ROOT/$USER
    echo "Setting USERHOME               to  \"$USERHOME\""
  else
    echo "USERHOME                is set to: \"$USERHOME\""
  fi

  if [ ! -d "$PSLSE_ROOT" ]; then
    export PSLSE_ROOT=$USERHOME/pslse                          # used with git clone https://github.com/ibm-capi/pslse     $PSLSE_ROOT
    echo "Setting PSLSE_ROOT             to  \"$PSLSE_ROOT\""
  else
    echo "PSLSE_ROOT              is set to: \"$PSLSE_ROOT\""
  fi

  if [ "$SNAP_ROOT" = "$snapdir" ]; then
    echo "SNAP_ROOT               is set to: \"$SNAP_ROOT\""
  else
    echo "Setting SNAP_ROOT              to  \"$snapdir\""
  fi
  export SNAP_ROOT=$snapdir

  if [ "$SNAP_HARDWARE_ROOT" = "$SNAP_ROOT/hardware" ]; then
    echo "SNAP_HARDWARE_ROOT      is set to: \"$SNAP_HARDWARE_ROOT\""
  else
    echo "Setting SNAP_HARDWARE_ROOT     to  \"$SNAP_ROOT/hardware\""
  fi
  export SNAP_HARDWARE_ROOT=$SNAP_ROOT/hardware

  if [ "$SNAP_SOFTWARE_ROOT" = "$SNAP_ROOT/software" ]; then
    echo "SNAP_SOFTWARE_ROOT      is set to: \"$SNAP_SOFTWARE_ROOT\""
  else
    echo "Setting SNAP_SOFTWARE_ROOT     to  \"$SNAP_ROOT/software\""
  fi
  export SNAP_SOFTWARE_ROOT=$SNAP_ROOT/software

  if [ -z "$ACTION_ROOT" ]; then
    echo "Variable ACTION_ROOT    is not set. Please let it point to your action source if you want to add an action to your project."
    SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Variable ACTION_ROOT is not set (see above)."
  else
    echo "ACTION_ROOT             is set to: \"$ACTION_ROOT\""
  fi

  if [ -z "$FPGACARD" ]; then
    export FPGACARD=KU3
    echo "Setting FPGACARD               to  \"$FPGACARD\""
  else
    echo "FPGACARD                is set to: \"$FPGACARD\""
    if [[ ($FPGACARD != "KU3") && ($FPGACARD != "FGT") ]]; then
      echo
      echo "### ERROR ### FPGACARD=$FPGACARD is not supported"
      break
   fi
  fi

  if [ -z "$FPGACHIP" ]; then
    export FPGACHIP=xcku060-ffva1156-2-e
    echo "Setting FPGACHIP               to  \"$FPGACHIP\""
  else
    echo "FPGACHIP                is set to: \"$FPGACHIP\""
  fi

  if [ $FPGACARD = "KU3" ]; then
    if [ ! -d "$HDK_ROOT" ]; then
      export HDK_ROOT=$FRAMEWORK_ROOT/cards/adku060_capi_1_1_release
      echo "Setting HDK_ROOT               to  \"$HDK_ROOT\""
    else
      echo "HDK_ROOT                is set to: \"$HDK_ROOT\""
    fi
  fi

  if [ $FPGACARD = "FGT" ]; then
    if [ ! -f "$PSL_DCP" ]; then
      export PSL_DCP=$FRAMEWORK_ROOT/cards/FGT/portal_20170413/b_route_design.dcp
      echo "Setting PSL_DCP                to  \"$PSL_DCP\""
    else
      echo "PSL_DCP                 is set to: \"$PSL_DCP\""
    fi
  fi

  if [ -z "$SIMULATOR" ]; then
    export SIMULATOR=xsim                                      # xsim, questa and ncsim are supported, currently
    echo "Setting SIMULATOR              to  \"$SIMULATOR\""
  else
    echo "SIMULATOR               is set to: \"$SIMULATOR\""
  fi

  if [ -z "$NUM_OF_ACTIONS" ]; then
    export NUM_OF_ACTIONS=1
    echo "Setting NUM_OF_ACTIONS         to  \"$NUM_OF_ACTIONS\""
  else
    echo "NUM_OF_ACTIONS          is set to: \"$NUM_OF_ACTIONS\""
  fi

  if [ -z "$SDRAM_USED" ]; then
    export SDRAM_USED="FALSE"
    echo "Setting SDRAM_USED             to  \"$SDRAM_USED\""
  else
    echo "SDRAM_USED              is set to  \"$SDRAM_USED\""
  fi

  if [ -z "$NVME_USED" ]; then
    export NVME_USED="FALSE"
    echo "Variable NVME_USED      is not set. Will default to  \"FALSE\""
  else
    echo "NVME_USED               is set to: \"$NVME_USED\""
    if [[ $NVME_USED = "TRUE"  && $FPGACARD = "KU3" ]]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Setting of NVME_USED=$NVME_USED on KU3 is conflicting!"
    fi
  fi
  if [ -z "$ILA_DEBUG" ]; then
    export ILA_DEBUG="FALSE"
    echo "Setting ILA_DEBUG              to  \"ILA_DEBUG\""
  else
    echo "ILA_DEBUG               is set to: \"$ILA_DEBUG\""
  fi
 echo

  ####### Cadence simulation setup:
  if [ "$SIMULATOR" == "ncsim" ] || [ "$SIMULATOR" == "irun" ]; then
    echo "Cadence simulation setup for pslse:"
    echo "==================================="
    if [ -z `which ncsim 2> /dev/null` ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to ncsim not set Cadence simulation won't work"
    else
      echo "Path to ncsim           is set to: \"`which ncsim`\""
      # checking version
      echo "ncsim version           is set to: \"$(ncsim -version| cut -f 3)\""
      if [ -z "$CDS_INST_DIR" ]; then
        export CDS_INST_DIR=$(dirname $(dirname `which ncsim`))
        echo "Setting CDS_INST_DIR           to  \"$CDS_INST_DIR\""
      else
        echo "CDS_INST_DIR            is set to: \"$CDS_INST_DIR\""
      fi
    fi
    if [ -f "$IES_LIBS/cds.lib" ]; then
      echo "cds.lib (IES_LIBS)       found in: \"$IES_LIBS\""
    else
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Cannot find cds.lib in IES_LIBS=$IES_LIBS, Cadence compilation won't work"
    fi
    if [ -z "$CDS_LIC_FILE" ] && [ -z "$LM_LICENSE_FILE" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Cadence license not defined with CDS_LIC_FILE or LM_LICENSE_FILE, simulation may not work"
    fi
  fi

  if [ -z "$DENALI" ]; then
    if [[ $NVME_USED = "TRUE" ]]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Setting of NVME_USED=$NVME_USED but DENALI not set!"
    fi
  else
    echo "DENALI                  is set to: \"$DENALI\""
  fi

  if [ ! -z "$SETUP_WARNING" ]; then
    echo -e "$SETUP_WARNING"
  fi

  echo

  SETUP_DONE="1"
done
# set a return value in case that the file was sourced
if [[ "$_" = "$0" ]]; then
  if [[ "$SETUP_DONE" == "1" ]];then return 0;else return 1;fi
fi