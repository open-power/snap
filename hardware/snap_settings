#!/bin/bash
############################################################################
############################################################################
##
## Copyright 2016,2017 International Business Machines
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE#2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions AND
## limitations under the License.
##
############################################################################
############################################################################
#
# important environment variables for running tools
# the goal is to be able to source this file and have everything set as needed
called=$BASH_SOURCE                # can be path+name, absolut or relative
script=$(readlink -f "$called")    # absolute path+name
scriptdir=$(dirname  "$script")    # just path
snapdir=$(dirname "$scriptdir")

unset SETUP_DONE;
while [ -z "$SETUP_DONE" ]; do
  SETUP_WARNING=""
  echo "======================================================="
  echo "== SNAP SETUP                                        =="
  echo "======================================================="

  if [ ! -d "$XILINX_VIVADO" ] || [ -z "$XILINXD_LICENSE_FILE" ]; then
    echo "Error: The following commands need to be executed before calling this script:"
    echo "	source <xilinx_root>/Vivado/<version>/settings64.sh"
    echo "	export XILINXD_LICENSE_FILE=<pointer to Vivado license>"
    echo "For more information see also README.md"
    break
  fi
  if [ ! -f "$PSL_DCP" ]; then
    echo "Error: The following environment variable must be set before calling this script:"
    echo "	export PSL_DCP=<CAPI PSL Checkpoint file (b_route_design.dcp)>"
    echo "For more information see also README.md"
    break
  fi

  ####### Checking Xilinx Vivado:
  echo "=====Checking Xilinx Vivado:==========================="
  if [ ! -d "$XILINX_VIVADO" ]; then
    echo "XILINX_VIVADO is not set, please source settings64.sh from your Vivado installation"
    break
  fi
  if [ -z `which vivado 2> /dev/null` ]; then
    echo "Path to vivado not set, please add to environment variable \$PATH"
    break
  fi
  # checking Vivado version
  echo "Path to vivado          is set to: `which vivado`"
  echo "Vivado version          is set to: `vivado -version|head -n1`"

  ####### user settings for CAPI STREAMING FRAMEWORK
  echo "=====CARD variables===================================="
  if [ -z "$FPGACARD" ]; then
    export FPGACARD=FGT
    echo "Setting FPGACARD               to: \"$FPGACARD\""
  else
    echo "FPGACARD                is set to: \"$FPGACARD\""
    if [[ ($FPGACARD != "KU3") && ($FPGACARD != "FGT") ]]; then
      echo
      echo "### ERROR ### FPGACARD=$FPGACARD is not supported"
      break
   fi
  fi

  if [ -z "$FPGACHIP" ]; then
    export FPGACHIP=xcku060-ffva1156-2-e
    echo "Setting FPGACHIP               to:  \"$FPGACHIP\""
  else
    echo "FPGACHIP                is set to: \"$FPGACHIP\""
  fi

  if [ -f "$PSL_DCP" ]; then
      echo "PSL_DCP                 is set to: \"$PSL_DCP\""
  fi

  echo "=====SNAP PATH variables==============================="
  if [ -z "$SNAP_ROOT" ]; then
    export SNAP_ROOT=$snapdir
    echo "Setting SNAP_ROOT              to: \"$snapdir\""
  else
    echo "SNAP_ROOT               is set to: \"$SNAP_ROOT\""
  fi

  if [ -z "$ACTION_ROOT" ]; then
    export ACTION_ROOT=$SNAP_ROOT/hardware/action_examples/hdl_example
    echo "Setting ACTION_ROOT            to: \"$ACTION_ROOT\""
  else
    echo "ACTION_ROOT             is set to: \"$ACTION_ROOT\""
    # check if ACTION_ROOT points to an existing direcory or ACTION_ROOT ends in 'vhdl' for an HLS action
    if [ ! -d "$ACTION_ROOT" ] && ( ( [ -z `echo "x$ACTION_ROOT" | grep -i HLS` ] && [ "${HLS_SUPPORT^^}" != "TRUE" ] ) || [ `basename "x$ACTION_ROOT"` != "vhdl" ] ); then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Please make sure that ACTION_ROOT points to an existing directory."
    fi
  fi

  echo "=====SNAP simulation variables========================="
  if [ ! -d "$PSLSE_ROOT" ]; then
    SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to PSLSE not set. For simulation please clone PSL Simulation Environment from https://github.com/ibm-capi/pslse and let \$PSLSE_ROOT point to it"
  else
    echo "PSLSE_ROOT              is set to: \"$PSLSE_ROOT\""
  fi


  if [ -z "$SIMULATOR" ]; then
    export SIMULATOR=xsim                                      # xsim, questa and ncsim are supported, currently
    echo "Setting SIMULATOR              to: \"$SIMULATOR\""
  else
    echo "SIMULATOR               is set to: \"$SIMULATOR\""
  fi

  echo "=====SNAP function variables==========================="
  if [ -z "$NUM_OF_ACTIONS" ]; then
    export NUM_OF_ACTIONS=1
    echo "Setting NUM_OF_ACTIONS         to: \"$NUM_OF_ACTIONS\""
  else
    echo "NUM_OF_ACTIONS          is set to: \"$NUM_OF_ACTIONS\""
  fi

  if [ -z "$SDRAM_USED" ]; then
    export SDRAM_USED="FALSE"
    echo "Setting SDRAM_USED             to: \"$SDRAM_USED\""
  else
    echo "SDRAM_USED              is set to: \"$SDRAM_USED\""
  fi

  if [ -z "$NVME_USED" ]; then
    export NVME_USED="FALSE"
    echo "Setting NVME_USED              to: \"$NVME_USED\""
  else
    echo "NVME_USED               is set to: \"$NVME_USED\""
    if [[ $NVME_USED = "TRUE"  && $FPGACARD = "KU3" ]]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Setting of NVME_USED=$NVME_USED on KU3 is conflicting!"
    fi
  fi

  if [ -z "$ILA_DEBUG" ]; then
    export ILA_DEBUG="FALSE"
    echo "Setting ILA_DEBUG              to: \"$ILA_DEBUG\""
  else
    echo "ILA_DEBUG               is set to: \"$ILA_DEBUG\""
  fi
  if [ "${ILA_DEBUG^^}" == "TRUE" ]; then
    echo "ILA_SETUP_FILE          is set to: \"$ILA_SETUP_FILE\""
    if [ ! -e "$ILA_SETUP_FILE" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### ILA_DEBUG is set to $ILA_DEBUG but ILA_SETUP_FILE does not point to a file."
    fi
  fi

  ####### Cadence simulation setup:
  if [ "$SIMULATOR" == "irun" ]; then
    echo "=====Cadence simulation setup=========================="

    if [ -z `which ncsim 2> /dev/null` ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to ncsim not set, Cadence simulation won't work"
    else
      echo "Path to ncsim           is set to: \"`which ncsim`\""
      # checking version
      echo "ncsim version           is set to: \"$(ncsim -version| cut -f 3)\""
      if [ -z "$CDS_INST_DIR" ]; then
        export CDS_INST_DIR=$(dirname $(dirname `which ncsim`))
        echo "Setting CDS_INST_DIR           to: \"$CDS_INST_DIR\""
      else
        echo "CDS_INST_DIR            is set to: \"$CDS_INST_DIR\""
      fi
    fi
    if [ -f "$IES_LIBS/cds.lib" ]; then
      echo "cds.lib (IES_LIBS)       found in: \"$IES_LIBS\""
    else
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Cannot find cds.lib in IES_LIBS=$IES_LIBS, Cadence compilation won't work"
    fi
    if [ -z "$CDS_LIC_FILE" ] && [ -z "$LM_LICENSE_FILE" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Cadence license not defined with CDS_LIC_FILE or LM_LICENSE_FILE, simulation may not work"
    fi
  fi

  if [ -z "$DENALI_TOOLS" ]; then
    if [[ $NVME_USED = "TRUE" ]]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Setting of NVME_USED=$NVME_USED but DENALI_TOOLS not set!"
    fi
  else
    echo "DENALI_TOOLS            is set to: \"$DENALI_TOOLS\""
  fi

  if [ -z "$DENALI_CUSTOM" ]; then
    if [[ $NVME_USED = "TRUE" ]]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Setting of NVME_USED=$NVME_USED but DENALI_CUSTOM not set!"
    fi
  else
    echo "DENALI_CUSTOM           is set to: \"$DENALI_CUSTOM\""
  fi

  if [ ! -z "$SETUP_WARNING" ]; then
    echo -e "$SETUP_WARNING"
  fi

  echo

  SETUP_DONE="1"
done
# set a return value in case that the file was sourced
if [[ "$_" = "$0" ]]; then
  if [[ "$SETUP_DONE" == "1" ]];then return 0;else return 1;fi
fi
