#!/bin/bash
#
# Copyright 2016, International Business Machines
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
###############################################################################
#
# important environment variables for running tools
# the goal is to be able to source this file and have everything set as needed
called=$_                          # can be path+name, absolut or relative
script=$(readlink -f "$called")    # absolute path+name
scriptdir=$(dirname  "$script")    # just path

if [ ! -d "$XILINX_VIVADO" ] || [ -z "$XILINXD_LICENSE_FILE" ] || [ ! -d "$FRAMEWORK_ROOT" ]; then
  echo "Note: the following site specific variables are used by the build and sim tools"
  echo "and should be be set prior to sourcing this file:"
  echo
  echo "XILINX_VIVADO          # path to Vivado tool"
  echo "XILINXD_LICENSE_FILE"
  echo "FRAMEWORK_ROOT         # path to CAPI STREAMING FRAMEWORK root directory"
  echo
  echo "Recommended directory structure:"
  echo "FRAMEWORK_ROOT      = <your local workspace base> "
  echo "USERHOME            = \$FRAMEWORK_ROOT/$USER  # each user has his own workspace"
  echo "PSLSE_ROOT          = \$USERHOME/pslse        # PSLSE clone from github"
  echo "DONUT_ROOT          = \$USERHOME/donut        # donut clone from github"
  echo "DONUT_SOFTWARE_ROOT = \$DONUT_ROOT/software   # path to donut software "
  echo "DONUT_HARDWARE_ROOT = \$DONUT_ROOT/hardware   # path to donut hardware "
fi

if [ ! -d "$XILINX_VIVADO" ]; then
  echo "XILINX_VIVADO is not set, please run $XILINX_ROOT/Vivado/<version>/settings64.sh"
  exit
fi
####### Xilinx Vivado calls:
  which vivado                                               # checking version
  vivado -version|head -n1
####### Cadence IES calls:
  which ncsim                                                # checking version
  ncsim -version
  if [ -f "$IES_LIBS/cds.lib" ]; then
    echo "IES_LIBS found in $IES_LIBS"
  else
    echo "WARNING: cannot find IES_LIBS=$IES_LIBS, Cadence compilation won't work"
  fi
  echo
####### MentorGraphics QUESTA calls, not tested yet
# which vsim                                                 # checking version
# vsim -version
  if [ -z "$MENTOR_LIBS" ]; then export MENTOR_LIBS="";fi
# if [ -f "$MENTOR_LIBS/xxx" ]; then
#   echo "MENTOR_LIBS found in $MENTOR_LIBS"
# else
#   echo "WARNING: cannot find MENTOR_LIBS=$MENTOR_LIBS, Mentor compilation won't work"
# fi
# echo

####### user settings for CAPI STREAMING FRAMEWORK
if [ ! -d "$USERHOME" ]; then
  export USERHOME=$FRAMEWORK_ROOT/$USER
  echo "Setting USERHOME            to \"$USERHOME\""
else
  echo "USERHOME             is set to \"$USERHOME\""
fi

if [ ! -d "$PSLSE_ROOT" ]; then
  export PSLSE_ROOT=$USERHOME/pslse                          # used with git clone https://github.com/ibm-capi/pslse     $PSLSE_ROOT
  echo "Setting PSLSE_ROOT          to \"$PSLSE_ROOT\""
else
  echo "PSLSE_ROOT           is set to \"$PSLSE_ROOT\""
fi

export DONUT_ROOT=$(dirname "$scriptdir")
export DONUT_HARDWARE_ROOT=$DONUT_ROOT/hardware
export DONUT_SOFTWARE_ROOT=$DONUT_ROOT/software
echo "Setting DONUT_ROOT          to \"$DONUT_ROOT\""
echo "Setting DONUT_HARDWARE_ROOT to \"$DONUT_HARDWARE_ROOT\""
echo "Setting DONUT_SOFTWARE_ROOT to \"$DONUT_SOFTWARE_ROOT\""

if [ -z "$ACTION_ROOT" ]; then
  echo
  echo "Variable ACTION_ROOT is not set. Please let it point to your action source if you want to add an action to your project."
else
  echo "ACTION_ROOT          is set to \"$ACTION_ROOT\""
fi

if [ ! -d "$FPGACARD" ]; then
  export FPGACARD=$FRAMEWORK_ROOT/cards/adku060_capi_1_1_release
  echo "Setting FPGACARD            to \"$FPGACARD\""
else
  echo "FPGACARD             is set to \"$FPGACARD\""
fi

if [ -z "$FPGACHIP" ]; then
  export FPGACHIP=xcku060-ffva1156-2-e
  echo "Setting FPGACHIP            to \"$FPGACHIP\""
else
  echo "FPGACHIP             is set to \"$FPGACHIP\""
fi

if [ ! -d "$DIMMTEST" ]; then
  export DIMMTEST=$FRAMEWORK_ROOT/cards/dimm_test-admpcieku3-v3_0_0
  echo "Setting DIMMTEST            to \"$DIMMTEST\""
else
  echo "DIMMTEST             is set to \"$DIMMTEST\""
fi

if [ -z "$SIMULATOR" ]; then
  export SIMULATOR=xsim                                      # xsim, questa and ncsim are supported, currently
  echo "Setting SIMULATOR           to \"$SIMULATOR\""
else
  echo "SIMULATOR            is set to \"$SIMULATOR\""
fi

if [ -z "$DDR3_USED" ]; then
  echo
  echo "Variable DDR3_USED   is not set. Will default to \"TRUE\""
else
  echo "DDR3_USED            is set to \"$DDR3_USED\""
fi

if [ -z "$ILA_DEBUG" ]; then
  echo
  echo "Variable ILA_DEBUG   is not set. Will default to \"FALSE\""
else
  echo "ILA_DEBUG            is set to \"$ILA_DEBUG\""
fi

echo
