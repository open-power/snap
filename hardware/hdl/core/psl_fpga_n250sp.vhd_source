----------------------------------------------------------------------------
----------------------------------------------------------------------------
--
-- Copyright 2017 International Business Machines
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions AND
-- limitations under the License.
--
----------------------------------------------------------------------------
----------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_misc.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;

LIBRARY unisim;                                                                 -- only for NVME_USED=TRUE
USE unisim.vcomponents.all;                                                     -- only for NVME_USED=TRUE

ENTITY psl_fpga IS
  PORT(
    -- DDR4 SDRAM Interface                                                     -- only for DDRI_USED=TRUE
    --                                                                          -- only for DDRI_USED=TRUE
    -- Clock inputs for SDRAM                                                   -- only for DDRI_USED=TRUE
    refclk266_p               : IN    STD_LOGIC;                                -- only for DDRI_USED=TRUE
    refclk266_n               : IN    STD_LOGIC;                                -- only for DDRI_USED=TRUE
    --                                                                          -- only for DDR4_USED=TRUE
    -- Nallatech 250S card has one DDR4 SO-DIMMs                                -- only for DDR4_USED=TRUE
    c0_sys_clk_p              : IN    STD_LOGIC;                                -- only for DDR4_USED=TRUE
    c0_sys_clk_n              : IN    STD_LOGIC;                                -- only for DDR4_USED=TRUE
    c0_ddr4_adr               : OUT   STD_LOGIC_VECTOR(16 DOWNTO 0);            -- only for DDR4_USED=TRUE
    c0_ddr4_ba                : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_cke               : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_cs_n              : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_dm_dbi_n          : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_dq                : INOUT STD_LOGIC_VECTOR(71 DOWNTO 0);            -- only for DDR4_USED=TRUE
    c0_ddr4_dqs_c             : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_dqs_t             : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_odt               : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_bg                : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_reset_n           : OUT   STD_LOGIC;                                -- only for DDR4_USED=TRUE
    c0_ddr4_act_n             : OUT   STD_LOGIC;                                -- only for DDR4_USED=TRUE
    c0_ddr4_ck_c              : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_ck_t              : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    --                                                                          -- only for NVME_USED=TRUE
    -- NVME Interface                                                           -- only for NVME_USED=TRUE
    --                                                                          -- only for NVME_USED=TRUE
    -- Clock inputs for NVMe                                                    -- only for NVME_USED=TRUE
    pcie_clk1_p               : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    pcie_clk1_n               : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    pcie_clk2_p               : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    pcie_clk2_n               : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    --                                                                          -- only for NVME_USED=TRUE
    -- NVME <-> PCIE Interface                                                  -- only for NVME_USED=TRUE
    pcie_rc0_rxn              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc0_rxp              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc0_txn              : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc0_txp              : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc1_rxn              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc1_rxp              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc1_txn              : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc1_txp              : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    --                                                                          -- only for NVME_USED=TRUE
    -- Outputs to NVMe drive                                                    -- only for NVME_USED=TRUE
    m2_perst_n                : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    m2_susclk                 : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    m2_clkreq_n	              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    m2_pewake_n	              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    -- 
    -- CAPI PSL Interface 
    --
    o_flash_oen: OUT std_logic;
    o_flash_wen: OUT std_logic;
    o_flash_rstn: OUT std_logic;
    o_flash_a: OUT std_logic_vector(1 TO 26);
    o_flash_a_dup: OUT std_logic_vector(25 TO 26);
    o_flash_advn: OUT std_logic;
    b_flash_dq: INOUT std_logic_vector(0 TO 11);

    -- PTMON PMBUS
    b_basei2c_scl: INOUT std_logic;                                             -- clock
    b_basei2c_sda: INOUT std_logic;                                             -- data
    b_smbus_scl: INOUT std_logic;                                               -- clock
    b_smbus_sda: INOUT std_logic;                                               -- data

    o_ucd_gpio21: OUT std_logic;     -- UCD smbus control signal

    --LED ports from NVME logic
    o_led_red: OUT std_logic_vector(1 DOWNTO 0);
    o_led_green: OUT std_logic_vector(1 DOWNTO 0);
    o_led_blue: OUT std_logic_vector(1 DOWNTO 0);

    -- pci interface
    pci_pi_nperst0: IN std_logic;                                               -- Active low reset from the PCIe reset pin of the device
    pci_pi_refclk_p0: IN std_logic;                                             -- 100MHz Refclk
    pci_pi_refclk_n0: IN std_logic;                                             -- 100MHz Refclk

    -- Xilinx requires both pins of differential transceivers
    pci0_i_rxp_in0: IN std_logic;
    pci0_i_rxn_in0: IN std_logic;
    pci0_i_rxp_in1: IN std_logic;
    pci0_i_rxn_in1: IN std_logic;
    pci0_i_rxp_in2: IN std_logic;
    pci0_i_rxn_in2: IN std_logic;
    pci0_i_rxp_in3: IN std_logic;
    pci0_i_rxn_in3: IN std_logic;
    pci0_i_rxp_in4: IN std_logic;
    pci0_i_rxn_in4: IN std_logic;
    pci0_i_rxp_in5: IN std_logic;
    pci0_i_rxn_in5: IN std_logic;
    pci0_i_rxp_in6: IN std_logic;
    pci0_i_rxn_in6: IN std_logic;
    pci0_i_rxp_in7: IN std_logic;
    pci0_i_rxn_in7: IN std_logic;
    pci0_o_txp_out0: OUT std_logic;
    pci0_o_txn_out0: OUT std_logic;
    pci0_o_txp_out1: OUT std_logic;
    pci0_o_txn_out1: OUT std_logic;
    pci0_o_txp_out2: OUT std_logic;
    pci0_o_txn_out2: OUT std_logic;
    pci0_o_txp_out3: OUT std_logic;
    pci0_o_txn_out3: OUT std_logic;
    pci0_o_txp_out4: OUT std_logic;
    pci0_o_txn_out4: OUT std_logic;
    pci0_o_txp_out5: OUT std_logic;
    pci0_o_txn_out5: OUT std_logic;
    pci0_o_txp_out6: OUT std_logic;
    pci0_o_txn_out6: OUT std_logic;
    pci0_o_txp_out7: OUT std_logic;
    pci0_o_txn_out7: OUT std_logic
  );
END psl_fpga;



ARCHITECTURE psl_fpga OF psl_fpga IS

Component psl_accel
  PORT(
    -- DDR4 SDRAM Interface                                                     -- only for DDRI_USED=TRUE
    --                                                                          -- only for DDRI_USED=TRUE
    -- Clock inputs for SDRAM                                                   -- only for DDRI_USED=TRUE
    refclk_sdram_p            : IN    STD_LOGIC;                                -- only for DDRI_USED=TRUE
    refclk_sdram_n            : IN    STD_LOGIC;                                -- only for DDRI_USED=TRUE
    --                                                                          -- only for DDR4_USED=TRUE
    -- Nallatech 250S card has one DDR4 SO-DIMMs                                -- only for DDR4_USED=TRUE
    c0_sys_clk_p              : IN    STD_LOGIC;                                -- only for DDR4_USED=TRUE
    c0_sys_clk_n              : IN    STD_LOGIC;                                -- only for DDR4_USED=TRUE
    c0_ddr4_adr               : OUT   STD_LOGIC_VECTOR(16 DOWNTO 0);            -- only for DDR4_USED=TRUE
    c0_ddr4_ba                : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_cke               : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_cs_n              : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_dm_dbi_n          : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_dq                : INOUT STD_LOGIC_VECTOR(71 DOWNTO 0);            -- only for DDR4_USED=TRUE
    c0_ddr4_dqs_c             : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_dqs_t             : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_odt               : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_bg                : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_reset_n           : OUT   STD_LOGIC;                                -- only for DDR4_USED=TRUE
    c0_ddr4_act_n             : OUT   STD_LOGIC;                                -- only for DDR4_USED=TRUE
    c0_ddr4_ck_c              : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    c0_ddr4_ck_t              : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);             -- only for DDR4_USED=TRUE
    --                                                                          -- only for NVME_USED=TRUE
    -- NVME Interface                                                           -- only for NVME_USED=TRUE
    --                                                                          -- only for NVME_USED=TRUE
    -- Reset Input                                                              -- only for NVME_USED=TRUE
    nvme_reset_n              : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    --                                                                          -- only for NVME_USED=TRUE
    -- Clock inputs for NVMe                                                    -- only for NVME_USED=TRUE
    refclk_nvme_ch0_p         : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    refclk_nvme_ch0_n         : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    refclk_nvme_ch1_p         : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    refclk_nvme_ch1_n         : IN    STD_LOGIC;                                -- only for NVME_USED=TRUE
    --                                                                          -- only for NVME_USED=TRUE
    -- NVMe reset control                                                       -- only for NVME_USED=TRUE
    nvme_reset_ctl            : OUT   STD_LOGIC_VECTOR(4 DOWNTO 0);             -- only for NVME_USED=TRUE  -- keeping NVMe drives in reset by driving 0's
    --                                                                          -- only for NVME_USED=TRUE
    -- NVME <-> PCIE Interface                                                  -- only for NVME_USED=TRUE
    pcie_rc0_rxn              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc0_rxp              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc0_txn              : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc0_txp              : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc1_rxn              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc1_rxp              : IN    STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc1_txn              : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    pcie_rc1_txp              : OUT   STD_LOGIC_VECTOR ( 3 DOWNTO 0 );          -- only for NVME_USED=TRUE
    --
    -- CAPI PSL Interface
    --
    -- Accelerator Command Interface
    ah_cvalid: OUT std_logic;                                                   -- A valid command is present
    ah_ctag: OUT std_logic_vector(0 TO 7);                                      -- request id
    ah_com: OUT std_logic_vector(0 TO 12);                                      -- command PSL will execute
    ah_cpad: OUT std_logic_vector(0 TO 2);                                      -- prefetch attributes
    ah_cabt: OUT std_logic_vector(0 TO 2);                                      -- abort if translation intr is generated
    ah_cea: OUT std_logic_vector(0 TO 63);                                      -- Effective byte address for command
    ah_cch: OUT std_logic_vector(0 TO 15);                                      -- Context Handle
    ah_csize: OUT std_logic_vector(0 TO 11);                                    -- Number of bytes
    ha_croom: IN std_logic_vector(0 TO 7);                                      -- Commands PSL is prepared to accept
    --
    -- command parity
    ah_ctagpar: OUT std_logic;
    ah_compar: OUT std_logic;
    ah_ceapar: OUT std_logic;
    --
    -- Accelerator Buffer Interfaces
    ha_brvalid: IN std_logic;                                                   -- A read transfer is present
    ha_brtag: IN std_logic_vector(0 TO 7);                                      -- Accelerator generated ID for read
    ha_brad: IN std_logic_vector(0 TO 5);                                       -- half line index of read data
    ah_brlat: OUT std_logic_vector(0 TO 3);                                     -- Read data ready latency
    ah_brdata: OUT std_logic_vector(0 TO 511);                                  -- Read data
    ah_brpar: OUT std_logic_vector(0 TO 7);                                     -- Read data parity
    ha_bwvalid: IN std_logic;                                                   -- A write data transfer is present
    ha_bwtag: IN std_logic_vector(0 TO 7);                                      -- Accelerator ID of the write
    ha_bwad: IN std_logic_vector(0 TO 5);                                       -- half line index of write data
    ha_bwdata: IN std_logic_vector(0 TO 511);                                   -- Write data
    ha_bwpar: IN std_logic_vector(0 TO 7);                                      -- Write data parity
    --
    -- buffer tag parity
    ha_brtagpar: IN std_logic;
    ha_bwtagpar: IN std_logic;
    --
    -- PSL Response Interface
    ha_rvalid: IN std_logic;                                                    --A response is present
    ha_rtag: IN std_logic_vector(0 TO 7);                                       --Accelerator generated request ID
    ha_response: IN std_logic_vector(0 TO 7);                                   --response code
    ha_rcredits: IN std_logic_vector(0 TO 8);                                   --twos compliment number of credits
    ha_rcachestate: IN std_logic_vector(0 TO 1);                                --Resultant Cache State
    ha_rcachepos: IN std_logic_vector(0 TO 12);                                 --Cache location id
    ha_rtagpar: IN std_logic;
    --
    -- MMIO Interface
    ha_mmval: IN std_logic;                                                     -- A valid MMIO is present
    ha_mmrnw: IN std_logic;                                                     -- 1 = read, 0 = write
    ha_mmdw: IN std_logic;                                                      -- 1 = doubleword, 0 = word
    ha_mmad: IN std_logic_vector(0 TO 23);                                      -- mmio address
    ha_mmdata: IN std_logic_vector(0 TO 63);                                    -- Write data
    ha_mmcfg: IN std_logic;                                                     -- mmio is to afu descriptor space
    ah_mmack: OUT std_logic;                                                    -- Write is complete or Read is valid pulse
    ah_mmdata: OUT std_logic_vector(0 TO 63);                                   -- Read data
    --
    -- mmio parity
    ha_mmadpar: IN std_logic;
    ha_mmdatapar: IN std_logic;
    ah_mmdatapar: OUT std_logic;
    --
    -- Accelerator Control Interface
    ha_jval: IN std_logic;                                                      -- A valid job control command is present
    ha_jcom: IN std_logic_vector(0 TO 7);                                       -- Job control command opcode
    ha_jea: IN std_logic_vector(0 TO 63);                                       -- Save/Restore address
    ah_jrunning: OUT std_logic;                                                 -- Accelerator is running level
    ah_jdone: OUT std_logic;                                                    -- Accelerator is finished pulse
    ah_jcack: OUT std_logic;                                                    -- Accelerator is with context llcmd pulse
    ah_jerror: OUT std_logic_vector(0 TO 63);                                   -- Accelerator error code. 0 = success
    ah_tbreq: OUT std_logic;                                                    -- Timebase request pulse
    ah_jyield: OUT std_logic;                                                   -- Accelerator wants to stop
    ha_jeapar: IN std_logic;
    ha_jcompar: IN std_logic;
    --
    -- Misc Interface
    ah_paren: OUT std_logic;
    ha_pclock: IN std_logic);
End Component psl_accel;

Component base_img
  PORT(
       -- flash bus
       o_flash_oen: OUT std_logic;
       o_flash_wen: OUT std_logic;
       o_flash_rstn: OUT std_logic;
       o_flash_a: OUT std_logic_vector(1 TO 26);
       o_flash_a_dup: OUT std_logic_vector(25 TO 26);
       o_flash_advn: OUT std_logic;
       b_flash_dq: INOUT std_logic_vector(0 TO 11);

       -- PTMON PMBUS
       b_basei2c_scl: INOUT std_logic;                                          -- clock
       b_basei2c_sda: INOUT std_logic;                                          -- data
       b_smbus_scl: INOUT std_logic;                                            -- clock
       b_smbus_sda: INOUT std_logic;                                            -- data

       o_ucd_gpio21: OUT std_logic;

       led_red: IN std_logic_vector(1 DOWNTO 0);
       led_green: IN std_logic_vector(1 DOWNTO 0);
       led_blue: IN std_logic_vector(1 DOWNTO 0);
       o_led_red: OUT std_logic_vector(1 DOWNTO 0);
       o_led_green: OUT std_logic_vector(1 DOWNTO 0);
       o_led_blue: OUT std_logic_vector(1 DOWNTO 0);

       -- pci interface
       pci_pi_nperst0: IN std_logic;                                            -- Active low reset from the PCIe reset pin of the device
       pci_pi_refclk_p0: IN std_logic;                                          -- 100MHz Refclk
       pci_pi_refclk_n0: IN std_logic;                                          -- 100MHz Refclk

       -- Xilinx requires both pins of differential transceivers
       pci0_i_rxp_in0: IN std_logic;
       pci0_i_rxn_in0: IN std_logic;
       pci0_i_rxp_in1: IN std_logic;
       pci0_i_rxn_in1: IN std_logic;
       pci0_i_rxp_in2: IN std_logic;
       pci0_i_rxn_in2: IN std_logic;
       pci0_i_rxp_in3: IN std_logic;
       pci0_i_rxn_in3: IN std_logic;
       pci0_i_rxp_in4: IN std_logic;
       pci0_i_rxn_in4: IN std_logic;
       pci0_i_rxp_in5: IN std_logic;
       pci0_i_rxn_in5: IN std_logic;
       pci0_i_rxp_in6: IN std_logic;
       pci0_i_rxn_in6: IN std_logic;
       pci0_i_rxp_in7: IN std_logic;
       pci0_i_rxn_in7: IN std_logic;
       pci0_o_txp_out0: OUT std_logic;
       pci0_o_txn_out0: OUT std_logic;
       pci0_o_txp_out1: OUT std_logic;
       pci0_o_txn_out1: OUT std_logic;
       pci0_o_txp_out2: OUT std_logic;
       pci0_o_txn_out2: OUT std_logic;
       pci0_o_txp_out3: OUT std_logic;
       pci0_o_txn_out3: OUT std_logic;
       pci0_o_txp_out4: OUT std_logic;
       pci0_o_txn_out4: OUT std_logic;
       pci0_o_txp_out5: OUT std_logic;
       pci0_o_txn_out5: OUT std_logic;
       pci0_o_txp_out6: OUT std_logic;
       pci0_o_txn_out6: OUT std_logic;
       pci0_o_txp_out7: OUT std_logic;
       pci0_o_txn_out7: OUT std_logic;

       a0h_cvalid: IN std_logic;
       a0h_ctag: IN std_logic_vector(0 TO 7);
       a0h_com: IN std_logic_vector(0 TO 12);
       a0h_cpad: IN std_logic_vector(0 TO 2);
       a0h_cabt: IN std_logic_vector(0 TO 2);
       a0h_cea: IN std_logic_vector(0 TO 63);
       a0h_cch: IN std_logic_vector(0 TO 15);
       a0h_csize: IN std_logic_vector(0 TO 11);
       ha0_croom: OUT std_logic_vector(0 TO 7);
       a0h_ctagpar: IN std_logic;
       a0h_compar: IN std_logic;
       a0h_ceapar: IN std_logic;
       ha0_brvalid: OUT std_logic;
       ha0_brtag: OUT std_logic_vector(0 TO 7);
       ha0_brad: OUT std_logic_vector(0 TO 5);
       a0h_brlat: IN std_logic_vector(0 TO 3);
       a0h_brdata: IN std_logic_vector(0 TO 511);
       a0h_brpar: IN std_logic_vector(0 TO 7);
       ha0_bwvalid: OUT std_logic;
       ha0_bwtag: OUT std_logic_vector(0 TO 7);
       ha0_bwad: OUT std_logic_vector(0 TO 5);
       ha0_bwdata: OUT std_logic_vector(0 TO 511);
       ha0_bwpar: OUT std_logic_vector(0 TO 7);
       ha0_brtagpar: OUT std_logic;
       ha0_bwtagpar: OUT std_logic;
       ha0_rvalid: OUT std_logic;
       ha0_rtag: OUT std_logic_vector(0 TO 7);
       ha0_response: OUT std_logic_vector(0 TO 7);
       ha0_rcredits: OUT std_logic_vector(0 TO 8);
       ha0_rcachestate: OUT std_logic_vector(0 TO 1);
       ha0_rcachepos: OUT std_logic_vector(0 TO 12);
       ha0_rtagpar: OUT std_logic;
       ha0_mmval: OUT std_logic;
       ha0_mmrnw: OUT std_logic;
       ha0_mmdw: OUT std_logic;
       ha0_mmad: OUT std_logic_vector(0 TO 23);
       ha0_mmdata: OUT std_logic_vector(0 TO 63);
       ha0_mmcfg: OUT std_logic;
       a0h_mmack: IN std_logic;
       a0h_mmdata: IN std_logic_vector(0 TO 63);
       ha0_mmadpar: OUT std_logic;
       ha0_mmdatapar: OUT std_logic;
       a0h_mmdatapar: IN std_logic;
       ha0_jval: OUT std_logic;
       ha0_jcom: OUT std_logic_vector(0 TO 7);
       ha0_jea: OUT std_logic_vector(0 TO 63);
       a0h_jrunning: IN std_logic;
       a0h_jdone: IN std_logic;
       a0h_jcack: IN std_logic;
       a0h_jerror: IN std_logic_vector(0 TO 63);
       a0h_tbreq: IN std_logic;
       a0h_jyield: IN std_logic;
       ha0_jeapar: OUT std_logic;
       ha0_jcompar: OUT std_logic;
       a0h_paren: IN std_logic;
       ha0_pclock: OUT std_logic;
       gold_factory: IN std_logic;
       pci_user_reset: OUT std_logic;  --PCI hip user_reset signal if needed
       pci_clock_125MHz: OUT std_logic --125MHz clock if needed
       );

END Component base_img;

SIGNAL a0h_brdata: std_logic_vector(0 TO 511);  -- hline
SIGNAL a0h_brlat: std_logic_vector(0 TO 3);  -- v4bit
SIGNAL a0h_brpar: std_logic_vector(0 TO 7);  -- v8bit
SIGNAL a0h_cabt: std_logic_vector(0 TO 2);  -- cabt
SIGNAL a0h_cch: std_logic_vector(0 TO 15);  -- ctxhndl
SIGNAL a0h_cea: std_logic_vector(0 TO 63);  -- ead
SIGNAL a0h_ceapar: std_logic;  -- bool
SIGNAL a0h_com: std_logic_vector(0 TO 12);  -- apcmd
SIGNAL a0h_compar: std_logic;  -- bool
SIGNAL a0h_cpad: std_logic_vector(0 TO 2);  -- pade
SIGNAL a0h_csize: std_logic_vector(0 TO 11);  -- v12bit
SIGNAL a0h_ctag: std_logic_vector(0 TO 7);  -- acctag
SIGNAL a0h_ctagpar: std_logic;  -- bool
SIGNAL a0h_cvalid: std_logic;  -- bool
SIGNAL a0h_jcack: std_logic;  -- bool
SIGNAL a0h_jdone: std_logic;  -- bool
SIGNAL a0h_jerror: std_logic_vector(0 TO 63);  -- v64bit
SIGNAL a0h_jrunning: std_logic;  -- bool
SIGNAL a0h_jyield: std_logic;  -- bool
SIGNAL a0h_mmack: std_logic;  -- bool
SIGNAL a0h_mmdata: std_logic_vector(0 TO 63);  -- v64bit
SIGNAL a0h_mmdatapar: std_logic;  -- bool
SIGNAL a0h_paren: std_logic;  -- bool
SIGNAL a0h_tbreq: std_logic;  -- bool
SIGNAL ha0_brad: std_logic_vector(0 TO 5);  -- v6bit
SIGNAL ha0_brtag: std_logic_vector(0 TO 7);  -- acctag
SIGNAL ha0_brtagpar: std_logic;  -- bool
SIGNAL ha0_brvalid: std_logic;  -- bool
SIGNAL ha0_bwad: std_logic_vector(0 TO 5);  -- v6bit
SIGNAL ha0_bwdata: std_logic_vector(0 TO 511);  -- hline
SIGNAL ha0_bwpar: std_logic_vector(0 TO 7);  -- v8bit
SIGNAL ha0_bwtag: std_logic_vector(0 TO 7);  -- acctag
SIGNAL ha0_bwtagpar: std_logic;  -- bool
SIGNAL ha0_bwvalid: std_logic;  -- bool
SIGNAL ha0_croom: std_logic_vector(0 TO 7);  -- v8bit
SIGNAL ha0_jcom: std_logic_vector(0 TO 7);  -- jbcom
SIGNAL ha0_jcompar: std_logic;  -- bool
SIGNAL ha0_jea: std_logic_vector(0 TO 63);  -- v64bit
SIGNAL ha0_jeapar: std_logic;  -- bool
SIGNAL ha0_jval: std_logic;  -- bool
SIGNAL ha0_mmad: std_logic_vector(0 TO 23);  -- v24bit
SIGNAL ha0_mmadpar: std_logic;  -- bool
SIGNAL ha0_mmcfg: std_logic;  -- bool
SIGNAL ha0_mmdata: std_logic_vector(0 TO 63);  -- v64bit
SIGNAL ha0_mmdatapar: std_logic;  -- bool
SIGNAL ha0_mmdw: std_logic;  -- bool
SIGNAL ha0_mmrnw: std_logic;  -- bool
SIGNAL ha0_mmval: std_logic;  -- bool
SIGNAL ha0_pclock: std_logic;  -- bool
SIGNAL ha0_rcachepos: std_logic_vector(0 TO 12);  -- v13bit
SIGNAL ha0_rcachestate: std_logic_vector(0 TO 1);  -- statespec
SIGNAL ha0_rcredits: std_logic_vector(0 TO 8);  -- v9bit
SIGNAL ha0_response: std_logic_vector(0 TO 7);  -- apresp
SIGNAL ha0_rtag: std_logic_vector(0 TO 7);  -- acctag
SIGNAL ha0_rtagpar: std_logic;  -- bool
SIGNAL ha0_rvalid: std_logic;  -- bool
SIGNAL gold_factory: std_logic;
SIGNAL pci_user_reset: std_logic;
SIGNAL pci_clock_125MHz: std_logic;
SIGNAL led_red: std_logic_vector(0 TO 1);
SIGNAL led_green: std_logic_vector(0 TO 1);
SIGNAL led_blue: std_logic_vector(0 TO 1);
-- NVME Reset Logic                                                         -- only for NVME_USED=TRUE
SIGNAL nvme_reset_cnt_q : std_logic_vector(15 DOWNTO 0) := (OTHERS => '1'); -- only for NVME_USED=TRUE
SIGNAL nvme_reset_n_q   : std_logic := '1';                                 -- only for NVME_USED=TRUE
SIGNAL nvme_reset_ctl   : std_logic;                                        -- only for NVME_USED=TRUE
SIGNAL nvme_perst_ctl   : std_logic_vector(3 DOWNTO 0);                     -- only for NVME_USED=TRUE
SIGNAL m2_perst_tmp_n   : std_logic_vector(3 DOWNTO 0);                     -- only for NVME_USED=TRUE

BEGIN
  --                                                                        -- only for NVME_USED=TRUE
  -- NVMe Reset Logic                                                       -- only for NVME_USED=TRUE
  --                                                                        -- only for NVME_USED=TRUE
  -- Note: generate a 32768x4ns=131us reset pulse for NVMe                  -- only for NVME_USED=TRUE
  --                                                                        -- only for NVME_USED=TRUE
  nvme_reset : PROCESS (ha0_pclock)                                         -- only for NVME_USED=TRUE
  BEGIN                                                                     -- only for NVME_USED=TRUE
    IF (rising_edge(ha0_pclock)) THEN                                       -- only for NVME_USED=TRUE
      IF (pci_user_reset  = '1') THEN                                       -- only for NVME_USED=TRUE
        nvme_reset_cnt_q <= (OTHERS => '0');                                -- only for NVME_USED=TRUE
      ELSIF (nvme_reset_cnt_q(15 downto 14) /= "11") THEN                   -- only for NVME_USED=TRUE
        nvme_reset_cnt_q <= nvme_reset_cnt_q + '1';                         -- only for NVME_USED=TRUE
      END IF;                                                               -- only for NVME_USED=TRUE
      --                                                                    -- only for NVME_USED=TRUE
      -- Drive reset to PCIe cores for NVMe                                 -- only for NVME_USED=TRUE
      if  nvme_reset_cnt_q(15 downto 14) = "11" then                        -- only for NVME_USED=TRUE
        nvme_reset_n_q <= NOT nvme_reset_ctl;                               -- only for NVME_USED=TRUE
      else                                                                  -- only for NVME_USED=TRUE
        nvme_reset_n_q <= '0';                                              -- only for NVME_USED=TRUE
      end if;                                                               -- only for NVME_USED=TRUE
      --                                                                    -- only for NVME_USED=TRUE
      -- Drive resets to NVMe drives at M2 pins                             -- only for NVME_USED=TRUE
      m2_perst_tmp_n <= (nvme_reset_cnt_q(15) & nvme_reset_cnt_q(15) &      -- only for NVME_USED=TRUE
                         nvme_reset_cnt_q(15) & nvme_reset_cnt_q(15))       -- only for NVME_USED=TRUE
                        AND NOT nvme_perst_ctl;                             -- only for NVME_USED=TRUE
    END IF;                                                                 -- only for NVME_USED=TRUE
  END PROCESS nvme_reset;                                                   -- only for NVME_USED=TRUE
                                                                            -- only for NVME_USED=TRUE

                                                                            -- only for NVME_USED=TRUE
  o0: OBUF PORT MAP (I => m2_perst_tmp_n(0), O => m2_perst_n(0));           -- only for NVME_USED=TRUE
  o1: OBUF PORT MAP (I => m2_perst_tmp_n(1), O => m2_perst_n(1));           -- only for NVME_USED=TRUE
  o2: OBUF PORT MAP (I => m2_perst_tmp_n(2), O => m2_perst_n(2));           -- only for NVME_USED=TRUE
  o3: OBUF PORT MAP (I => m2_perst_tmp_n(3), O => m2_perst_n(3));           -- only for NVME_USED=TRUE


  --                                                                        -- only for NVME_USED=TRUE
  -- Clock ties for NVMe drives at M2 pins                                  -- only for NVME_USED=TRUE
  m2_susclk  <= (OTHERS => '0');                                            -- only for NVME_USED=TRUE


  a0: psl_accel
    PORT MAP (
      -- DDR4 SDRAM Interface                                               -- only for DDRI_USED=TRUE
      --                                                                    -- only for DDRI_USED=TRUE
      -- Clock inputs for SDRAM                                             -- only for DDRI_USED=TRUE
      refclk_sdram_p                    => refclk266_p,                     -- only for DDRI_USED=TRUE
      refclk_sdram_n                    => refclk266_n,                     -- only for DDRI_USED=TRUE
      --                                                                    -- only for DDR4_USED=TRUE
      -- Nallatech 250S card has one DDR4 SO-DIMMs                          -- only for DDR4_USED=TRUE
      c0_sys_clk_p                      => c0_sys_clk_p,                    -- only for DDR4_USED=TRUE
      c0_sys_clk_n                      => c0_sys_clk_n,                    -- only for DDR4_USED=TRUE
      c0_ddr4_adr                       => c0_ddr4_adr,                     -- only for DDR4_USED=TRUE
      c0_ddr4_ba                        => c0_ddr4_ba,                      -- only for DDR4_USED=TRUE
      c0_ddr4_cke                       => c0_ddr4_cke,                     -- only for DDR4_USED=TRUE
      c0_ddr4_cs_n                      => c0_ddr4_cs_n,                    -- only for DDR4_USED=TRUE
      c0_ddr4_dm_dbi_n                  => c0_ddr4_dm_dbi_n,                -- only for DDR4_USED=TRUE
      c0_ddr4_dq                        => c0_ddr4_dq,                      -- only for DDR4_USED=TRUE
      c0_ddr4_dqs_c                     => c0_ddr4_dqs_c,                   -- only for DDR4_USED=TRUE
      c0_ddr4_dqs_t                     => c0_ddr4_dqs_t,                   -- only for DDR4_USED=TRUE
      c0_ddr4_odt                       => c0_ddr4_odt,                     -- only for DDR4_USED=TRUE
      c0_ddr4_bg                        => c0_ddr4_bg,                      -- only for DDR4_USED=TRUE
      c0_ddr4_reset_n                   => c0_ddr4_reset_n,                 -- only for DDR4_USED=TRUE
      c0_ddr4_act_n                     => c0_ddr4_act_n,                   -- only for DDR4_USED=TRUE
      c0_ddr4_ck_c                      => c0_ddr4_ck_c,                    -- only for DDR4_USED=TRUE
      c0_ddr4_ck_t                      => c0_ddr4_ck_t,                    -- only for DDR4_USED=TRUE

      --                                                                    -- only for NVME_USED=TRUE
      -- NVME Interface                                                     -- only for NVME_USED=TRUE
      --                                                                    -- only for NVME_USED=TRUE
      -- Reset Input                                                        -- only for NVME_USED=TRUE
      nvme_reset_n                      => nvme_reset_n_q,                  -- only for NVME_USED=TRUE
      --                                                                    -- only for NVME_USED=TRUE
      -- Clock Inputs for NVMe                                              -- only for NVME_USED=TRUE
      refclk_nvme_ch0_p                 => pcie_clk1_p,                     -- only for NVME_USED=TRUE
      refclk_nvme_ch0_n                 => pcie_clk1_n,                     -- only for NVME_USED=TRUE
      refclk_nvme_ch1_p                 => pcie_clk2_p,                     -- only for NVME_USED=TRUE
      refclk_nvme_ch1_n                 => pcie_clk2_n,                     -- only for NVME_USED=TRUE
      --                                                                    -- only for NVME_USED=TRUE
      -- NVMe reset control                                                 -- only for NVME_USED=TRUE
      nvme_reset_ctl(4)                 => nvme_reset_ctl,                  -- only for NVME_USED=TRUE
      nvme_reset_ctl(3 DOWNTO 0)        => nvme_perst_ctl,                  -- only for NVME_USED=TRUE
      --                                                                    -- only for NVME_USED=TRUE
      -- NVME <-> PCIE Interface                                            -- only for NVME_USED=TRUE
      pcie_rc0_rxn(3 DOWNTO 0)          => pcie_rc0_rxn(3 DOWNTO 0),        -- only for NVME_USED=TRUE
      pcie_rc0_rxp(3 DOWNTO 0)          => pcie_rc0_rxp(3 DOWNTO 0),        -- only for NVME_USED=TRUE
      pcie_rc0_txn(3 DOWNTO 0)          => pcie_rc0_txn(3 DOWNTO 0),        -- only for NVME_USED=TRUE
      pcie_rc0_txp(3 DOWNTO 0)          => pcie_rc0_txp(3 DOWNTO 0),        -- only for NVME_USED=TRUE
      pcie_rc1_rxn(3 DOWNTO 0)          => pcie_rc1_rxn(3 DOWNTO 0),        -- only for NVME_USED=TRUE
      pcie_rc1_rxp(3 DOWNTO 0)          => pcie_rc1_rxp(3 DOWNTO 0),        -- only for NVME_USED=TRUE
      pcie_rc1_txn(3 DOWNTO 0)          => pcie_rc1_txn(3 DOWNTO 0),        -- only for NVME_USED=TRUE
      pcie_rc1_txp(3 DOWNTO 0)          => pcie_rc1_txp(3 DOWNTO 0),        -- only for NVME_USED=TRUE
      --
      -- CAPI PSL Interface
      --
      -- Accelerator Command Interface
      ah_cvalid                         => a0h_cvalid,
      ah_ctag                           => a0h_ctag,
      ah_com                            => a0h_com,
      ah_cpad                           => a0h_cpad,
      ah_cabt                           => a0h_cabt,
      ah_cea                            => a0h_cea,
      ah_cch                            => a0h_cch,
      ah_csize                          => a0h_csize,
      ha_croom                          => ha0_croom,
      --
      -- command parity
      ah_ctagpar                        => a0h_ctagpar,
      ah_compar                         => a0h_compar,
      ah_ceapar                         => a0h_ceapar,
      --
      -- Accelerator Buffer Interfaces
      ha_brvalid                        => ha0_brvalid,
      ha_brtag                          => ha0_brtag,
      ha_brad                           => ha0_brad,
      ah_brlat                          => a0h_brlat,
      ah_brdata                         => a0h_brdata,
      ah_brpar                          => a0h_brpar,
      ha_bwvalid                        => ha0_bwvalid,
      ha_bwtag                          => ha0_bwtag,
      ha_bwad                           => ha0_bwad,
      ha_bwdata                         => ha0_bwdata,
      ha_bwpar                          => ha0_bwpar,
      --
      -- buffer tag parity
      ha_brtagpar                       => ha0_brtagpar,
      ha_bwtagpar                       => ha0_bwtagpar,
      --
      -- PSL Response Interface
      ha_rvalid                         => ha0_rvalid,
      ha_rtag                           => ha0_rtag,
      ha_response                       => ha0_response,
      ha_rcredits                       => ha0_rcredits,
      ha_rcachestate                    => ha0_rcachestate,
      ha_rcachepos                      => ha0_rcachepos,
      ha_rtagpar                        => ha0_rtagpar,
      --
      -- MMIO Interface
      ha_mmval                          => ha0_mmval,
      ha_mmrnw                          => ha0_mmrnw,
      ha_mmdw                           => ha0_mmdw,
      ha_mmad                           => ha0_mmad,
      ha_mmdata                         => ha0_mmdata,
      ha_mmcfg                          => ha0_mmcfg,
      ah_mmack                          => a0h_mmack,
      ah_mmdata                         => a0h_mmdata,
      ha_mmadpar                        => ha0_mmadpar,
      ha_mmdatapar                      => ha0_mmdatapar,
      ah_mmdatapar                      => a0h_mmdatapar,
      --
      -- Accelerator Control Interface
      ha_jval                           => ha0_jval,
      ha_jcom                           => ha0_jcom,
      ha_jea                            => ha0_jea,
      ah_jrunning                       => a0h_jrunning,
      ah_jdone                          => a0h_jdone,
      ah_jcack                          => a0h_jcack,
      ah_jerror                         => a0h_jerror,
      ah_tbreq                          => a0h_tbreq,
      ah_jyield                         => a0h_jyield,
      ha_jeapar                         => ha0_jeapar,
      ha_jcompar                        => ha0_jcompar,
      --
      -- Misc Interface
      ah_paren                          => a0h_paren,
      ha_pclock                         => ha0_pclock
    );

    gold_factory <= '1'; --set to 1 to indicate images meant for user location. set to 0 to indicate factory image.

    -- led controls
    led_red <= "11";
    led_green <= "11";
    led_blue <= "11";

    b: base_img
     PORT MAP (
         pci_pi_nperst0   => pci_pi_nperst0,
         pci_pi_refclk_p0 => pci_pi_refclk_p0,
         pci_pi_refclk_n0 => pci_pi_refclk_n0,
         pci0_i_rxp_in0   => pci0_i_rxp_in0,
         pci0_i_rxn_in0   => pci0_i_rxn_in0,
         pci0_i_rxp_in1   => pci0_i_rxp_in1,
         pci0_i_rxn_in1   => pci0_i_rxn_in1,
         pci0_i_rxp_in2   => pci0_i_rxp_in2,
         pci0_i_rxn_in2   => pci0_i_rxn_in2,
         pci0_i_rxp_in3   => pci0_i_rxp_in3,
         pci0_i_rxn_in3   => pci0_i_rxn_in3,
         pci0_i_rxp_in4   => pci0_i_rxp_in4,
         pci0_i_rxn_in4   => pci0_i_rxn_in4,
         pci0_i_rxp_in5   => pci0_i_rxp_in5,
         pci0_i_rxn_in5   => pci0_i_rxn_in5,
         pci0_i_rxp_in6   => pci0_i_rxp_in6,
         pci0_i_rxn_in6   => pci0_i_rxn_in6,
         pci0_i_rxp_in7   => pci0_i_rxp_in7,
         pci0_i_rxn_in7   => pci0_i_rxn_in7,
         pci0_o_txp_out0  => pci0_o_txp_out0,
         pci0_o_txn_out0  => pci0_o_txn_out0,
         pci0_o_txp_out1  => pci0_o_txp_out1,
         pci0_o_txn_out1  => pci0_o_txn_out1,
         pci0_o_txp_out2  => pci0_o_txp_out2,
         pci0_o_txn_out2  => pci0_o_txn_out2,
         pci0_o_txp_out3  => pci0_o_txp_out3,
         pci0_o_txn_out3  => pci0_o_txn_out3,
         pci0_o_txp_out4  => pci0_o_txp_out4,
         pci0_o_txn_out4  => pci0_o_txn_out4,
         pci0_o_txp_out5  => pci0_o_txp_out5,
         pci0_o_txn_out5  => pci0_o_txn_out5,
         pci0_o_txp_out6  => pci0_o_txp_out6,
         pci0_o_txn_out6  => pci0_o_txn_out6,
         pci0_o_txp_out7  => pci0_o_txp_out7,
         pci0_o_txn_out7  => pci0_o_txn_out7,

         -- flash bus
         o_flash_oen      => o_flash_oen,
         o_flash_wen      => o_flash_wen,
         o_flash_rstn     => o_flash_rstn,
         o_flash_a        => o_flash_a,
         o_flash_a_dup    => o_flash_a_dup,
         o_flash_advn     => o_flash_advn,
         b_flash_dq       => b_flash_dq,

         --PTMON PMBUS
         b_basei2c_scl    => b_basei2c_scl,
         b_basei2c_sda    => b_basei2c_sda,
         b_smbus_scl      => b_smbus_scl,
         b_smbus_sda      => b_smbus_sda,

         o_ucd_gpio21     => o_ucd_gpio21,

         --LED ports from NVME logic
         led_red          => led_red,
         led_green        => led_green,
         led_blue         => led_blue,
         o_led_red        => o_led_red,
         o_led_green      => o_led_green,
         o_led_blue       => o_led_blue,

         a0h_cvalid       => a0h_cvalid,
         a0h_ctag         => a0h_ctag,
         a0h_com          => a0h_com,
         a0h_cpad         => a0h_cpad,
         a0h_cabt         => a0h_cabt,
         a0h_cea          => a0h_cea,
         a0h_cch          => a0h_cch,
         a0h_csize        => a0h_csize,
         ha0_croom        => ha0_croom,
         a0h_ctagpar      => a0h_ctagpar,
         a0h_compar       => a0h_compar,
         a0h_ceapar       => a0h_ceapar,
         ha0_brvalid      => ha0_brvalid,
         ha0_brtag        => ha0_brtag,
         ha0_brad         => ha0_brad,
         a0h_brlat        => a0h_brlat,
         a0h_brdata       => a0h_brdata,
         a0h_brpar        => a0h_brpar,
         ha0_bwvalid      => ha0_bwvalid,
         ha0_bwtag        => ha0_bwtag,
         ha0_bwad         => ha0_bwad,
         ha0_bwdata       => ha0_bwdata,
         ha0_bwpar        => ha0_bwpar,
         ha0_brtagpar     => ha0_brtagpar,
         ha0_bwtagpar     => ha0_bwtagpar,
         ha0_rvalid       => ha0_rvalid,
         ha0_rtag         => ha0_rtag,
         ha0_response     => ha0_response,
         ha0_rcredits     => ha0_rcredits,
         ha0_rcachestate  => ha0_rcachestate,
         ha0_rcachepos    => ha0_rcachepos,
         ha0_rtagpar      => ha0_rtagpar,
         ha0_mmval        => ha0_mmval,
         ha0_mmrnw        => ha0_mmrnw,
         ha0_mmdw         => ha0_mmdw,
         ha0_mmad         => ha0_mmad,
         ha0_mmdata       => ha0_mmdata,
         ha0_mmcfg        => ha0_mmcfg,
         a0h_mmack        => a0h_mmack,
         a0h_mmdata       => a0h_mmdata,
         ha0_mmadpar      => ha0_mmadpar,
         ha0_mmdatapar    => ha0_mmdatapar,
         a0h_mmdatapar    => a0h_mmdatapar,
         ha0_jval         => ha0_jval,
         ha0_jcom         => ha0_jcom,
         ha0_jea          => ha0_jea,
         a0h_jrunning     => a0h_jrunning,
         a0h_jdone        => a0h_jdone,
         a0h_jcack        => a0h_jcack,
         a0h_jerror       => a0h_jerror,
         a0h_tbreq        => a0h_tbreq,
         a0h_jyield       => a0h_jyield,
         ha0_jeapar       => ha0_jeapar,
         ha0_jcompar      => ha0_jcompar,
         a0h_paren        => a0h_paren,
         ha0_pclock       => ha0_pclock,
         gold_factory     => gold_factory,
         pci_user_reset   => pci_user_reset,
         pci_clock_125MHz => pci_clock_125MHz
    );

END psl_fpga;
