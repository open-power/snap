----------------------------------------------------------------------------
----------------------------------------------------------------------------
--
-- Copyright 2016 International Business Machines
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions AND
-- limitations under the License.
--
-- change log:
----------------------------------------------------------------------------
----------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_misc.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;

USE work.snap_core_types.all;
USE work.dma_types.all;

ENTITY dma_buffer IS
  PORT (
    --
    -- pervasive
    ha_pclock                : IN  std_logic;
    afu_reset                : IN  std_logic;
    --
    -- PSL IOs
    hd_c_i                   : IN  HD_C_T;
    --
    -- DMA WRITE IOs  
    write_ctrl_i             : IN  ARR_DMA_CTL_T;
    sd_d_i                   : IN  SD_D_T;
    buf_walmost_full_i       : IN  std_logic;
    wram_raddr_i             : IN  std_logic_vector(5 DOWNTO 0);
    buf_wtag_o               : OUT std_logic_vector(5 DOWNTO 0);
    buf_wtag_p_o             : OUT std_logic;
    buf_wtag_cl_partial_o    : OUT boolean;
    buf_wtag_valid_o         : OUT boolean;
    buf_wdata_o              : OUT std_logic_vector(1023 DOWNTO 0);

    --
    --
    -- DMA READ IOs
    read_ctrl_i              : IN  ARR_DMA_CTL_T;
    buf_rrdreq_i             : IN  std_logic;
    buf_rdata_o              : OUT std_logic_vector(511 DOWNTO 0);
    buf_rdata_p_o            : OUT std_logic_vector(  7 DOWNTO 0);
    buf_rdata_vld_o          : OUT std_logic;
    buf_rdata_end_o          : OUT std_logic;
    buf_rtag_o               : OUT std_logic_vector(5 DOWNTO 0);
    buf_rtag_p_o             : OUT std_logic;
    buf_rtag_valid_o         : OUT boolean;
    --
    -- Error Inject
    inject_dma_read_error_i  : IN  std_logic;
    inject_dma_write_error_i : IN  std_logic;
    inject_ah_b_rpar_error_i : IN  std_logic
  );
END dma_buffer;

ARCHITECTURE dma_buffer OF dma_buffer IS
  --
  -- CONSTANT

  --
  -- TYPE
  TYPE ARR_RLCK_DATA_T   IS ARRAY (0 TO 1) OF std_logic_vector(511 DOWNTO 0);
  TYPE ARR_RLCK_DATA_P_T IS ARRAY (0 TO 1) OF std_logic_vector(  7 DOWNTO 0);

  --
  -- ATTRIBUTE

  --
  -- SIGNAL
  SIGNAL buf_rtag                         : integer RANGE 0 TO 31;
  SIGNAL buf_wtag                         : integer RANGE 0 TO 31;
  SIGNAL buf_rtag_q                       : std_logic_vector(  5 DOWNTO 0);
  SIGNAL buf_wdata_extra_v                : std_logic;
  SIGNAL buf_rtag_qq                      : std_logic_vector(  5 DOWNTO 0);
  SIGNAL buf_rtag_qqq                     : std_logic_vector(  5 DOWNTO 0);
  SIGNAL buf_rtag_p_q                     : std_logic;
  SIGNAL buf_rdata_vld                    : std_logic;
  SIGNAL rram_ren                         : std_logic;
  SIGNAL rram_rdata_v                     : std_logic;
  SIGNAL rram_rdata_e                     : std_logic;
  SIGNAL buf_rtag_p_qq                    : std_logic;
  SIGNAL buf_rtag_p_qqq                   : std_logic;
  SIGNAL buf_rtag_valid_q                 : boolean;
  SIGNAL buf_rtag_valid_qq                : boolean;
  SIGNAL buf_rtag_valid_qqq               : boolean;
  SIGNAL buf_wtag_q                       : std_logic_vector(  5 DOWNTO 0);
  SIGNAL buf_wtag_p_q                     : std_logic;
  SIGNAL buf_wtag_valid_q                 : boolean;
  SIGNAL hd_c_q                           : HD_C_T;
  SIGNAL rlck_data_p_q                    : ARR_RLCK_DATA_P_T;
  SIGNAL rlck_data_q                      : ARR_RLCK_DATA_T;
  SIGNAL rram_raddr                       : std_logic_vector(  5 DOWNTO 0);
  SIGNAL rram_raddr_d, rram_raddr_q       : std_logic_vector(  6 DOWNTO 0);
  SIGNAL rram_raddr_p_d, rram_raddr_p_q   : std_logic;
  SIGNAL rram_rdata                       : std_logic_vector(519 DOWNTO 0);
  SIGNAL rram_rdata_vld_d                 : std_logic;
  SIGNAL rram_rdata_vld_q                 : std_logic;
  SIGNAL rram_rdata_vld_qq                : std_logic;
  SIGNAL rram_rdata_vld_qqq               : std_logic;
  SIGNAL rram_rdata_end_d                 : std_logic;
  SIGNAL rram_rdata_end_q                 : std_logic;
  SIGNAL rram_rdata_end_qq                : std_logic;
  SIGNAL rram_rdata_end_qqq               : std_logic;
  SIGNAL rram_rdata_p_q                   : std_logic_vector( 7 DOWNTO 0);
  SIGNAL rram_rdata_q                     : std_logic_vector(511 DOWNTO 0);
  SIGNAL rram_waddr                       : std_logic_vector(  5 DOWNTO 0);
  SIGNAL rram_wdata_p_q                   : std_logic_vector((  8*CAPI_VER)-1 DOWNTO 0);
  SIGNAL rram_wen                         : std_logic;
  SIGNAL wback_data_q                     : std_logic_vector((512*CAPI_VER)-1 DOWNTO 0);
  SIGNAL wram_waddr                       : std_logic_vector(  5 DOWNTO 0);
  SIGNAL wram_rdata                       : std_logic_vector((576*CAPI_VER)-1 DOWNTO 0);
  SIGNAL wram_rdata_p_q                   : std_logic_vector((  8*CAPI_VER)-1 DOWNTO 0);
  SIGNAL wram_rdata_q                     : std_logic_vector((512*CAPI_VER)-1 DOWNTO 0);
  SIGNAL wram_waddr_d, wram_waddr_q       : std_logic_vector(  6 DOWNTO 0);
  SIGNAL wram_waddr_p_d, wram_waddr_p_q   : std_logic;
  SIGNAL wram_wdata                       : std_logic_vector(575 DOWNTO 0);
  SIGNAL wram_wen                         : std_logic;
  SIGNAL even_wdata_complete_q            : boolean;
  SIGNAL buf_wtag_cl_partial_q            : boolean;
  SIGNAL wdata_parity_err_q               : std_logic_vector(  7 DOWNTO 0) := (OTHERS => '0');
  SIGNAL wdata_parity_fir_q               : std_logic := '0';
  
  COMPONENT ram_1040x32_2p
    PORT(
      clka  : IN  STD_LOGIC;
      wea   : IN  STD_LOGIC_VECTOR(   0 DOWNTO 0);
      addra : IN  STD_LOGIC_VECTOR(   5 DOWNTO 0);
      dina  : IN  STD_LOGIC_VECTOR(1039 DOWNTO 0);
      douta : OUT STD_LOGIC_VECTOR( 519 DOWNTO 0);
      clkb  : IN  STD_LOGIC;
      enb   : IN  STD_LOGIC;
      web   : IN  STD_LOGIC_VECTOR(   0 DOWNTO 0);
      addrb : IN  STD_LOGIC_VECTOR(   5 DOWNTO 0);
      dinb  : IN  STD_LOGIC_VECTOR(1039 DOWNTO 0);
      doutb : OUT STD_LOGIC_VECTOR( 519 DOWNTO 0)
    );
  END COMPONENT ram_1040x32_2p;

  COMPONENT ram_1152x32_2p
    PORT(
      clka  : IN  STD_LOGIC;
      wea   : IN  STD_LOGIC_VECTOR(   0 DOWNTO 0);
      addra : IN  STD_LOGIC_VECTOR(   5 DOWNTO 0);
      dina  : IN  STD_LOGIC_VECTOR( 575 DOWNTO 0);
      douta : OUT STD_LOGIC_VECTOR(1151 DOWNTO 0);
      clkb  : IN  STD_LOGIC;
      enb   : IN  STD_LOGIC;
      web   : IN  STD_LOGIC_VECTOR(   0 DOWNTO 0);
      addrb : IN  STD_LOGIC_VECTOR(   5 DOWNTO 0);
      dinb  : IN  STD_LOGIC_VECTOR( 575 DOWNTO 0);
      doutb : OUT STD_LOGIC_VECTOR(1151 DOWNTO 0)
    );
  END COMPONENT ram_1152x32_2p;

BEGIN
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- ******************************************************
-- *****  DMA READ                                  *****
-- ******************************************************
--
-- Note: DMA READ is using tag range 7:0 = "000-----"
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  -- DMA READ RAM LOGIC
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
    ----------------------------------------------------------------------------
    -- RAM: ram_1040x32_2p for P9 CAPI2.0
    ----------------------------------------------------------------------------
    --
    dma_read_ram: ram_1040x32_2p
    PORT MAP (
      --
      -- pervasive
      clka                   => ha_pclock,
      wea(0)                 => rram_wen,
      addra                  => rram_waddr,
      dina( 511 DOWNTO    0) => hd_c_q.data(1023 DOWNTO 512),
      dina( 519 DOWNTO  512) => (OTHERS => '0'),
      dina(1031 DOWNTO  520) => hd_c_q.data( 511 DOWNTO   0),
      dina(1039 DOWNTO 1032) => (OTHERS => '0'),
      douta                  => open,
      clkb                   => ha_pclock,
      enb                    => '1',
      web(0)                 => '0',
      addrb                  => rram_raddr,
      dinb                   => (OTHERS => '0'),
      doutb                  => rram_rdata
    );

    ----------------------------------------------------------------------------
    -- RAM control none clock
    -- Note: Only a full CL will be transfered to job_manager or data_bridge.
    --       Throttling in between a CL transfer is not possible.
    ----------------------------------------------------------------------------
    buf_rtag      <= to_integer(unsigned(rram_raddr_q(5 DOWNTO 1)));

    rram_ren      <= '1' WHEN ( buf_rrdreq_i    = '1' AND (read_ctrl_i(buf_rtag).buf   = FULL))  ELSE '0';
    rram_rdata_v  <= '1' WHEN ((rram_raddr_q(0) = '0' AND (read_ctrl_i(buf_rtag).clt(EVEN_64B_CL) = '1')) OR 
                               (rram_raddr_q(0) = '1' AND (read_ctrl_i(buf_rtag).clt(ODD_64B_CL)  = '1'))) ELSE '0';
    rram_rdata_e  <= '1' WHEN ((rram_raddr_q(0) = '0' AND (read_ctrl_i(buf_rtag).clt(ODD_64B_CL) = '0')) OR 
                               (rram_raddr_q(0) = '1' AND (read_ctrl_i(buf_rtag).clt(ODD_64B_CL) = '1'))) AND read_ctrl_i(buf_rtag).clt(LAST_CL) = '1' ELSE '0';

                                                                                                         
    rram_waddr <=  hd_c_q.utag(4 DOWNTO 0) & '0' ;
    rram_raddr <= rram_raddr_q(5 DOWNTO 0);

    rram_raddr_d     <=               rram_raddr_q       +          "0000001"        WHEN (rram_ren = '1'                       ) ELSE rram_raddr_q;
    rram_rdata_vld_d <=                                                          '1' WHEN (rram_ren = '1' AND rram_rdata_v = '1') ELSE '0';
    rram_rdata_end_d <=                                                          '1' WHEN (rram_ren = '1' AND rram_rdata_e = '1') ELSE '0';

    rram_wen   <= hd_c_q.valid when (hd_c_q.utag(7 DOWNTO 5) = "000") else '0';

    ----------------------------------------------------------------------------
    -- RAM control clock
    ----------------------------------------------------------------------------
    rram_ctrl_clk : PROCESS (ha_pclock)
    BEGIN
      IF (rising_edge(ha_pclock)) THEN
        --
        -- defaults
        --
        buf_rtag_q         <= rram_raddr_q(6 DOWNTO 1);
        buf_rtag_qq        <= buf_rtag_q;
        buf_rtag_qqq       <= buf_rtag_qq;
        buf_rtag_p_q       <= parity_gen_even(rram_raddr_p_q & rram_raddr_q(0));
        buf_rtag_p_qq      <= buf_rtag_p_q;
        buf_rtag_p_qqq     <= buf_rtag_p_qq;
        buf_rtag_valid_q   <= FALSE;
        buf_rtag_valid_qq  <= buf_rtag_valid_q;
        buf_rtag_valid_qqq <= buf_rtag_valid_qq;
        rram_rdata_q       <= rram_rdata(511 DOWNTO   0);
        rram_rdata_p_q     <= rram_rdata(519 DOWNTO 512);

        IF (rram_raddr_d(1) /= rram_raddr_q(1))  THEN
          buf_rtag_valid_q <= TRUE;
        END IF;
      END IF;
    END PROCESS rram_ctrl_clk;


  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  -- DMA Read Lock Register
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
    rlock_reg : PROCESS (ha_pclock)
    BEGIN
      IF (rising_edge(ha_pclock)) THEN
        --
        -- defaults
        --
        wback_data_q   <= wback_data_q;

        --
        -- only reacts on the read lock tag
        IF (hd_c_q.utag(7 DOWNTO 0) = x"20")  AND
           (hd_c_q.valid            = '1'  ) THEN
          wback_data_q <= hd_c_q.data;
        END IF;
      END IF;
    END PROCESS rlock_reg;



--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- ******************************************************
-- *****  DMA WRITE                                 *****
-- ******************************************************
--
-- Note: DMA WRITE is using tag range 32 to 63
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  -- DMA WRITE RAM LOGIC
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
    ----------------------------------------------------------------------------
    -- RAM: ram_1152x32_2p for P9 CAPI2.0
    ----------------------------------------------------------------------------
    --
    dma_write_ram: ram_1152x32_2p
    PORT MAP (
      --
      -- pervasive
      clka                   => ha_pclock,
      wea(0)                 => wram_wen,
      addra                  => wram_waddr,
      dina                   => wram_wdata,
      douta                  => open,
      enb                    => '1',
      clkb                   => ha_pclock,
      web(0)                 => '0',
      addrb                  => wram_raddr_i,
      dinb                   => (OTHERS => '0'),
      doutb( 575 DOWNTO   0) => wram_rdata(1151 DOWNTO 576),
      doutb(1151 DOWNTO 576) => wram_rdata( 575 DOWNTO   0)
    );

  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  -- DMA Write Control
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
    ----------------------------------------------------------------------------
    -- none clk process
    ----------------------------------------------------------------------------
    wram_waddr_d               <=               wram_waddr_q       +          "0000001"       when wram_wen = '1' else wram_waddr_q;
    wram_waddr_p_d             <= AC_PPARITH(1, wram_waddr_q, wram_waddr_p_q, "0000001", '0') when wram_wen = '1' else wram_waddr_p_q;
    wram_waddr                 <= wram_waddr_q(5 DOWNTO 0);
    wram_wdata(             0) <= sd_d_i.wr_data(0) XOR inject_dma_write_error_i;
    wram_wdata(511 DOWNTO   1) <= sd_d_i.wr_data(511 DOWNTO 1);
    wram_wdata(575 DOWNTO 512) <= sd_d_i.wr_strobe WHEN buf_wdata_extra_v = '0' ELSE (OTHERS => '0');
    wram_wen                   <= (or_reduce(sd_d_i.wr_strobe) AND NOT buf_walmost_full_i) OR buf_wdata_extra_v;

    buf_wtag                   <= to_integer(unsigned(wram_waddr_q(5 DOWNTO 1)));
    buf_wdata_extra_v          <= '1' WHEN (wram_waddr_q(0) = '0' AND write_ctrl_i(buf_wtag).clt(EVEN_64B_CL) = '0'
                                                                  AND write_ctrl_i(buf_wtag).clt(ODD_64B_CL)  = '1') OR
                                           (wram_waddr_q(0) = '1' AND write_ctrl_i(buf_wtag).clt(EVEN_64B_CL) = '1' 
                                                                  AND write_ctrl_i(buf_wtag).clt(ODD_64B_CL)  = '0') ELSE '0';
 
    ----------------------------------------------------------------------------
    -- clk process
    ----------------------------------------------------------------------------
    wram_ctrl_clk : PROCESS (ha_pclock)
      VARIABLE odd_wdata_complete_v : boolean;
      VARIABLE wram_rdata_v         : std_logic_vector((512*CAPI_VER)-1 DOWNTO 0);
      VARIABLE wram_rdata_be_v      : std_logic_vector(( 64*CAPI_VER)-1 DOWNTO 0);
      VARIABLE wram_rmdata_v        : std_logic_vector((512*CAPI_VER)-1 DOWNTO 0);
      VARIABLE wram_rmdata_p_v      : std_logic_vector((  8*CAPI_VER)-1 DOWNTO 0);
    BEGIN
      IF (rising_edge(ha_pclock)) THEN
        --
        -- defaults
        --
        buf_wtag_q            <= wram_waddr_q(6 DOWNTO 1);
        buf_wtag_p_q          <= parity_gen_even(wram_waddr_p_q & wram_waddr_q(0));
        buf_wtag_valid_q      <= FALSE;
        buf_wtag_cl_partial_q <= TRUE;
        wdata_parity_err_q    <= (OTHERS => '0');
        wdata_parity_fir_q    <= '0';
        wram_waddr_q          <= wram_waddr_d;
        wram_waddr_p_q        <= wram_waddr_p_d;

        --
        -- wdata
        IF wram_wen = '1' THEN
          --
          -- check that the first 64 bytes of a CL are written into the buffer
          --
          IF (wram_waddr_q(0) = '0') THEN
            IF (and_reduce(sd_d_i.wr_strobe) = '1') THEN
              even_wdata_complete_q <= TRUE;
            ELSE
              even_wdata_complete_q <= FALSE;
            END IF;
          END IF;

          --
          -- check that the second 64 bytes of a CL are written into the buffer
          --
          IF (wram_waddr_q(0) = '1') THEN
            IF (and_reduce(sd_d_i.wr_strobe) = '1') THEN
              odd_wdata_complete_v := TRUE;
            ELSE
              odd_wdata_complete_v := FALSE;
            END IF;
          END IF;
        end if;

        --
        -- check that the full CL is written into the buffer
        --
        IF (even_wdata_complete_q = TRUE) AND
           (odd_wdata_complete_v  = TRUE) THEN
          buf_wtag_cl_partial_q <= FALSE;
        END IF;

        IF (wram_waddr_d(1) /= wram_waddr_q(1))  THEN
          buf_wtag_valid_q <= TRUE;
        END IF;

        --
        -- RAM output wiring
        FOR w IN 0 TO CAPI_VER-1 LOOP
          wram_rdata_v   ((512*w+512)-1 DOWNTO 512*w) := wram_rdata((576*w+512)-1 DOWNTO 576*w);
          wram_rdata_be_v(( 64*w+ 64)-1 DOWNTO  64*w) := wram_rdata((576*w+576)-1 DOWNTO 576*w+512);
   
          --
          -- wram read and modified data
          FOR i IN (64*(w+1))-1 DOWNTO 0 LOOP
            IF wram_rdata_be_v(i) = '1' THEN
              wram_rmdata_v(i*8+7 DOWNTO i*8) := wram_rdata_v(i*8+7 DOWNTO i*8);
            ELSE
              wram_rmdata_v(i*8+7 DOWNTO i*8) := wback_data_q(i*8+7 DOWNTO i*8);
            END IF;
          END LOOP;  -- i
          wram_rmdata_p_v(8*w+7 DOWNTO 8*w) := AC_GENPARITY(wram_rmdata_v(512*w+511 DOWNTO 512*w+448), 64) &
                                               AC_GENPARITY(wram_rmdata_v(512*w+447 DOWNTO 512*w+384), 64) &
                                               AC_GENPARITY(wram_rmdata_v(512*w+383 DOWNTO 512*w+320), 64) &
                                               AC_GENPARITY(wram_rmdata_v(512*w+319 DOWNTO 512*w+256), 64) &
                                               AC_GENPARITY(wram_rmdata_v(512*w+255 DOWNTO 512*w+192), 64) &
                                               AC_GENPARITY(wram_rmdata_v(512*w+191 DOWNTO 512*w+128), 64) &
                                               AC_GENPARITY(wram_rmdata_v(512*w+127 DOWNTO 512*w+64) , 64) &
                                               AC_GENPARITY(wram_rmdata_v(512*w+ 63 DOWNTO 512*w+0)  , 64);
        END LOOP; -- W

        --
        --
        wram_rdata_q   <= wram_rmdata_v;
        wram_rdata_p_q <= wram_rmdata_p_v;            

        --
        -- Reset Logic
        -- 
        IF afu_reset = '1' THEN
          --
          -- initial values
          --
          wram_waddr_q       <= (OTHERS => '0');
          wram_waddr_p_q     <= '1';
        END IF;
      END IF;
    END PROCESS wram_ctrl_clk;



----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
---- ******************************************************
---- ***** RAS                                        *****
---- ******************************************************
----
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
  ----------------------------------------------------------------------------
  ----------------------------------------------------------------------------
  -- PSL INPUT Checker
  ----------------------------------------------------------------------------
  ----------------------------------------------------------------------------

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- ******************************************************
-- ***** MISC                                       *****
-- ******************************************************
--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  -- Output Connection
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
    --
    --
    --
    buf_rtag_o            <= buf_rtag_qqq;
    buf_rtag_p_o          <= buf_rtag_p_qqq;
    buf_rtag_valid_o      <= buf_rtag_valid_qqq;
    buf_wtag_o            <= buf_wtag_q;
    buf_wtag_p_o          <= buf_wtag_p_q;
    buf_wtag_valid_o      <= buf_wtag_valid_q;
    buf_wtag_cl_partial_o <= buf_wtag_cl_partial_q;


    buf_rdata_o      <= rram_rdata_q;
    buf_rdata_p_o    <= rram_rdata_p_q;
    buf_rdata_vld_o  <= rram_rdata_vld_qqq;
    buf_rdata_end_o  <= rram_rdata_end_qqq;

    buf_wdata_o <= wram_rdata_q(1023 DOWNTO 0);

  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  --  Register
  ------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
    --
    registers : PROCESS (ha_pclock)
    BEGIN
      IF (rising_edge(ha_pclock)) THEN
        hd_c_q              <= hd_c_i;
        rram_raddr_q        <= rram_raddr_d;
        rram_raddr_p_q      <= rram_raddr_p_d;
        rram_rdata_vld_q    <= rram_rdata_vld_d;
        rram_rdata_vld_qq   <= rram_rdata_vld_q;
        rram_rdata_vld_qqq  <= rram_rdata_vld_qq;
        rram_rdata_end_q    <= rram_rdata_end_d;
        rram_rdata_end_qq   <= rram_rdata_end_q;
        rram_rdata_end_qqq  <= rram_rdata_end_qq;

        IF afu_reset = '1' THEN
          rram_raddr_q        <= (OTHERS => '0');
          rram_raddr_p_q      <= '1';
          rram_rdata_vld_q    <= '0';
          rram_rdata_vld_qq   <= '0';
          rram_rdata_vld_qqq  <= '0';
          rram_rdata_end_q    <= '0';
          rram_rdata_end_qq   <= '0';
          rram_rdata_end_qqq  <= '0';
        END IF;
      END IF;
    END PROCESS registers;
END ARCHITECTURE;

