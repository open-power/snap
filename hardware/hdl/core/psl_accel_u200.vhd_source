----------------------------------------------------------------------------
----------------------------------------------------------------------------
--
-- Copyright 2017 International Business Machines
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions AND
-- limitations under the License.
--
----------------------------------------------------------------------------
----------------------------------------------------------------------------

  LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.std_logic_misc.all;
  USE ieee.std_logic_unsigned.all;
  USE ieee.numeric_std.all;

  USE work.psl_accel_types.ALL;
  USE work.snap_core_types.ALL;
  USE work.action_types.ALL;

#ifdef CONFIG_ENABLE_DDRI
  LIBRARY unisim;
  USE unisim.vcomponents.all;
#endif

ENTITY psl_accel IS
  GENERIC (
    BRAM_USED  : BOOLEAN := FALSE;

    -- Parameters for Axi Master Bus Interface AXI_CARD_MEM0 : to DDR memory
    C_AXI_CARD_MEM0_ID_WIDTH            : integer   := C_DDR_AXI_ID_WIDTH;
    C_AXI_CARD_MEM0_ADDR_WIDTH          : integer   := C_DDR_AXI_ADDR_WIDTH;
    C_AXI_CARD_MEM0_DATA_WIDTH          : integer   := C_DDR_AXI_DATA_WIDTH;
    C_AXI_CARD_MEM0_AWUSER_WIDTH        : integer   := C_DDR_AXI_AWUSER_WIDTH;
    C_AXI_CARD_MEM0_ARUSER_WIDTH        : integer   := C_DDR_AXI_ARUSER_WIDTH;
    C_AXI_CARD_MEM0_WUSER_WIDTH         : integer   := C_DDR_AXI_WUSER_WIDTH;
    C_AXI_CARD_MEM0_RUSER_WIDTH         : integer   := C_DDR_AXI_RUSER_WIDTH;
    C_AXI_CARD_MEM0_BUSER_WIDTH         : integer   := C_DDR_AXI_BUSER_WIDTH;

    -- Parameters for Axi Master Bus Interface AXI_NVME : to NVMe
    C_AXI_NVME_ID_WIDTH                 : integer   := C_NVME_AXI_ID_WIDTH;
    C_AXI_NVME_ADDR_WIDTH               : integer   := C_NVME_AXI_ADDR_WIDTH;
    C_AXI_NVME_DATA_WIDTH               : integer   := C_NVME_AXI_DATA_WIDTH;
    C_AXI_NVME_AWUSER_WIDTH             : integer   := C_NVME_AXI_AWUSER_WIDTH;
    C_AXI_NVME_ARUSER_WIDTH             : integer   := C_NVME_AXI_ARUSER_WIDTH;
    C_AXI_NVME_WUSER_WIDTH              : integer   := C_NVME_AXI_WUSER_WIDTH;
    C_AXI_NVME_RUSER_WIDTH              : integer   := C_NVME_AXI_RUSER_WIDTH;
    C_AXI_NVME_BUSER_WIDTH              : integer   := C_NVME_AXI_BUSER_WIDTH;

    -- Parameters for Axi Slave Bus Interface AXI_CTRL_REG
    C_AXI_CTRL_REG_DATA_WIDTH           : integer   := C_REG_DATA_WIDTH;
    C_AXI_CTRL_REG_ADDR_WIDTH           : integer   := C_REG_ADDR_WIDTH;

    -- Parameters for Axi Master Bus Interface AXI_HOST_MEM : to Host memory
    C_AXI_HOST_MEM_ID_WIDTH             : integer   := C_HOST_AXI_ID_WIDTH;
    C_AXI_HOST_MEM_ADDR_WIDTH           : integer   := C_HOST_AXI_ADDR_WIDTH;
    C_AXI_HOST_MEM_DATA_WIDTH           : integer   := C_HOST_AXI_DATA_WIDTH;
    C_AXI_HOST_MEM_AWUSER_WIDTH         : integer   := CONTEXT_BITS;
    C_AXI_HOST_MEM_ARUSER_WIDTH         : integer   := CONTEXT_BITS;
    C_AXI_HOST_MEM_WUSER_WIDTH          : integer   := C_HOST_AXI_WUSER_WIDTH;
    C_AXI_HOST_MEM_RUSER_WIDTH          : integer   := C_HOST_AXI_RUSER_WIDTH;
    C_AXI_HOST_MEM_BUSER_WIDTH          : integer   := C_HOST_AXI_BUSER_WIDTH
  );
  PORT(
       -- Command interface
       ah_cvalid                        : OUT   std_logic                  ; -- Command valid
       ah_ctag                          : OUT   std_logic_vector(0 to 7)   ; -- Command tag
       ah_ctagpar                       : OUT   std_logic                  ; -- Command tag parity
       ah_com                           : OUT   std_logic_vector(0 to 12)  ; -- Command code
       ah_compar                        : OUT   std_logic                  ; -- Command code parity
       ah_cabt                          : OUT   std_logic_vector(0 to 2)   ; -- Command ABT
       ah_cea                           : OUT   std_logic_vector(0 to 63)  ; -- Command address
       ah_ceapar                          : OUT   std_logic                  ; -- Command address parity
       ah_cch                           : OUT   std_logic_vector(0 to 15)  ; -- Command context handle
       ah_csize                         : OUT   std_logic_vector(0 to 11)  ; -- Command size
       ah_cpagesize                     : OUT   std_logic_vector(0 to 3)   := (others => '0'); -- ** New tie to 0000
       ha_croom                         : IN    std_logic_vector(0 to 7)   ; -- Command room
       -- Buffer interface
       ha_brvalid                       : IN    std_logic                  ; -- Buffer Read valid
       ha_brtag                         : IN    std_logic_vector(0 to 7)   ; -- Buffer Read tag
       ha_brtagpar                      : IN    std_logic                  ; -- Buffer Read tag parity
       ha_brad                          : IN    std_logic_vector(0 to 5)   ; -- Buffer Read address
       ah_brlat                         : OUT   std_logic_vector(0 to 3)   ; -- Buffer Read latency
       ah_brdata                        : OUT   std_logic_vector(0 to 1023); -- Buffer Read data
       ah_brpar                         : OUT   std_logic_vector(0 to 15)  ; -- Buffer Read data parity
       ha_bwvalid                       : IN    std_logic                  ; -- Buffer Write valid
       ha_bwtag                         : IN    std_logic_vector(0 to 7)   ; -- Buffer Write tag
       ha_bwtagpar                      : IN    std_logic                  ; -- Buffer Write tag parity
       ha_bwad                          : IN    std_logic_vector(0 to 5)   ; -- Buffer Write address
       ha_bwdata                        : IN    std_logic_vector(0 to 1023); -- Buffer Write data
       ha_bwpar                         : IN    std_logic_vector(0 to 15)  ; -- Buffer Write data parity
       -- Response interface
       ha_rvalid                        : IN    std_logic                  ; -- Response valid
       ha_rtag                          : IN    std_logic_vector(0 to 7)   ; -- Response tag
       ha_rtagpar                       : IN    std_logic                  ; -- Response tag parity
       ha_rditag                        : IN    std_logic_vector(0 to 8);    -- **New DMA Translation Tag for xlat_* requests
       ha_rditagpar                     : IN    std_logic;                   -- **New Parity bit for above
       ha_response                      : IN    std_logic_vector(0 to 7)   ; -- Response
       ha_response_ext                  : IN    std_logic_vector(0 to 7)   ; -- **New Response Ext
       ha_rpagesize                     : IN    std_logic_vector(0 to 3);    -- **New Command translated Page size.  Provided by PSL to allow
       ha_rcachestate                   : IN    std_logic_vector(0 to 1)   ; -- Response cache state
       ha_rcachepos                     : IN    std_logic_vector(0 to 12)  ; -- Response cache pos
       ha_rcredits                      : IN    std_logic_vector(0 to 8)   ; -- Response credits
    -- ha_reoa                          : IN    std_logic_vector(0 to 185);  -- **New unknown width or use
       -- MMIO interface
       ha_mmval                         : IN    std_logic                  ; -- A valid MMIO is present
       ha_mmcfg                         : IN    std_logic                  ; -- afu descriptor space access
       ha_mmrnw                         : IN    std_logic                  ; -- 1 = read, 0 = write
       ha_mmdw                          : IN    std_logic                  ; -- 1 = doubleword, 0 = word
       ha_mmad                          : IN    std_logic_vector(0 to 23)  ; -- mmio address
       ha_mmadpar                       : IN    std_logic                  ; -- mmio address parity
       ha_mmdata                        : IN    std_logic_vector(0 to 63)  ; -- Write data
       ha_mmdatapar                     : IN    std_logic                  ; -- mmio data parity
       ah_mmack                         : OUT   std_logic                  ; -- Write is complete or Read is valid
       ah_mmdata                        : OUT   std_logic_vector(0 to 63)  ; -- Read data
       ah_mmdatapar                     : OUT   std_logic                  ; -- mmio data parity
       -- Control interface
       ha_jval                          : IN    std_logic                  ; -- Job valid
       ha_jcom                          : IN    std_logic_vector(0 to 7)   ; -- Job command
       ha_jcompar                       : IN    std_logic                  ; -- Job command parity
       ha_jea                           : IN    std_logic_vector(0 to 63)  ; -- Job address
       ha_jeapar                        : IN    std_logic                  ; -- Job address parity
       ah_jrunning                      : OUT   std_logic                  ; -- Job running
       ah_jdone                         : OUT   std_logic                  ; -- Job done
       ah_jcack                         : OUT   std_logic                  ; -- completion of llcmd
       ah_jerror                        : OUT   std_logic_vector(0 to 63)  ; -- Job error
       ah_jyield                        : OUT std_logic                    ; -- Job yield

       -- DMA port 0 Req
       d0h_dvalid                       : OUT   std_logic                  ;
       d0h_req_utag                     : OUT   std_logic_vector(0 to 9)   ;
       d0h_req_itag                     : OUT   std_logic_vector(0 to 8)   ;
       d0h_dtype                        : OUT   std_logic_vector(0 to 2)   ;
       d0h_datomic_op                   : OUT   std_logic_vector(0 to 5)   ;
       d0h_datomic_le                   : OUT   std_logic                  ;
       d0h_dsize                        : OUT   std_logic_vector(0 to 9)   ;
       d0h_ddata                        : OUT   std_logic_vector(0 to 1023);
       -- DMA port 0 Sent
       hd0_sent_utag_valid              : IN    std_logic                  ;
       hd0_sent_utag                    : IN    std_logic_vector(0 to 9)   ;
       hd0_sent_utag_sts                : IN    std_logic_vector(0 to 2)   ;
       -- DMA port 0 Completion interface
       hd0_cpl_valid                    : IN    std_logic                  ;
       hd0_cpl_utag                     : IN    std_logic_vector(0 to 9)   ;
       hd0_cpl_type                     : IN    std_logic_vector(0 to 2)   ;
       hd0_cpl_size                     : IN    std_logic_vector(0 to 9)   ;
       hd0_cpl_laddr                    : IN    std_logic_vector(0 to 6)   ;
       hd0_cpl_byte_count               : IN    std_logic_vector(0 to 9)   ;
       hd0_cpl_data                     : IN    std_logic_vector(0 to 1023);

       -- DMA port 1 Request
       d1h_dvalid                       : OUT   std_logic                  ;
       d1h_req_utag                     : OUT   std_logic_vector(0 to 9)   ;
       d1h_req_itag                     : OUT   std_logic_vector(0 to 8)   ;
       d1h_dtype                        : OUT   std_logic_vector(0 to 2)   ;
       d1h_datomic_op                   : OUT   std_logic_vector(0 to 5)   ;
       d1h_datomic_le                   : OUT   std_logic                  ;
       d1h_dsize                        : OUT   std_logic_vector(0 to 9)   ;
       d1h_ddata                        : OUT   std_logic_vector(0 to 1023);
       -- DMA port 1 Sent
       hd1_sent_utag_valid              : IN    std_logic                  ;
       hd1_sent_utag                    : IN    std_logic_vector(0 to 9)   ;
       hd1_sent_utag_sts                : IN    std_logic_vector(0 to 2)   ;
       -- DMA port 1 Completion
       hd1_cpl_valid                    : IN    std_logic                  ;
       hd1_cpl_utag                     : IN    std_logic_vector(0 to 9)   ;
       hd1_cpl_type                     : IN    std_logic_vector(0 to 2)   ;
       hd1_cpl_size                     : IN    std_logic_vector(0 to 9)   ;
       hd1_cpl_laddr                    : IN    std_logic_vector(0 to 6)   ;
       hd1_cpl_byte_count               : IN    std_logic_vector(0 to 9)   ;
       hd1_cpl_data                     : IN    std_logic_vector(0 to 1023);
#ifdef CONFIG_ENABLE_DDR4
    -- DDR4 SDRAM Interface
-- TODO:    dbg_bus                             : OUT   STD_LOGIC_VECTOR(511 DOWNTO 0);
       c0_sys_clk_p                     : IN    STD_LOGIC;
       c0_sys_clk_n                     : IN    STD_LOGIC;
       c0_ddr4_adr                      : OUT   STD_LOGIC_VECTOR(16 DOWNTO 0);
       c0_ddr4_ba                       : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
       c0_ddr4_cke                      : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
       c0_ddr4_cs_n                     : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
       c0_ddr4_dm_dbi_n                 : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);
       c0_ddr4_dq                       : INOUT STD_LOGIC_VECTOR(71 DOWNTO 0);
       c0_ddr4_dqs_c                    : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);
       c0_ddr4_dqs_t                    : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);
       c0_ddr4_odt                      : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
       c0_ddr4_bg                       : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
       c0_ddr4_reset_n                  : OUT   STD_LOGIC;
       c0_ddr4_act_n                    : OUT   STD_LOGIC;
       c0_ddr4_ck_c                     : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
       c0_ddr4_ck_t                     : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
-- TODO:    c0_ddr4_ten                         : OUT   STD_LOGIC;
#endif
#ifdef CONFIG_ENABLE_NVME
    --
    -- NVME Interface
    --
    -- Reset Input
    nvme_reset_n                        : IN    STD_LOGIC;
    --
    -- Clock inputs for NVMe
    refclk_nvme_ch0_p                   : IN    STD_LOGIC;
    refclk_nvme_ch0_n                   : IN    STD_LOGIC;
    refclk_nvme_ch1_p                   : IN    STD_LOGIC;
    refclk_nvme_ch1_n                   : IN    STD_LOGIC;
    --
    -- NVMe reset control
    nvme_reset_ctl                      : OUT   STD_LOGIC;
    nvme_perst_ctl                      : OUT   STD_LOGIC_VECTOR(SNAP_NVME_PERST_L  DOWNTO SNAP_NVME_PERST_R);  -- keeping NVMe drives in reset by driving 0s
    --
    -- NVME <-> PCIE Interface
    pcie_rc0_rxn                        : IN    STD_LOGIC_VECTOR(3 downto 0);
    pcie_rc0_rxp                        : IN    STD_LOGIC_VECTOR(3 downto 0);
    pcie_rc0_txn                        : OUT   STD_LOGIC_VECTOR(3 downto 0);
    pcie_rc0_txp                        : OUT   STD_LOGIC_VECTOR(3 downto 0);
    pcie_rc1_rxn                        : IN    STD_LOGIC_VECTOR(3 downto 0);
    pcie_rc1_rxp                        : IN    STD_LOGIC_VECTOR(3 downto 0);
    pcie_rc1_txn                        : OUT   STD_LOGIC_VECTOR(3 downto 0);
    pcie_rc1_txp                        : OUT   STD_LOGIC_VECTOR(3 downto 0);
#endif

    -- Parity Enable output and 250MHz Clock input
    ah_tbreq                            : OUT std_logic ;                       -- Timebase command request
    ah_paren                            : OUT   STD_LOGIC;
    ha_pclock                           : IN    STD_LOGIC;
    pci_user_reset                      : IN    std_logic;  --PCI hip user_reset signal if needed
    pci_clock_125MHz                    : IN    std_logic   --125MHz clock if needed
  );
END psl_accel;


ARCHITECTURE psl_accel OF psl_accel IS
  --
  -- SNAP CORE
  --
  COMPONENT snap_core
    PORT (
      ah_cvalid               : OUT STD_LOGIC;
      ah_ctag                 : OUT STD_LOGIC_VECTOR(0 TO 7);
      ah_com                  : OUT STD_LOGIC_VECTOR(0 TO 12);
      ah_cabt                 : OUT STD_LOGIC_VECTOR(0 TO 2);
      ah_cea                  : OUT STD_LOGIC_VECTOR(0 TO 63);
      ah_cch                  : OUT STD_LOGIC_VECTOR(0 TO 15);
      ah_csize                : OUT STD_LOGIC_VECTOR(0 TO 11);
      ha_croom                : IN  STD_LOGIC_VECTOR(0 TO 7);
      ah_ctagpar              : OUT STD_LOGIC;
      ah_compar               : OUT STD_LOGIC;
      ah_ceapar               : OUT STD_LOGIC;
      ha_brvalid              : IN  STD_LOGIC;
      ha_brtag                : IN  STD_LOGIC_VECTOR(0 TO 7);
      ha_brad                 : IN  STD_LOGIC_VECTOR(0 TO 5);
      ah_brlat                : OUT STD_LOGIC_VECTOR(0 TO 3);
      ah_brdata               : OUT STD_LOGIC_VECTOR(0 TO 1023);
      ah_brpar                : OUT STD_LOGIC_VECTOR(0 TO 15);
      ha_bwvalid              : IN  STD_LOGIC;
      ha_bwtag                : IN  STD_LOGIC_VECTOR(0 TO 7);
      ha_bwad                 : IN  STD_LOGIC_VECTOR(0 TO 5);
      ha_bwdata               : IN  STD_LOGIC_VECTOR(0 TO 1023);
      ha_bwpar                : IN  STD_LOGIC_VECTOR(0 TO 15);
      ha_brtagpar             : IN  STD_LOGIC;
      ha_bwtagpar             : IN  STD_LOGIC;
      ha_rvalid               : IN  STD_LOGIC;
      ha_rtag                 : IN  STD_LOGIC_VECTOR(0 TO 7);
      ha_rditag               : IN  STD_LOGIC_VECTOR(0 TO 8);
      ha_rditagpar            : IN  STD_LOGIC;
      ha_response             : IN  STD_LOGIC_VECTOR(0 TO 7);
      ha_response_ext         : IN  STD_LOGIC_VECTOR(0 TO 7);
      ha_rpagesize            : IN  STD_LOGIC_VECTOR(0 TO 3);
      ha_rcredits             : IN  STD_LOGIC_VECTOR(0 TO 8);
      ha_rcachestate          : IN  STD_LOGIC_VECTOR(0 TO 1);
      ha_rcachepos            : IN  STD_LOGIC_VECTOR(0 TO 12);
      ha_rtagpar              : IN  STD_LOGIC;
      ha_mmval                : IN  STD_LOGIC;
      ha_mmrnw                : IN  STD_LOGIC;
      ha_mmdw                 : IN  STD_LOGIC;
      ha_mmad                 : IN  STD_LOGIC_VECTOR(0 TO 23);
      ha_mmdata               : IN  STD_LOGIC_VECTOR(0 TO 63);
      ha_mmcfg                : IN  STD_LOGIC;
      ah_mmack                : OUT STD_LOGIC;
      ah_mmdata               : OUT STD_LOGIC_VECTOR(0 TO 63);
      ha_mmadpar              : IN  STD_LOGIC;
      ha_mmdatapar            : IN  STD_LOGIC;
      ah_mmdatapar            : OUT STD_LOGIC;
      ha_jval                 : IN  STD_LOGIC;
      ha_jcom                 : IN  STD_LOGIC_VECTOR(0 TO 7);
      ha_jea                  : IN  STD_LOGIC_VECTOR(0 TO 63);
      ah_jrunning             : OUT STD_LOGIC;
      ah_jdone                : OUT STD_LOGIC;
      ah_jcack                : OUT STD_LOGIC;
      ah_jerror               : OUT STD_LOGIC_VECTOR(0 TO 63);
      ah_tbreq                : OUT STD_LOGIC;
      ah_jyield               : OUT STD_LOGIC;
      ha_jeapar               : IN  STD_LOGIC;
      ha_jcompar              : IN  STD_LOGIC;
      ah_paren                : OUT STD_LOGIC;
      ha_pclock               : IN  STD_LOGIC;
      d0h_dvalid              : OUT std_logic                  ;
      d0h_req_utag            : OUT std_logic_vector(0 to 9)   ;
      d0h_req_itag            : OUT std_logic_vector(0 to 8)   ;
      d0h_dtype               : OUT std_logic_vector(0 to 2)   ;
      d0h_datomic_op          : OUT std_logic_vector(0 to 5)   ;
      d0h_datomic_le          : OUT std_logic                  ;
      d0h_dsize               : OUT std_logic_vector(0 to 9)   ;
      d0h_ddata               : OUT std_logic_vector(0 to 1023);
      hd0_sent_utag_valid     : IN  std_logic                  ;
      hd0_sent_utag           : IN  std_logic_vector(0 to 9)   ;
      hd0_sent_utag_sts       : IN  std_logic_vector(0 to 2)   ;
      hd0_cpl_valid           : IN  std_logic                  ;
      hd0_cpl_utag            : IN  std_logic_vector(0 to 9)   ;
      hd0_cpl_type            : IN  std_logic_vector(0 to 2)   ;
      hd0_cpl_size            : IN  std_logic_vector(0 to 9)   ;
      hd0_cpl_laddr           : IN  std_logic_vector(0 to 6)   ;
      hd0_cpl_byte_count      : IN  std_logic_vector(0 to 9)   ;
      hd0_cpl_data            : IN  std_logic_vector(0 to 1023);
      --
      -- ACTION Interface
      --
      -- misc
      action_reset            : OUT STD_LOGIC;
#ifdef CONFIG_ENABLE_NVME
      nvme_reset_ctl          : OUT STD_LOGIC;
      nvme_perst_ctl          : OUT STD_LOGIC_VECTOR(SNAP_NVME_PERST_L  DOWNTO SNAP_NVME_PERST_R);  -- keeping NVMe drives in reset by driving 0s
#endif
      --
      -- Kernel AXI Master Interface
      xk_d_o                  : OUT XK_D_T;
      kx_d_i                  : IN  KX_D_T;
#ifdef CONFIG_ENABLE_NVME
      --
      -- AXI Master to NVMe Interface
      xn_d_o                  : OUT XN_D_T;
      nx_d_i                  : IN  NX_D_T;
#endif
      --
      -- Kernel AXI Slave Interface
      sk_d_o                  : OUT SK_D_T;
      ks_d_i                  : IN  KS_D_T
    );
  END COMPONENT;

  --
  -- ACTION WRAPPER
  --
  COMPONENT action_wrapper
    PORT (
      ap_clk                  : IN  STD_LOGIC;
      ap_rst_n                : IN  STD_LOGIC;
      interrupt_ack           : IN  STD_LOGIC;
      interrupt               : OUT STD_LOGIC;
      interrupt_src           : OUT STD_LOGIC_VECTOR(INT_BITS-2 DOWNTO 0);
      interrupt_ctx           : OUT STD_LOGIC_VECTOR(CONTEXT_BITS-1 DOWNTO 0);

#ifdef CONFIG_ENABLE_DDRI
      --
      -- AXI SDRAM Interface
      m_axi_card_mem0_araddr  : OUT STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_arburst : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_card_mem0_arcache : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_card_mem0_arid    : OUT STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_arlen   : OUT STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
      m_axi_card_mem0_arlock  : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_card_mem0_arprot  : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_card_mem0_arqos   : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_card_mem0_arready : IN  STD_LOGIC;
      m_axi_card_mem0_arregion: OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_card_mem0_arsize  : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_card_mem0_aruser  : OUT STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ARUSER_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_arvalid : OUT STD_LOGIC;
      m_axi_card_mem0_awaddr  : OUT STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_awburst : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_card_mem0_awcache : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_card_mem0_awid    : OUT STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_awlen   : OUT STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
      m_axi_card_mem0_awlock  : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_card_mem0_awprot  : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_card_mem0_awqos   : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_card_mem0_awready : IN  STD_LOGIC;
      m_axi_card_mem0_awregion: OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_card_mem0_awsize  : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_card_mem0_awuser  : OUT STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_AWUSER_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_awvalid : OUT STD_LOGIC;
      m_axi_card_mem0_bid     : IN  STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_bready  : OUT STD_LOGIC;
      m_axi_card_mem0_bresp   : IN  STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_card_mem0_buser   : IN  STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_BUSER_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_bvalid  : IN  STD_LOGIC;
      m_axi_card_mem0_rdata   : IN  STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_rid     : IN  STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_rlast   : IN  STD_LOGIC;
      m_axi_card_mem0_rready  : OUT STD_LOGIC;
      m_axi_card_mem0_rresp   : IN  STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_card_mem0_ruser   : IN  STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_RUSER_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_rvalid  : IN  STD_LOGIC;
      m_axi_card_mem0_wdata   : OUT STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_wlast   : OUT STD_LOGIC;
      m_axi_card_mem0_wready  : IN  STD_LOGIC;
      m_axi_card_mem0_wstrb   : OUT STD_LOGIC_VECTOR ( (C_AXI_CARD_MEM0_DATA_WIDTH/8)-1 DOWNTO 0 );
      m_axi_card_mem0_wuser   : OUT STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_WUSER_WIDTH-1 DOWNTO 0 );
      m_axi_card_mem0_wvalid  : OUT STD_LOGIC;
#endif
#ifdef CONFIG_ENABLE_NVME
      --
      -- AXI NVME Interface
      m_axi_nvme_araddr       : OUT STD_LOGIC_VECTOR ( C_AXI_NVME_ADDR_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_arburst      : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_nvme_arcache      : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_nvme_arid         : OUT STD_LOGIC_VECTOR ( C_AXI_NVME_ID_WIDTH-1  DOWNTO 0 );
      m_axi_nvme_arlen        : OUT STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
      m_axi_nvme_arlock       : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_nvme_arprot       : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_nvme_arqos        : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_nvme_arready      : IN  STD_LOGIC;
      m_axi_nvme_arregion     : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_nvme_arsize       : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_nvme_aruser       : OUT STD_LOGIC_VECTOR ( C_AXI_NVME_ARUSER_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_arvalid      : OUT STD_LOGIC;
      m_axi_nvme_awaddr       : OUT STD_LOGIC_VECTOR ( C_AXI_NVME_ADDR_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_awburst      : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_nvme_awcache      : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_nvme_awid         : OUT STD_LOGIC_VECTOR ( C_AXI_NVME_ID_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_awlen        : OUT STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
      m_axi_nvme_awlock       : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_nvme_awprot       : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_nvme_awqos        : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_nvme_awready      : IN  STD_LOGIC;
      m_axi_nvme_awregion     : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_nvme_awsize       : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_nvme_awuser       : OUT STD_LOGIC_VECTOR ( C_AXI_NVME_AWUSER_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_awvalid      : OUT STD_LOGIC;
      m_axi_nvme_bid          : IN  STD_LOGIC_VECTOR ( C_AXI_NVME_ID_WIDTH-1 downto 0 );
      m_axi_nvme_bready       : OUT STD_LOGIC;
      m_axi_nvme_bresp        : IN  STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_nvme_buser        : IN  STD_LOGIC_VECTOR ( C_AXI_NVME_BUSER_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_bvalid       : IN  STD_LOGIC;
      m_axi_nvme_rdata        : IN  STD_LOGIC_VECTOR ( C_AXI_NVME_DATA_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_rid          : IN  STD_LOGIC_VECTOR ( C_AXI_NVME_ID_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_rlast        : IN  STD_LOGIC;
      m_axi_nvme_rready       : OUT STD_LOGIC;
      m_axi_nvme_rresp        : IN  STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_nvme_ruser        : IN  STD_LOGIC_VECTOR ( C_AXI_NVME_RUSER_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_rvalid       : IN  STD_LOGIC;
      m_axi_nvme_wdata        : OUT STD_LOGIC_VECTOR ( C_AXI_NVME_DATA_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_wlast        : OUT STD_LOGIC;
      m_axi_nvme_wready       : IN  STD_LOGIC;
      m_axi_nvme_wstrb        : OUT STD_LOGIC_VECTOR ( (C_AXI_NVME_DATA_WIDTH/8)-1 DOWNTO 0 );
      m_axi_nvme_wuser        : OUT STD_LOGIC_VECTOR ( C_AXI_NVME_WUSER_WIDTH-1 DOWNTO 0 );
      m_axi_nvme_wvalid       : OUT STD_LOGIC;
#endif
      --
      -- AXI Control Register Interface
      s_axi_ctrl_reg_araddr   : IN  STD_LOGIC_VECTOR ( C_AXI_CTRL_REG_ADDR_WIDTH-1 DOWNTO 0 );
      s_axi_ctrl_reg_arready  : OUT STD_LOGIC;
      s_axi_ctrl_reg_arvalid  : IN  STD_LOGIC;
      s_axi_ctrl_reg_awaddr   : IN  STD_LOGIC_VECTOR ( C_AXI_CTRL_REG_ADDR_WIDTH-1 DOWNTO 0 );
      s_axi_ctrl_reg_awready  : OUT STD_LOGIC;
      s_axi_ctrl_reg_awvalid  : IN  STD_LOGIC;
      s_axi_ctrl_reg_bready   : IN  STD_LOGIC;
      s_axi_ctrl_reg_bresp    : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      s_axi_ctrl_reg_bvalid   : OUT STD_LOGIC;
      s_axi_ctrl_reg_rdata    : OUT STD_LOGIC_VECTOR ( C_AXI_CTRL_REG_DATA_WIDTH-1 DOWNTO 0 );
      s_axi_ctrl_reg_rready   : IN  STD_LOGIC;
      s_axi_ctrl_reg_rresp    : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      s_axi_ctrl_reg_rvalid   : OUT STD_LOGIC;
      s_axi_ctrl_reg_wdata    : IN  STD_LOGIC_VECTOR ( C_AXI_CTRL_REG_DATA_WIDTH-1 DOWNTO 0 );
      s_axi_ctrl_reg_wready   : OUT STD_LOGIC;
      s_axi_ctrl_reg_wstrb    : IN  STD_LOGIC_VECTOR ( (C_AXI_CTRL_REG_DATA_WIDTH/8)-1 DOWNTO 0 );
      s_axi_ctrl_reg_wvalid   : IN  STD_LOGIC;
      --
      -- AXI Host Memory Interface
      m_axi_host_mem_araddr   : OUT STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_ADDR_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_arburst  : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_host_mem_arcache  : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_host_mem_arid     : OUT STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_ID_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_arlen    : OUT STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
      m_axi_host_mem_arlock   : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_host_mem_arprot   : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_host_mem_arqos    : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_host_mem_arready  : IN  STD_LOGIC;
      m_axi_host_mem_arregion : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_host_mem_arsize   : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_host_mem_aruser   : OUT STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_ARUSER_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_arvalid  : OUT STD_LOGIC;
      m_axi_host_mem_awaddr   : OUT STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_ADDR_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_awburst  : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_host_mem_awcache  : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_host_mem_awid     : OUT STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_ID_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_awlen    : OUT STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
      m_axi_host_mem_awlock   : OUT STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_host_mem_awprot   : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_host_mem_awqos    : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_host_mem_awready  : IN  STD_LOGIC;
      m_axi_host_mem_awregion : OUT STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
      m_axi_host_mem_awsize   : OUT STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
      m_axi_host_mem_awuser   : OUT STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_AWUSER_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_awvalid  : OUT STD_LOGIC;
      m_axi_host_mem_bid      : IN  STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_ID_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_bready   : OUT STD_LOGIC;
      m_axi_host_mem_bresp    : IN  STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_host_mem_buser    : IN  STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_BUSER_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_bvalid   : IN  STD_LOGIC;
      m_axi_host_mem_rdata    : IN  STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_DATA_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_rid      : IN  STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_ID_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_rlast    : IN  STD_LOGIC;
      m_axi_host_mem_rready   : OUT STD_LOGIC;
      m_axi_host_mem_rresp    : IN  STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
      m_axi_host_mem_ruser    : IN  STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_RUSER_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_rvalid   : IN  STD_LOGIC;
      m_axi_host_mem_wdata    : OUT STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_DATA_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_wlast    : OUT STD_LOGIC;
      m_axi_host_mem_wready   : IN  STD_LOGIC;
      m_axi_host_mem_wstrb    : OUT STD_LOGIC_VECTOR ( (C_AXI_HOST_MEM_DATA_WIDTH/8)-1 DOWNTO 0 );
      m_axi_host_mem_wuser    : OUT STD_LOGIC_VECTOR ( C_AXI_HOST_MEM_WUSER_WIDTH-1 DOWNTO 0 );
      m_axi_host_mem_wvalid   : OUT STD_LOGIC
    );
  END COMPONENT;

#if defined(CONFIG_ENABLE_DDRI) && !defined(CONFIG_ENABLE_NVME)
  --
  -- AXI Clock converter
  --
  COMPONENT axi_clock_converter
    PORT (
      s_axi_aclk      : IN  STD_LOGIC;
      s_axi_aresetn   : IN  STD_LOGIC;
      s_axi_awid      : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      s_axi_awaddr    : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0);
      s_axi_awlen     : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      s_axi_awsize    : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      s_axi_awburst   : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_awlock    : IN  STD_LOGIC_VECTOR(0 DOWNTO 0);
      s_axi_awcache   : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_axi_awprot    : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      s_axi_awregion  : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_axi_awqos     : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_axi_awvalid   : IN  STD_LOGIC;
      s_axi_awready   : OUT STD_LOGIC;
      s_axi_wdata     : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0);
      s_axi_wstrb     : IN  STD_LOGIC_VECTOR((C_AXI_CARD_MEM0_DATA_WIDTH/8)-1 DOWNTO 0);
      s_axi_wlast     : IN  STD_LOGIC;
      s_axi_wvalid    : IN  STD_LOGIC;
      s_axi_wready    : OUT STD_LOGIC;
      s_axi_bid       : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      s_axi_bresp     : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_bvalid    : OUT STD_LOGIC;
      s_axi_bready    : IN  STD_LOGIC;
      s_axi_arid      : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      s_axi_araddr    : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0);
      s_axi_arlen     : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      s_axi_arsize    : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      s_axi_arburst   : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_arlock    : IN  STD_LOGIC_VECTOR(0 DOWNTO 0);
      s_axi_arcache   : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_axi_arprot    : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      s_axi_arregion  : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_axi_arqos     : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_axi_arvalid   : IN  STD_LOGIC;
      s_axi_arready   : OUT STD_LOGIC;
      s_axi_rid       : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      s_axi_rdata     : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0);
      s_axi_rresp     : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_rlast     : OUT STD_LOGIC;
      s_axi_rvalid    : OUT STD_LOGIC;
      s_axi_rready    : IN  STD_LOGIC;
      m_axi_aclk      : IN  STD_LOGIC;
      m_axi_aresetn   : IN  STD_LOGIC;
      m_axi_awid      : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      m_axi_awaddr    : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0);
      m_axi_awlen     : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      m_axi_awsize    : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      m_axi_awburst   : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      m_axi_awlock    : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      m_axi_awcache   : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      m_axi_awprot    : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      m_axi_awregion  : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      m_axi_awqos     : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      m_axi_awvalid   : OUT STD_LOGIC;
      m_axi_awready   : IN  STD_LOGIC;
      m_axi_wdata     : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0);
      m_axi_wstrb     : OUT STD_LOGIC_VECTOR((C_AXI_CARD_MEM0_DATA_WIDTH/8)-1 DOWNTO 0);
      m_axi_wlast     : OUT STD_LOGIC;
      m_axi_wvalid    : OUT STD_LOGIC;
      m_axi_wready    : IN  STD_LOGIC;
      m_axi_bid       : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      m_axi_bresp     : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      m_axi_bvalid    : IN  STD_LOGIC;
      m_axi_bready    : OUT STD_LOGIC;
      m_axi_arid      : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      m_axi_araddr    : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0);
      m_axi_arlen     : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      m_axi_arsize    : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      m_axi_arburst   : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      m_axi_arlock    : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      m_axi_arcache   : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      m_axi_arprot    : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      m_axi_arregion  : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      m_axi_arqos     : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      m_axi_arvalid   : OUT STD_LOGIC;
      m_axi_arready   : IN  STD_LOGIC;
      m_axi_rid       : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      m_axi_rdata     : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0);
      m_axi_rresp     : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      m_axi_rlast     : IN  STD_LOGIC;
      m_axi_rvalid    : IN  STD_LOGIC;
      m_axi_rready    : OUT STD_LOGIC
    );
  END COMPONENT;
#endif

#ifdef CONFIG_ENABLE_NVME
  --
  -- AXI Interconnect
  --
  COMPONENT axi_interconnect
    PORT (
      INTERCONNECT_ACLK       : IN  STD_LOGIC;
      INTERCONNECT_ARESETN    : IN  STD_LOGIC;
      S00_AXI_ARESET_OUT_N    : OUT STD_LOGIC;
      S00_AXI_ACLK            : IN  STD_LOGIC;
      S00_AXI_AWID            : IN  STD_LOGIC;
      S00_AXI_AWADDR          : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
      S00_AXI_AWLEN           : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      S00_AXI_AWSIZE          : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      S00_AXI_AWBURST         : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      S00_AXI_AWLOCK          : IN  STD_LOGIC;
      S00_AXI_AWCACHE         : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      S00_AXI_AWPROT          : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      S00_AXI_AWQOS           : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      S00_AXI_AWVALID         : IN  STD_LOGIC;
      S00_AXI_AWREADY         : OUT STD_LOGIC;
      S00_AXI_WDATA           : IN  STD_LOGIC_VECTOR(511 DOWNTO 0);
      S00_AXI_WSTRB           : IN  STD_LOGIC_VECTOR(63 DOWNTO 0);
      S00_AXI_WLAST           : IN  STD_LOGIC;
      S00_AXI_WVALID          : IN  STD_LOGIC;
      S00_AXI_WREADY          : OUT STD_LOGIC;
      S00_AXI_BID             : OUT STD_LOGIC;
      S00_AXI_BRESP           : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S00_AXI_BVALID          : OUT STD_LOGIC;
      S00_AXI_BREADY          : IN  STD_LOGIC;
      S00_AXI_ARID            : IN  STD_LOGIC;
      S00_AXI_ARADDR          : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
      S00_AXI_ARLEN           : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      S00_AXI_ARSIZE          : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      S00_AXI_ARBURST         : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      S00_AXI_ARLOCK          : IN  STD_LOGIC;
      S00_AXI_ARCACHE         : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      S00_AXI_ARPROT          : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      S00_AXI_ARQOS           : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      S00_AXI_ARVALID         : IN  STD_LOGIC;
      S00_AXI_ARREADY         : OUT STD_LOGIC;
      S00_AXI_RID             : OUT STD_LOGIC;
      S00_AXI_RDATA           : OUT STD_LOGIC_VECTOR(511 DOWNTO 0);
      S00_AXI_RRESP           : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S00_AXI_RLAST           : OUT STD_LOGIC;
      S00_AXI_RVALID          : OUT STD_LOGIC;
      S00_AXI_RREADY          : IN  STD_LOGIC;
      S01_AXI_ARESET_OUT_N    : OUT STD_LOGIC;
      S01_AXI_ACLK            : IN  STD_LOGIC;
      S01_AXI_AWID            : IN  STD_LOGIC;
      S01_AXI_AWADDR          : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
      S01_AXI_AWLEN           : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      S01_AXI_AWSIZE          : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      S01_AXI_AWBURST         : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      S01_AXI_AWLOCK          : IN  STD_LOGIC;
      S01_AXI_AWCACHE         : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      S01_AXI_AWPROT          : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      S01_AXI_AWQOS           : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      S01_AXI_AWVALID         : IN  STD_LOGIC;
      S01_AXI_AWREADY         : OUT STD_LOGIC;
      S01_AXI_WDATA           : IN  STD_LOGIC_VECTOR(127 DOWNTO 0);
      S01_AXI_WSTRB           : IN  STD_LOGIC_VECTOR(15 DOWNTO 0);
      S01_AXI_WLAST           : IN  STD_LOGIC;
      S01_AXI_WVALID          : IN  STD_LOGIC;
      S01_AXI_WREADY          : OUT STD_LOGIC;
      S01_AXI_BID             : OUT STD_LOGIC;
      S01_AXI_BRESP           : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S01_AXI_BVALID          : OUT STD_LOGIC;
      S01_AXI_BREADY          : IN  STD_LOGIC;
      S01_AXI_ARID            : IN  STD_LOGIC;
      S01_AXI_ARADDR          : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
      S01_AXI_ARLEN           : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      S01_AXI_ARSIZE          : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      S01_AXI_ARBURST         : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      S01_AXI_ARLOCK          : IN  STD_LOGIC;
      S01_AXI_ARCACHE         : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      S01_AXI_ARPROT          : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      S01_AXI_ARQOS           : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
      S01_AXI_ARVALID         : IN  STD_LOGIC;
      S01_AXI_ARREADY         : OUT STD_LOGIC;
      S01_AXI_RID             : OUT STD_LOGIC;
      S01_AXI_RDATA           : OUT STD_LOGIC_VECTOR(127 DOWNTO 0);
      S01_AXI_RRESP           : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S01_AXI_RLAST           : OUT STD_LOGIC;
      S01_AXI_RVALID          : OUT STD_LOGIC;
      S01_AXI_RREADY          : IN  STD_LOGIC;
      M00_AXI_ARESET_OUT_N    : OUT STD_LOGIC;
      M00_AXI_ACLK            : IN  STD_LOGIC;
      M00_AXI_AWID            : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH   DOWNTO 0);
      M00_AXI_AWADDR          : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M00_AXI_AWLEN           : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M00_AXI_AWSIZE          : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M00_AXI_AWBURST         : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M00_AXI_AWLOCK          : OUT STD_LOGIC;
      M00_AXI_AWCACHE         : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M00_AXI_AWPROT          : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M00_AXI_AWQOS           : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M00_AXI_AWVALID         : OUT STD_LOGIC;
      M00_AXI_AWREADY         : IN  STD_LOGIC;
      M00_AXI_WDATA           : OUT STD_LOGIC_VECTOR(511 DOWNTO 0);
      M00_AXI_WSTRB           : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      M00_AXI_WLAST           : OUT STD_LOGIC;
      M00_AXI_WVALID          : OUT STD_LOGIC;
      M00_AXI_WREADY          : IN  STD_LOGIC;
      M00_AXI_BID             : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH DOWNTO 0);
      M00_AXI_BRESP           : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      M00_AXI_BVALID          : IN  STD_LOGIC;
      M00_AXI_BREADY          : OUT STD_LOGIC;
      M00_AXI_ARID            : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH DOWNTO 0);
      M00_AXI_ARADDR          : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M00_AXI_ARLEN           : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M00_AXI_ARSIZE          : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M00_AXI_ARBURST         : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M00_AXI_ARLOCK          : OUT STD_LOGIC;
      M00_AXI_ARCACHE         : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M00_AXI_ARPROT          : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M00_AXI_ARQOS           : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M00_AXI_ARVALID         : OUT STD_LOGIC;
      M00_AXI_ARREADY         : IN  STD_LOGIC;
      M00_AXI_RID             : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH DOWNTO 0);
      M00_AXI_RDATA           : IN  STD_LOGIC_VECTOR(511 DOWNTO 0);
      M00_AXI_RRESP           : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      M00_AXI_RLAST           : IN  STD_LOGIC;
      M00_AXI_RVALID          : IN  STD_LOGIC;
      M00_AXI_RREADY          : OUT STD_LOGIC
    );
  END COMPONENT;
#endif

#ifdef CONFIG_ENABLE_BRAM
  --
  -- BLOCK RAM
  --
  COMPONENT block_RAM
    PORT (
      s_aclk              : IN  STD_LOGIC;
      s_aresetn           : IN  STD_LOGIC;
      s_axi_awid          : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      s_axi_awaddr        : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_axi_awlen         : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      s_axi_awsize        : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      s_axi_awburst       : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_awvalid       : IN  STD_LOGIC;
      s_axi_awready       : OUT STD_LOGIC;
      s_axi_wdata         : IN  STD_LOGIC_VECTOR(255 DOWNTO 0);
      s_axi_wstrb         : IN  STD_LOGIC_VECTOR((C_AXI_HOST_MEM_DATA_WIDTH/16)-1 DOWNTO 0);
      s_axi_wlast         : IN  STD_LOGIC;
      s_axi_wvalid        : IN  STD_LOGIC;
      s_axi_wready        : OUT STD_LOGIC;
      s_axi_bid           : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      s_axi_bresp         : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_bvalid        : OUT STD_LOGIC;
      s_axi_bready        : IN  STD_LOGIC;
      s_axi_arid          : IN  STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      s_axi_araddr        : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_axi_arlen         : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      s_axi_arsize        : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
      s_axi_arburst       : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_arvalid       : IN  STD_LOGIC;
      s_axi_arready       : OUT STD_LOGIC;
      s_axi_rid           : OUT STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      s_axi_rdata         : OUT STD_LOGIC_VECTOR(255 DOWNTO 0);
      s_axi_rresp         : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_rlast         : OUT STD_LOGIC;
      s_axi_rvalid        : OUT STD_LOGIC;
      s_axi_rready        : IN  STD_LOGIC
    );
  END COMPONENT;
#endif

#ifdef CONFIG_ENABLE_DDR4
  --
  -- DDR4 SDRAM
  --
  COMPONENT ddr4sdram
    PORT (
      c0_init_calib_complete            : OUT   STD_LOGIC;
      dbg_clk                           : OUT   STD_LOGIC;
      c0_sys_clk_p                      : IN    STD_LOGIC;
      c0_sys_clk_n                      : IN    STD_LOGIC;
      dbg_bus                           : OUT   STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0);
      c0_ddr4_adr                       : OUT   STD_LOGIC_VECTOR(16 DOWNTO 0);
      c0_ddr4_ba                        : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
      c0_ddr4_cke                       : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
      c0_ddr4_cs_n                      : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
      c0_ddr4_dm_dbi_n                  : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);
      c0_ddr4_dq                        : INOUT STD_LOGIC_VECTOR(71 DOWNTO 0);
      c0_ddr4_dqs_c                     : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);
      c0_ddr4_dqs_t                     : INOUT STD_LOGIC_VECTOR(8 DOWNTO 0);
      c0_ddr4_odt                       : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
      c0_ddr4_bg                        : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
      c0_ddr4_reset_n                   : OUT   STD_LOGIC;
      c0_ddr4_act_n                     : OUT   STD_LOGIC;
      c0_ddr4_ck_c                      : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
      c0_ddr4_ck_t                      : OUT   STD_LOGIC_VECTOR(0 DOWNTO 0);
      c0_ddr4_ui_clk                    : OUT   STD_LOGIC;
      c0_ddr4_ui_clk_sync_rst           : OUT   STD_LOGIC;
      c0_ddr4_aresetn                   : IN    STD_LOGIC;
      c0_ddr4_s_axi_ctrl_awvalid        : IN    STD_LOGIC;
      c0_ddr4_s_axi_ctrl_awready        : OUT   STD_LOGIC;
      c0_ddr4_s_axi_ctrl_awaddr         : IN    STD_LOGIC_VECTOR(C_AXI_CTRL_REG_ADDR_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_ctrl_wvalid         : IN    STD_LOGIC;
      c0_ddr4_s_axi_ctrl_wready         : OUT   STD_LOGIC;
      c0_ddr4_s_axi_ctrl_wdata          : IN    STD_LOGIC_VECTOR(C_AXI_CTRL_REG_DATA_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_ctrl_bvalid         : OUT   STD_LOGIC;
      c0_ddr4_s_axi_ctrl_bready         : IN    STD_LOGIC;
      c0_ddr4_s_axi_ctrl_bresp          : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
      c0_ddr4_s_axi_ctrl_arvalid        : IN    STD_LOGIC;
      c0_ddr4_s_axi_ctrl_arready        : OUT   STD_LOGIC;
      c0_ddr4_s_axi_ctrl_araddr         : IN    STD_LOGIC_VECTOR(C_AXI_CTRL_REG_ADDR_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_ctrl_rvalid         : OUT   STD_LOGIC;
      c0_ddr4_s_axi_ctrl_rready         : IN    STD_LOGIC;
      c0_ddr4_s_axi_ctrl_rdata          : OUT   STD_LOGIC_VECTOR(C_AXI_CTRL_REG_DATA_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_ctrl_rresp          : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
      c0_ddr4_interrupt                 : OUT   STD_LOGIC;
      c0_ddr4_s_axi_awid                : IN    STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_awaddr              : IN    STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_awlen               : IN    STD_LOGIC_VECTOR(7 DOWNTO 0);
      c0_ddr4_s_axi_awsize              : IN    STD_LOGIC_VECTOR(2 DOWNTO 0);
      c0_ddr4_s_axi_awburst             : IN    STD_LOGIC_VECTOR(1 DOWNTO 0);
      c0_ddr4_s_axi_awlock              : IN    STD_LOGIC_VECTOR(0 DOWNTO 0);
      c0_ddr4_s_axi_awcache             : IN    STD_LOGIC_VECTOR(3 DOWNTO 0);
      c0_ddr4_s_axi_awprot              : IN    STD_LOGIC_VECTOR(2 DOWNTO 0);
      c0_ddr4_s_axi_awqos               : IN    STD_LOGIC_VECTOR(3 DOWNTO 0);
      c0_ddr4_s_axi_awvalid             : IN    STD_LOGIC;
      c0_ddr4_s_axi_awready             : OUT   STD_LOGIC;
      c0_ddr4_s_axi_wdata               : IN    STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_wstrb               : IN    STD_LOGIC_VECTOR((C_AXI_CARD_MEM0_DATA_WIDTH/8)-1 DOWNTO 0);
      c0_ddr4_s_axi_wlast               : IN    STD_LOGIC;
      c0_ddr4_s_axi_wvalid              : IN    STD_LOGIC;
      c0_ddr4_s_axi_wready              : OUT   STD_LOGIC;
      c0_ddr4_s_axi_bready              : IN    STD_LOGIC;
      c0_ddr4_s_axi_bid                 : OUT   STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_bresp               : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
      c0_ddr4_s_axi_bvalid              : OUT   STD_LOGIC;
      c0_ddr4_s_axi_arid                : IN    STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_araddr              : IN    STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_arlen               : IN    STD_LOGIC_VECTOR(7 DOWNTO 0);
      c0_ddr4_s_axi_arsize              : IN    STD_LOGIC_VECTOR(2 DOWNTO 0);
      c0_ddr4_s_axi_arburst             : IN    STD_LOGIC_VECTOR(1 DOWNTO 0);
      c0_ddr4_s_axi_arlock              : IN    STD_LOGIC_VECTOR(0 DOWNTO 0);
      c0_ddr4_s_axi_arcache             : IN    STD_LOGIC_VECTOR(3 DOWNTO 0);
      c0_ddr4_s_axi_arprot              : IN    STD_LOGIC_VECTOR(2 DOWNTO 0);
      c0_ddr4_s_axi_arqos               : IN    STD_LOGIC_VECTOR(3 DOWNTO 0);
      c0_ddr4_s_axi_arvalid             : IN    STD_LOGIC;
      c0_ddr4_s_axi_arready             : OUT   STD_LOGIC;
      c0_ddr4_s_axi_rready              : IN    STD_LOGIC;
      c0_ddr4_s_axi_rlast               : OUT   STD_LOGIC;
      c0_ddr4_s_axi_rvalid              : OUT   STD_LOGIC;
      c0_ddr4_s_axi_rresp               : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
      c0_ddr4_s_axi_rid                 : OUT   STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0);
      c0_ddr4_s_axi_rdata               : OUT   STD_LOGIC_VECTOR(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0);
      sys_rst                           : IN    STD_LOGIC
    );
  END COMPONENT;
#endif

#ifdef CONFIG_ENABLE_NVME
  --
  -- NVME
  --
  COMPONENT nvme_top is
  PORT (
    --
    -- NVME <-> DDR4 Interface
    ddr_aresetn                         : OUT STD_LOGIC;
    ddr_aclk                            : OUT STD_LOGIC;
    DDR_M_AXI_araddr                    : OUT STD_LOGIC_VECTOR ( 33 downto 0 );
    DDR_M_AXI_arburst                   : OUT STD_LOGIC_VECTOR ( 1 downto 0 );
    DDR_M_AXI_arcache                   : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_arid                      : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_arlen                     : OUT STD_LOGIC_VECTOR ( 7 downto 0 );
    DDR_M_AXI_arlock                    : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_arprot                    : OUT STD_LOGIC_VECTOR ( 2 downto 0 );
    DDR_M_AXI_arqos                     : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_arready                   : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_arregion                  : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_arsize                    : OUT STD_LOGIC_VECTOR ( 2 downto 0 );
    DDR_M_AXI_arvalid                   : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_awaddr                    : OUT STD_LOGIC_VECTOR ( 33 downto 0 );
    DDR_M_AXI_awburst                   : OUT STD_LOGIC_VECTOR ( 1 downto 0 );
    DDR_M_AXI_awcache                   : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_awid                      : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_awlen                     : OUT STD_LOGIC_VECTOR ( 7 downto 0 );
    DDR_M_AXI_awlock                    : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_awprot                    : OUT STD_LOGIC_VECTOR ( 2 downto 0 );
    DDR_M_AXI_awqos                     : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_awready                   : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_awregion                  : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_awsize                    : OUT STD_LOGIC_VECTOR ( 2 downto 0 );
    DDR_M_AXI_awvalid                   : OUT STD_LOGIC_vector (0 to 0);
    DDR_M_AXI_bid                       : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_bready                    : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_bresp                     : IN  STD_LOGIC_VECTOR ( 1 downto 0 );
    DDR_M_AXI_bvalid                    : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_rdata                     : IN  STD_LOGIC_VECTOR ( 127 downto 0 );
    DDR_M_AXI_rid                       : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    DDR_M_AXI_rlast                     : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_rready                    : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_rresp                     : IN  STD_LOGIC_VECTOR ( 1 downto 0 );
    DDR_M_AXI_ruser                     : IN  STD_LOGIC_VECTOR ( 15 downto 0 );
    DDR_M_AXI_rvalid                    : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_wdata                     : OUT STD_LOGIC_VECTOR ( 127 downto 0 );
    DDR_M_AXI_wlast                     : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_wready                    : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    DDR_M_AXI_wstrb                     : OUT STD_LOGIC_VECTOR ( 15 downto 0 );
    DDR_M_AXI_wuser                     : OUT STD_LOGIC_VECTOR ( 15 downto 0 );
    DDR_M_AXI_wvalid                    : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    --
    -- NVME <-> ACTION Interface
    ACT_NVME_aclk                       : IN  STD_LOGIC;
    ACT_NVME_aresetn                    : IN  STD_LOGIC;
    ACT_NVME_AXI_araddr                 : IN  STD_LOGIC_VECTOR ( 31 downto 0 );
    ACT_NVME_AXI_arburst                : IN  STD_LOGIC_VECTOR ( 1 downto 0 );
    ACT_NVME_AXI_arcache                : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    ACT_NVME_AXI_arlen                  : IN  STD_LOGIC_VECTOR ( 7 downto 0 );
    ACT_NVME_AXI_arlock                 : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    ACT_NVME_AXI_arprot                 : IN  STD_LOGIC_VECTOR ( 2 downto 0 );
    ACT_NVME_AXI_arqos                  : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    ACT_NVME_AXI_arready                : OUT STD_LOGIC;
    ACT_NVME_AXI_arregion               : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    ACT_NVME_AXI_arsize                 : IN  STD_LOGIC_VECTOR ( 2 downto 0 );
    ACT_NVME_AXI_arvalid                : IN  STD_LOGIC;
    ACT_NVME_AXI_awaddr                 : IN  STD_LOGIC_VECTOR ( 31 downto 0 );
    ACT_NVME_AXI_awburst                : IN  STD_LOGIC_VECTOR ( 1 downto 0 );
    ACT_NVME_AXI_awcache                : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    ACT_NVME_AXI_awlen                  : IN  STD_LOGIC_VECTOR ( 7 downto 0 );
    ACT_NVME_AXI_awlock                 : IN  STD_LOGIC_vector(0 to 0);
    ACT_NVME_AXI_awprot                 : IN  STD_LOGIC_VECTOR ( 2 downto 0 );
    ACT_NVME_AXI_awqos                  : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    ACT_NVME_AXI_awready                : OUT STD_LOGIC;
    ACT_NVME_AXI_awregion               : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    ACT_NVME_AXI_awsize                 : IN  STD_LOGIC_VECTOR ( 2 downto 0 );
    ACT_NVME_AXI_awvalid                : IN  STD_LOGIC;
    ACT_NVME_AXI_bready                 : IN  STD_LOGIC;
    ACT_NVME_AXI_bresp                  : OUT STD_LOGIC_VECTOR ( 1 downto 0 );
    ACT_NVME_AXI_bvalid                 : OUT STD_LOGIC;
    ACT_NVME_AXI_rdata                  : OUT STD_LOGIC_VECTOR ( 31 downto 0 );
    ACT_NVME_AXI_rlast                  : OUT STD_LOGIC;
    ACT_NVME_AXI_rready                 : IN  STD_LOGIC;
    ACT_NVME_AXI_rresp                  : OUT STD_LOGIC_VECTOR ( 1 downto 0 );
    ACT_NVME_AXI_rvalid                 : OUT STD_LOGIC;
    ACT_NVME_AXI_wdata                  : IN  STD_LOGIC_VECTOR ( 31 downto 0 );
    ACT_NVME_AXI_wlast                  : IN  STD_LOGIC;
    ACT_NVME_AXI_wready                 : OUT STD_LOGIC;
    ACT_NVME_AXI_wstrb                  : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    ACT_NVME_AXI_wvalid                 : IN  STD_LOGIC;
    --
    -- NVME <-> CONTROL Interface
    NVME_S_ARESETN                      : IN  STD_LOGIC;
    NVME_S_ACLK                         : IN  STD_LOGIC;
    NVME_S_AXI_awaddr                   : IN  STD_LOGIC_VECTOR ( 31 downto 0 );
    NVME_S_AXI_awprot                   : IN  STD_LOGIC_VECTOR ( 2 downto 0 );
    NVME_S_AXI_awvalid                  : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_awready                  : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_wdata                    : IN  STD_LOGIC_VECTOR ( 31 downto 0 );
    NVME_S_AXI_wstrb                    : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    NVME_S_AXI_wvalid                   : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_wready                   : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_bresp                    : OUT STD_LOGIC_VECTOR ( 1 downto 0 );
    NVME_S_AXI_bvalid                   : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_bready                   : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_araddr                   : IN  STD_LOGIC_VECTOR ( 31 downto 0 );
    NVME_S_AXI_arprot                   : IN  STD_LOGIC_VECTOR ( 2 downto 0 );
    NVME_S_AXI_arvalid                  : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_arready                  : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_rdata                    : OUT STD_LOGIC_VECTOR ( 31 downto 0 );
    NVME_S_AXI_rresp                    : OUT STD_LOGIC_VECTOR ( 1 downto 0 );
    NVME_S_AXI_rvalid                   : OUT STD_LOGIC_VECTOR ( 0 to 0 );
    NVME_S_AXI_rready                   : IN  STD_LOGIC_VECTOR ( 0 to 0 );
    --
    -- NVMe Reset Input
    nvme_reset_n                        : IN  STD_LOGIC;
    --
    -- Clock inputs for NVMe
    refclk_nvme_ch0_p                   : IN  STD_LOGIC;
    refclk_nvme_ch0_n                   : IN  STD_LOGIC;
    refclk_nvme_ch1_p                   : IN  STD_LOGIC;
    refclk_nvme_ch1_n                   : IN  STD_LOGIC;
    --
    -- NVME <-> PCIE Interface
    pcie_rc0_rxn                        : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_rc0_rxp                        : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_rc0_txn                        : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_rc0_txp                        : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_rc1_rxn                        : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_rc1_rxp                        : IN  STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_rc1_txn                        : OUT STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_rc1_txp                        : OUT STD_LOGIC_VECTOR ( 3 downto 0 )
  );
  END COMPONENT nvme_top;
#endif

  --
  -- SIGNALS
  --
  SIGNAL action_reset                   : STD_LOGIC;
  SIGNAL action_reset_n_q               : STD_LOGIC;
  SIGNAL pci_user_reset_q               : STD_LOGIC;
  SIGNAL pci_user_reset_qq              : STD_LOGIC;
  SIGNAL xk_d                           : XK_D_T;
  SIGNAL kx_d                           : KX_D_T;
  SIGNAL sk_d                           : SK_D_T;
  SIGNAL ks_d                           : KS_D_T;
  signal xn_d                           : XN_D_T;
  signal nx_d                           : NX_D_T := ('0','0', "00",'0','0', (31 downto 0 => '0'),
                                                     "00",'0');

#ifdef CONFIG_ENABLE_DDRI
  SIGNAL sdram_axi_clk                  : STD_LOGIC;
  SIGNAL sdram_axi_rst_n                : STD_LOGIC;
  SIGNAL sdram_reset_q                  : STD_LOGIC;
  SIGNAL sdram_reset_n_q                : STD_LOGIC;
  SIGNAL sdram_reset_m                  : STD_LOGIC;
  --
  -- ACTION <-> CLOCK CONVERTER Interface
  SIGNAL act_axi_card_mem0_awaddr       : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awlen        : STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awsize       : STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awburst      : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awlock       : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awcache      : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awprot       : STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awregion     : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awqos        : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awvalid      : STD_LOGIC;
  SIGNAL act_axi_card_mem0_awready      : STD_LOGIC;
  SIGNAL act_axi_card_mem0_wdata        : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_wstrb        : STD_LOGIC_VECTOR ( (C_AXI_CARD_MEM0_DATA_WIDTH/8)-1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_wlast        : STD_LOGIC;
  SIGNAL act_axi_card_mem0_wvalid       : STD_LOGIC;
  SIGNAL act_axi_card_mem0_wready       : STD_LOGIC;
  SIGNAL act_axi_card_mem0_bresp        : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_bvalid       : STD_LOGIC;
  SIGNAL act_axi_card_mem0_bready       : STD_LOGIC;
  SIGNAL act_axi_card_mem0_araddr       : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arlen        : STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arsize       : STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arburst      : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arlock       : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arcache      : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arprot       : STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arregion     : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arqos        : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_arvalid      : STD_LOGIC;
  SIGNAL act_axi_card_mem0_arready      : STD_LOGIC;
  SIGNAL act_axi_card_mem0_rdata        : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_rresp        : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_rlast        : STD_LOGIC;
  SIGNAL act_axi_card_mem0_rvalid       : STD_LOGIC;
  SIGNAL act_axi_card_mem0_rready       : STD_LOGIC;
  SIGNAL act_axi_card_mem0_arid         : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_awid         : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_bid          : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
  SIGNAL act_axi_card_mem0_rid          : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
  --
  -- CLOCK CONVERTER <-> SDRAM MIGs
  SIGNAL sdram_axi_awaddr               : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_awaddr_s             : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_awlen                : STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
  SIGNAL sdram_axi_awsize               : STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
  SIGNAL sdram_axi_awburst              : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL sdram_axi_awlock               : STD_LOGIC_VECTOR ( 0 DOWNTO 0 ) := "0";
  SIGNAL sdram_axi_awcache              : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL sdram_axi_awprot               : STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
  SIGNAL sdram_axi_awregion             : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL sdram_axi_awqos                : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL sdram_axi_awvalid              : STD_LOGIC;
  SIGNAL sdram_axi_awready              : STD_LOGIC;
  SIGNAL sdram_axi_wdata                : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_wstrb                : STD_LOGIC_VECTOR ( (C_AXI_CARD_MEM0_DATA_WIDTH/8)-1 DOWNTO 0 );
  SIGNAL sdram_axi_wlast                : STD_LOGIC;
  SIGNAL sdram_axi_wvalid               : STD_LOGIC;
  SIGNAL sdram_axi_wready               : STD_LOGIC;
  SIGNAL sdram_axi_bresp                : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL sdram_axi_bvalid               : STD_LOGIC;
  SIGNAL sdram_axi_bready               : STD_LOGIC;
  SIGNAL sdram_axi_araddr               : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_araddr_s             : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ADDR_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_arlen                : STD_LOGIC_VECTOR ( 7 DOWNTO 0 );
  SIGNAL sdram_axi_arsize               : STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
  SIGNAL sdram_axi_arburst              : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL sdram_axi_arlock               : STD_LOGIC_VECTOR ( 0 DOWNTO 0 ):= "0";
  SIGNAL sdram_axi_arcache              : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL sdram_axi_arprot               : STD_LOGIC_VECTOR ( 2 DOWNTO 0 );
  SIGNAL sdram_axi_arregion             : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL sdram_axi_arqos                : STD_LOGIC_VECTOR ( 3 DOWNTO 0 );
  SIGNAL sdram_axi_arvalid              : STD_LOGIC;
  SIGNAL sdram_axi_arready              : STD_LOGIC;
  SIGNAL sdram_axi_rdata                : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_rresp                : STD_LOGIC_VECTOR ( 1 DOWNTO 0 );
  SIGNAL sdram_axi_rlast                : STD_LOGIC;
  SIGNAL sdram_axi_rvalid               : STD_LOGIC;
  SIGNAL sdram_axi_rready               : STD_LOGIC;
  SIGNAL sdram_axi_arid                 : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_awid                 : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_bid                  : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
  SIGNAL sdram_axi_rid                  : STD_LOGIC_VECTOR ( C_AXI_CARD_MEM0_ID_WIDTH-1 DOWNTO 0 );
  --
  --
  SIGNAL sdram_init_calib_complete      : STD_LOGIC;
  SIGNAL sdram_ui_clk                   : STD_LOGIC;
  SIGNAL sdram_ui_clk_sync_rst          : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_awvalid         : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_awready         : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_awaddr          : STD_LOGIC_VECTOR(31 DOWNTO 0);
  SIGNAL sdram_axi_ctrl_wvalid          : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_wready          : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_wdata           : STD_LOGIC_VECTOR(31 DOWNTO 0);
  SIGNAL sdram_axi_ctrl_bvalid          : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_bready          : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_bresp           : STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL sdram_axi_ctrl_arvalid         : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_arready         : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_araddr          : STD_LOGIC_VECTOR(31 DOWNTO 0);
  SIGNAL sdram_axi_ctrl_rvalid          : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_rready          : STD_LOGIC;
  SIGNAL sdram_axi_ctrl_rdata           : STD_LOGIC_VECTOR(31 DOWNTO 0);
  SIGNAL sdram_axi_ctrl_rresp           : STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL sdram_interrupt                : STD_LOGIC;
#endif

#ifdef CONFIG_ENABLE_DDR4
  --
  -- DDR4 SDRAM Interface
  SIGNAL ddr4_dbg_clk                   : STD_LOGIC;
  SIGNAL ddr4_dbg_bus                   : STD_LOGIC_VECTOR(511 DOWNTO 0);
#endif

#ifdef CONFIG_ENABLE_NVME
  --
  -- NVME <-> DDR4 Interface
  SIGNAL ddr_aresetn                    : STD_LOGIC;
  SIGNAL ddr_aclk                       : STD_LOGIC;
  SIGNAL nvm_axi_card_mem0_araddr       : STD_LOGIC_VECTOR ( 33 downto 0 );
  SIGNAL nvm_axi_card_mem0_arburst      : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL nvm_axi_card_mem0_arcache      : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_arid         : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_arlen        : STD_LOGIC_VECTOR ( 7 downto 0 );
  SIGNAL nvm_axi_card_mem0_arlock       : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_arprot       : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL nvm_axi_card_mem0_arqos        : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_arready      : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_arregion     : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_arsize       : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL nvm_axi_card_mem0_arvalid      : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_awaddr       : STD_LOGIC_VECTOR ( 33 downto 0 );
  SIGNAL nvm_axi_card_mem0_awburst      : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL nvm_axi_card_mem0_awcache      : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_awid         : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_awlen        : STD_LOGIC_VECTOR ( 7 downto 0 );
  SIGNAL nvm_axi_card_mem0_awlock       : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_awprot       : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL nvm_axi_card_mem0_awqos        : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_awready      : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_awregion     : STD_LOGIC_VECTOR ( 32 downto 0 );
  SIGNAL nvm_axi_card_mem0_awsize       : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL nvm_axi_card_mem0_awvalid      : STD_LOGIC_vector ( 0 to 0);
  SIGNAL nvm_axi_card_mem0_bid          : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_bready       : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_bresp        : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL nvm_axi_card_mem0_bvalid       : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_rdata        : STD_LOGIC_VECTOR ( 127 downto 0 );
  SIGNAL nvm_axi_card_mem0_rid          : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_card_mem0_rlast        : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_rready       : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_rresp        : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL nvm_axi_card_mem0_ruser        : STD_LOGIC_VECTOR ( 15 downto 0 );
  SIGNAL nvm_axi_card_mem0_rvalid       : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_wdata        : STD_LOGIC_VECTOR ( 127 downto 0 );
  SIGNAL nvm_axi_card_mem0_wlast        : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_wready       : STD_LOGIC_VECTOR ( 0 to 0 );
  SIGNAL nvm_axi_card_mem0_wstrb        : STD_LOGIC_VECTOR ( 15 downto 0 );
  SIGNAL nvm_axi_card_mem0_wuser        : STD_LOGIC_VECTOR ( 15 downto 0 );
  SIGNAL nvm_axi_card_mem0_wvalid       : STD_LOGIC_VECTOR ( 0 to 0 );
  --
  -- NVME <-> ACTION
  SIGNAL ACT_NVME_AXI_araddr            : STD_LOGIC_VECTOR ( 31 downto 0 );
  SIGNAL ACT_NVME_AXI_arburst           : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL ACT_NVME_AXI_arcache           : STD_LOGIC_VECTOR ( 3 downto 0 );
--  SIGNAL ACT_NVME_AXI_arid              : STD_LOGIC_VECTOR ( 0 downto 0 );
  SIGNAL ACT_NVME_AXI_arlen             : STD_LOGIC_VECTOR ( 7 downto 0 );
  SIGNAL ACT_NVME_AXI_arlock            : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL ACT_NVME_AXI_arprot            : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL ACT_NVME_AXI_arqos             : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL ACT_NVME_AXI_arready           : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_arregion          : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL ACT_NVME_AXI_arsize            : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL ACT_NVME_AXI_arvalid           : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_awaddr            : STD_LOGIC_VECTOR ( 31 downto 0 );
  SIGNAL ACT_NVME_AXI_awburst           : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL ACT_NVME_AXI_awcache           : STD_LOGIC_VECTOR ( 3 downto 0 );
--  SIGNAL ACT_NVME_AXI_awid              : STD_LOGIC_VECTOR ( 0 downto 0 );
  SIGNAL ACT_NVME_AXI_awlen             : STD_LOGIC_VECTOR ( 7 downto 0 );
  SIGNAL ACT_NVME_AXI_awlock            : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL ACT_NVME_AXI_awprot            : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL ACT_NVME_AXI_awqos             : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL ACT_NVME_AXI_awready           : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_awregion          : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL ACT_NVME_AXI_awsize            : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL ACT_NVME_AXI_awvalid           : STD_LOGIC;
--  SIGNAL ACT_NVME_AXI_bid               : STD_LOGIC_VECTOR ( 0 downto 0 );
  SIGNAL ACT_NVME_AXI_bready            : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_bresp             : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL ACT_NVME_AXI_bvalid            : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_rdata             : STD_LOGIC_VECTOR ( 31 downto 0 );
--  SIGNAL ACT_NVME_AXI_rid               : STD_LOGIC_VECTOR ( 0 downto 0 );
  SIGNAL ACT_NVME_AXI_rlast             : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_rready            : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_rresp             : STD_LOGIC_VECTOR ( 1 downto 0 );
--  SIGNAL ACT_NVME_AXI_ruser             : STD_LOGIC_VECTOR ( 0 downto 0 );
  SIGNAL ACT_NVME_AXI_rvalid            : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_wdata             : STD_LOGIC_VECTOR ( 31 downto 0 );
  SIGNAL ACT_NVME_AXI_wlast             : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_wready            : STD_LOGIC;
  SIGNAL ACT_NVME_AXI_wstrb             : STD_LOGIC_VECTOR (  3 downto 0 );
--  SIGNAL ACT_NVME_AXI_wuser             : STD_LOGIC_VECTOR ( 0 downto 0 );
  SIGNAL ACT_NVME_AXI_wvalid            : STD_LOGIC;
  --
  -- NVME <-> CONTROL Interface
  SIGNAL nvm_axi_ctrl_reg_aclk          : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_aresetn       : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_awaddr        : STD_LOGIC_VECTOR ( 31 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_awprot        : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_awvalid       : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_awready       : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_wdata         : STD_LOGIC_VECTOR ( 31 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_wstrb         : STD_LOGIC_VECTOR ( 3 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_wvalid        : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_wready        : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_bresp         : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_bvalid        : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_bready        : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_araddr        : STD_LOGIC_VECTOR ( 31 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_arprot        : STD_LOGIC_VECTOR ( 2 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_arvalid       : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_arready       : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_rdata         : STD_LOGIC_VECTOR ( 31 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_rresp         : STD_LOGIC_VECTOR ( 1 downto 0 );
  SIGNAL nvm_axi_ctrl_reg_rvalid        : STD_LOGIC;
  SIGNAL nvm_axi_ctrl_reg_rready        : STD_LOGIC;
  -- NVME <-> PCIE Interface
  SIGNAL sys_clk_nvme_ch0               : STD_LOGIC;
  SIGNAL sys_clk_nvme_ch0_gt            : STD_LOGIC;
  SIGNAL sys_clk_nvme_ch1               : STD_LOGIC;
  SIGNAL sys_clk_nvme_ch1_gt            : STD_LOGIC;
  -- TMP NVME
  SIGNAL tmp_sdram_axi_arid             : STD_LOGIC_VECTOR (C_AXI_CARD_MEM0_ID_WIDTH downto 0);
  SIGNAL tmp_sdram_axi_awid             : STD_LOGIC_VECTOR (C_AXI_CARD_MEM0_ID_WIDTH downto 0);
  SIGNAL tmp_sdram_axi_bid              : STD_LOGIC_VECTOR (C_AXI_CARD_MEM0_ID_WIDTH downto 0);
  SIGNAL tmp_sdram_axi_rid              : STD_LOGIC_VECTOR (C_AXI_CARD_MEM0_ID_WIDTH downto 0);
#endif

BEGIN
  --
  -- Reset Delay Logic
  --
  reset_reg : PROCESS (ha_pclock)
  BEGIN
    IF (rising_edge(ha_pclock)) THEN
      action_reset_n_q   <= NOT action_reset;
      pci_user_reset_q   <= pci_user_reset;
      pci_user_reset_qq  <= pci_user_reset_q;      
    END IF;
  END PROCESS reset_reg;

#ifdef CONFIG_ENABLE_DDRI
  --
  -- SDRAM Reset Logic
  --
  sdram_reset_reg : PROCESS (pci_clock_125MHz)
  BEGIN  -- PROCESS
    IF (rising_edge(pci_clock_125MHz)) THEN
      IF ((pci_user_reset    = '1') OR
          (pci_user_reset_q  = '1') or
          (pci_user_reset_qq = '1')) THEN
        sdram_reset_m <= '1';
      ELSE
        sdram_reset_m <= '0';
      END IF;

      sdram_reset_q   <=     sdram_reset_m;
    END IF;
  END PROCESS sdram_reset_reg;
#endif

  snap_core_i: snap_core
    PORT MAP (
      --
      -- PSL Interface
      --
      -- Command interface
      ah_cvalid      => ah_cvalid,
      ah_ctag        => ah_ctag,
      ah_com         => ah_com,
      ah_cabt        => ah_cabt,
      ah_cea         => ah_cea,
      ah_cch         => ah_cch,
      ah_csize       => ah_csize,
      ha_croom       => ha_croom,
      ah_ctagpar     => ah_ctagpar,
      ah_compar      => ah_compar,
      ah_ceapar      => ah_ceapar,
      --
      -- Buffer interface
      ha_brvalid     => ha_brvalid,
      ha_brtag       => ha_brtag,
      ha_brad        => ha_brad,
      ah_brlat       => ah_brlat,
      ah_brdata      => ah_brdata,
      ah_brpar       => ah_brpar,
      ha_bwvalid     => ha_bwvalid,
      ha_bwtag       => ha_bwtag,
      ha_bwad        => ha_bwad,
      ha_bwdata      => ha_bwdata,
      ha_bwpar       => ha_bwpar,
      ha_brtagpar    => ha_brtagpar,
      ha_bwtagpar    => ha_bwtagpar,
      --
      --  Response interface
      ha_rvalid      => ha_rvalid,
      ha_rtag        => ha_rtag,
      ha_rditag      => ha_rditag,
      ha_response    => ha_response,
      ha_response_ext=> ha_response_ext,
      ha_rpagesize   => ha_rpagesize,
      ha_rcredits    => ha_rcredits,
      ha_rcachestate => ha_rcachestate,
      ha_rcachepos   => ha_rcachepos,
      ha_rtagpar     => ha_rtagpar,
      ha_rditagpar   => ha_rditagpar,
      --
      -- MMIO interface
      ha_mmval       => ha_mmval,
      ha_mmrnw       => ha_mmrnw,
      ha_mmdw        => ha_mmdw,
      ha_mmad        => ha_mmad,
      ha_mmdata      => ha_mmdata,
      ha_mmcfg       => ha_mmcfg,
      ah_mmack       => ah_mmack,
      ah_mmdata      => ah_mmdata,
      ha_mmadpar     => ha_mmadpar,
      ha_mmdatapar   => ha_mmdatapar,
      ah_mmdatapar   => ah_mmdatapar,
      --
      -- Control interface
      ha_jval        => ha_jval,
      ha_jcom        => ha_jcom,
      ha_jea         => ha_jea,
      ah_jrunning    => ah_jrunning,
      ah_jdone       => ah_jdone,
      ah_jcack       => ah_jcack,
      ah_jerror      => ah_jerror,
      ah_tbreq       => ah_tbreq,
      ah_jyield      => ah_jyield,
      ha_jeapar      => ha_jeapar,
      ha_jcompar     => ha_jcompar,
      ah_paren       => ah_paren,
      ha_pclock      => ha_pclock,
      -- DMA interface
      d0h_dvalid          => d0h_dvalid,
      d0h_req_utag        => d0h_req_utag,
      d0h_req_itag        => d0h_req_itag,
      d0h_dtype           => d0h_dtype,
      d0h_datomic_op      => d0h_datomic_op,
      d0h_datomic_le      => d0h_datomic_le,
      d0h_dsize           => d0h_dsize,
      d0h_ddata           => d0h_ddata,
      hd0_sent_utag_valid => hd0_sent_utag_valid,
      hd0_sent_utag       => hd0_sent_utag,
      hd0_sent_utag_sts   => hd0_sent_utag_sts,
      hd0_cpl_valid       => hd0_cpl_valid,
      hd0_cpl_utag        => hd0_cpl_utag,
      hd0_cpl_type        => hd0_cpl_type,
      hd0_cpl_size        => hd0_cpl_size,
      hd0_cpl_laddr       => hd0_cpl_laddr,
      hd0_cpl_byte_count  => hd0_cpl_byte_count,
      hd0_cpl_data        => hd0_cpl_data,
      --
      -- ACTION Interface
      --
      -- misc
      action_reset   => action_reset,
#ifdef CONFIG_ENABLE_NVME
      nvme_reset_ctl => nvme_reset_ctl,
      nvme_perst_ctl => nvme_perst_ctl,
#endif
      --
      -- Kernel AXI Master Interface
      xk_d_o         => xk_d,
      kx_d_i         => kx_d,
#ifdef CONFIG_ENABLE_NVME
      --
      -- NVME Interface
      xn_d_o         => xn_d,
      nx_d_i         => nx_d,
#endif
      --
      -- Kernel AXI Slave Interface
      sk_d_o         => sk_d,
      ks_d_i         => ks_d
    );

  --
  -- ACTION
  --
  action_w: action_wrapper
    PORT MAP (
      ap_clk                               => ha_pclock,
      ap_rst_n                             => action_reset_n_q,
      interrupt_ack                        => sk_d.int_req_ack,
      interrupt                            => ks_d.int_req,
      interrupt_src                        => ks_d.int_src,
      interrupt_ctx                        => ks_d.int_ctx,
#ifdef CONFIG_ENABLE_DDRI
      --
      -- AXI NVMe DDR Interface
      m_axi_card_mem0_araddr               => act_axi_card_mem0_araddr,
      m_axi_card_mem0_arburst              => act_axi_card_mem0_arburst,
      m_axi_card_mem0_arcache              => act_axi_card_mem0_arcache,
      m_axi_card_mem0_arid                 => act_axi_card_mem0_arid,
      m_axi_card_mem0_arlen                => act_axi_card_mem0_arlen,
      m_axi_card_mem0_arlock               => act_axi_card_mem0_arlock,
      m_axi_card_mem0_arprot               => act_axi_card_mem0_arprot,
      m_axi_card_mem0_arqos                => act_axi_card_mem0_arqos,
      m_axi_card_mem0_arready              => act_axi_card_mem0_arready,
      m_axi_card_mem0_arregion             => act_axi_card_mem0_arregion,
      m_axi_card_mem0_arsize               => act_axi_card_mem0_arsize,
      m_axi_card_mem0_aruser               => OPEN,
      m_axi_card_mem0_arvalid              => act_axi_card_mem0_arvalid,
      m_axi_card_mem0_awaddr               => act_axi_card_mem0_awaddr,
      m_axi_card_mem0_awburst              => act_axi_card_mem0_awburst,
      m_axi_card_mem0_awcache              => act_axi_card_mem0_awcache,
      m_axi_card_mem0_awid                 => act_axi_card_mem0_awid,
      m_axi_card_mem0_awlen                => act_axi_card_mem0_awlen,
      m_axi_card_mem0_awlock               => act_axi_card_mem0_awlock,
      m_axi_card_mem0_awprot               => act_axi_card_mem0_awprot,
      m_axi_card_mem0_awqos                => act_axi_card_mem0_awqos,
      m_axi_card_mem0_awready              => act_axi_card_mem0_awready,
      m_axi_card_mem0_awregion             => act_axi_card_mem0_awregion,
      m_axi_card_mem0_awsize               => act_axi_card_mem0_awsize,
      m_axi_card_mem0_awuser               => OPEN,
      m_axi_card_mem0_awvalid              => act_axi_card_mem0_awvalid,
      m_axi_card_mem0_bid                  => act_axi_card_mem0_bid,
      m_axi_card_mem0_bready               => act_axi_card_mem0_bready,
      m_axi_card_mem0_bresp                => act_axi_card_mem0_bresp,
      m_axi_card_mem0_buser                => (OTHERS => '0'),
      m_axi_card_mem0_bvalid               => act_axi_card_mem0_bvalid,
      m_axi_card_mem0_rdata                => act_axi_card_mem0_rdata,
      m_axi_card_mem0_rid                  => act_axi_card_mem0_rid,
      m_axi_card_mem0_rlast                => act_axi_card_mem0_rlast,
      m_axi_card_mem0_rready               => act_axi_card_mem0_rready,
      m_axi_card_mem0_rresp                => act_axi_card_mem0_rresp,
      m_axi_card_mem0_ruser                => (OTHERS => '0'),
      m_axi_card_mem0_rvalid               => act_axi_card_mem0_rvalid,
      m_axi_card_mem0_wdata                => act_axi_card_mem0_wdata,
      m_axi_card_mem0_wlast                => act_axi_card_mem0_wlast,
      m_axi_card_mem0_wready               => act_axi_card_mem0_wready,
      m_axi_card_mem0_wstrb                => act_axi_card_mem0_wstrb,
      m_axi_card_mem0_wuser                => OPEN,
      m_axi_card_mem0_wvalid               => act_axi_card_mem0_wvalid,
#endif
#ifdef CONFIG_ENABLE_NVME
      --
      -- AXI NVME command Interface
      m_axi_nvme_araddr               => act_nvme_axi_araddr,
      m_axi_nvme_arburst              => act_nvme_axi_arburst,
      m_axi_nvme_arcache              => act_nvme_axi_arcache,
--      m_axi_nvme_arid                 => act_nvme_axi_arid,
      m_axi_nvme_arlen                => act_nvme_axi_arlen,
      m_axi_nvme_arlock               => act_nvme_axi_arlock,
      m_axi_nvme_arprot               => act_nvme_axi_arprot,
      m_axi_nvme_arqos                => act_nvme_axi_arqos,
      m_axi_nvme_arready              => act_nvme_axi_arready,
      m_axi_nvme_arregion             => act_nvme_axi_arregion,
      m_axi_nvme_arsize               => act_nvme_axi_arsize,
      m_axi_nvme_arvalid              => act_nvme_axi_arvalid,
      m_axi_nvme_awaddr               => act_nvme_axi_awaddr,
      m_axi_nvme_awburst              => act_nvme_axi_awburst,
      m_axi_nvme_awcache              => act_nvme_axi_awcache,
--      m_axi_nvme_awid                 => act_nvme_axi_awid,
      m_axi_nvme_awlen                => act_nvme_axi_awlen,
      m_axi_nvme_awlock               => act_nvme_axi_awlock,
      m_axi_nvme_awprot               => act_nvme_axi_awprot,
      m_axi_nvme_awqos                => act_nvme_axi_awqos,
      m_axi_nvme_awready              => act_nvme_axi_awready,
      m_axi_nvme_awregion             => act_nvme_axi_awregion,
      m_axi_nvme_awsize               => act_nvme_axi_awsize,
      m_axi_nvme_awvalid              => act_nvme_axi_awvalid,
      m_axi_nvme_bid                  => "0",
      m_axi_nvme_bready               => act_nvme_axi_bready,
      m_axi_nvme_bresp                => act_nvme_axi_bresp,
      m_axi_nvme_buser                => "0",
      m_axi_nvme_bvalid               => act_nvme_axi_bvalid,
      m_axi_nvme_rdata                => act_nvme_axi_rdata,
      m_axi_nvme_rid                  => "0",
      m_axi_nvme_rlast                => act_nvme_axi_rlast,
      m_axi_nvme_rready               => act_nvme_axi_rready,
      m_axi_nvme_rresp                => act_nvme_axi_rresp,
      m_axi_nvme_ruser                => "0",
      m_axi_nvme_rvalid               => act_nvme_axi_rvalid,
      m_axi_nvme_wdata                => act_nvme_axi_wdata,
      m_axi_nvme_wlast                => act_nvme_axi_wlast,
      m_axi_nvme_wready               => act_nvme_axi_wready,
      m_axi_nvme_wstrb                => act_nvme_axi_wstrb,
      m_axi_nvme_wuser                => open,
      m_axi_nvme_wvalid               => act_nvme_axi_wvalid,
#endif
      --
      -- AXI Control Register Interface
      s_axi_ctrl_reg_araddr                => xk_d.m_axi_araddr,
      s_axi_ctrl_reg_arready               => kx_d.m_axi_arready,
      s_axi_ctrl_reg_arvalid               => xk_d.m_axi_arvalid,
      s_axi_ctrl_reg_awaddr                => xk_d.m_axi_awaddr,
      s_axi_ctrl_reg_awready               => kx_d.m_axi_awready,
      s_axi_ctrl_reg_awvalid               => xk_d.m_axi_awvalid,
      s_axi_ctrl_reg_bready                => xk_d.m_axi_bready,
      s_axi_ctrl_reg_bresp                 => kx_d.m_axi_bresp,
      s_axi_ctrl_reg_bvalid                => kx_d.m_axi_bvalid,
      s_axi_ctrl_reg_rdata                 => kx_d.m_axi_rdata,
      s_axi_ctrl_reg_rready                => xk_d.m_axi_rready,
      s_axi_ctrl_reg_rresp                 => kx_d.m_axi_rresp,
      s_axi_ctrl_reg_rvalid                => kx_d.m_axi_rvalid,
      s_axi_ctrl_reg_wdata                 => xk_d.m_axi_wdata,
      s_axi_ctrl_reg_wready                => kx_d.m_axi_wready,
      s_axi_ctrl_reg_wstrb                 => xk_d.m_axi_wstrb,
      s_axi_ctrl_reg_wvalid                => xk_d.m_axi_wvalid,
      --
      -- AXI Host Memory Interface
      m_axi_host_mem_araddr                => ks_d.s_axi_araddr(C_AXI_HOST_MEM_ADDR_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_arburst               => ks_d.s_axi_arburst,
      m_axi_host_mem_arcache               => ks_d.s_axi_arcache,
      m_axi_host_mem_arid                  => ks_d.s_axi_arid(C_AXI_HOST_MEM_ID_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_arlen                 => ks_d.s_axi_arlen,
      m_axi_host_mem_arlock                => OPEN,
      m_axi_host_mem_arprot                => ks_d.s_axi_arprot,
      m_axi_host_mem_arqos                 => ks_d.s_axi_arqos,
      m_axi_host_mem_arready               => sk_d.s_axi_arready,
      m_axi_host_mem_arregion              => OPEN,
      m_axi_host_mem_arsize                => ks_d.s_axi_arsize,
      m_axi_host_mem_aruser                => ks_d.s_axi_aruser(C_AXI_HOST_MEM_ARUSER_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_arvalid               => ks_d.s_axi_arvalid,
      m_axi_host_mem_awaddr                => ks_d.s_axi_awaddr(C_AXI_HOST_MEM_ADDR_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_awburst               => ks_d.s_axi_awburst,
      m_axi_host_mem_awcache               => ks_d.s_axi_awcache,
      m_axi_host_mem_awid                  => ks_d.s_axi_awid(C_AXI_HOST_MEM_ID_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_awlen                 => ks_d.s_axi_awlen,
      m_axi_host_mem_awlock                => OPEN,
      m_axi_host_mem_awprot                => ks_d.s_axi_awprot,
      m_axi_host_mem_awqos                 => ks_d.s_axi_awqos,
      m_axi_host_mem_awready               => sk_d.s_axi_awready,
      m_axi_host_mem_awregion              => OPEN,
      m_axi_host_mem_awsize                => ks_d.s_axi_awsize,
      m_axi_host_mem_awuser                => ks_d.s_axi_awuser(C_AXI_HOST_MEM_AWUSER_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_awvalid               => ks_d.s_axi_awvalid,
      m_axi_host_mem_bid                   => sk_d.s_axi_bid(C_AXI_HOST_MEM_ID_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_bready                => ks_d.s_axi_bready,
      m_axi_host_mem_bresp                 => sk_d.s_axi_bresp,
      m_axi_host_mem_buser                 => (OTHERS => '0'),
      m_axi_host_mem_bvalid                => sk_d.s_axi_bvalid,
      m_axi_host_mem_rdata                 => sk_d.s_axi_rdata,
      m_axi_host_mem_rid                   => sk_d.s_axi_rid(C_AXI_HOST_MEM_ID_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_rlast                 => sk_d.s_axi_rlast,
      m_axi_host_mem_rready                => ks_d.s_axi_rready,
      m_axi_host_mem_rresp                 => sk_d.s_axi_rresp,
      m_axi_host_mem_ruser                 => (OTHERS => '0'),
      m_axi_host_mem_rvalid                => sk_d.s_axi_rvalid,
      m_axi_host_mem_wdata                 => ks_d.s_axi_wdata(C_AXI_HOST_MEM_DATA_WIDTH-1 DOWNTO 0),
      m_axi_host_mem_wlast                 => ks_d.s_axi_wlast,
      m_axi_host_mem_wready                => sk_d.s_axi_wready,
      m_axi_host_mem_wstrb                 => ks_d.s_axi_wstrb((C_AXI_HOST_MEM_DATA_WIDTH/8)-1 DOWNTO 0),
      m_axi_host_mem_wuser                 => OPEN,
      m_axi_host_mem_wvalid                => ks_d.s_axi_wvalid
    );


#ifdef CONFIG_ENABLE_DDRI
  --
  -- SDRAM
  --
  sdram_axi_ctrl_awvalid   <= '0';
  sdram_axi_ctrl_awaddr    <= (OTHERS => '0');
  sdram_axi_ctrl_wvalid    <= '0';
  sdram_axi_ctrl_wdata     <= (OTHERS => '0');
  sdram_axi_ctrl_bready    <= '0';
  sdram_axi_ctrl_arvalid   <= '0';
  sdram_axi_ctrl_araddr    <= (OTHERS => '0');
  sdram_axi_ctrl_rready    <= '0';
#endif

#if defined(CONFIG_ENABLE_DDRI) && !defined(CONFIG_ENABLE_BRAM)
  sdram_axi_clk   <=     sdram_ui_clk;
  sdram_axi_rst_n <= NOT sdram_ui_clk_sync_rst;
#endif
#ifdef CONFIG_ENABLE_BRAM
  sdram_axi_clk   <=     pci_clock_125MHz;
  sdram_axi_rst_n <= NOT sdram_reset_q;
#endif


#if defined(CONFIG_ENABLE_DDRI) && !defined(CONFIG_ENABLE_NVME)
  axi_clock_converter_i : axi_clock_converter
    PORT MAP (
      s_axi_aclk      => ha_pclock,
      s_axi_aresetn   => action_reset_n_q,
      m_axi_aclk      => sdram_axi_clk,
      m_axi_aresetn   => sdram_axi_rst_n,
      --
      -- FROM ACTION
      s_axi_araddr    => act_axi_card_mem0_araddr,
      s_axi_arburst   => act_axi_card_mem0_arburst,
      s_axi_arcache   => act_axi_card_mem0_arcache,
      s_axi_arid      => act_axi_card_mem0_arid,
      s_axi_arlen     => act_axi_card_mem0_arlen,
      s_axi_arlock    => act_axi_card_mem0_arlock(0 DOWNTO 0),
      s_axi_arprot    => act_axi_card_mem0_arprot,
      s_axi_arqos     => act_axi_card_mem0_arqos,
      s_axi_arready   => act_axi_card_mem0_arready,
      s_axi_arregion  => act_axi_card_mem0_arregion,
      s_axi_arsize    => act_axi_card_mem0_arsize,
      s_axi_arvalid   => act_axi_card_mem0_arvalid,
      s_axi_awaddr    => act_axi_card_mem0_awaddr,
      s_axi_awburst   => act_axi_card_mem0_awburst,
      s_axi_awcache   => act_axi_card_mem0_awcache,
      s_axi_awid      => act_axi_card_mem0_awid,
      s_axi_awlen     => act_axi_card_mem0_awlen,
      s_axi_awlock    => act_axi_card_mem0_awlock(0 DOWNTO 0),
      s_axi_awprot    => act_axi_card_mem0_awprot,
      s_axi_awqos     => act_axi_card_mem0_awqos,
      s_axi_awready   => act_axi_card_mem0_awready,
      s_axi_awregion  => act_axi_card_mem0_awregion,
      s_axi_awsize    => act_axi_card_mem0_awsize,
      s_axi_awvalid   => act_axi_card_mem0_awvalid,
      s_axi_bid       => act_axi_card_mem0_bid,
      s_axi_bready    => act_axi_card_mem0_bready,
      s_axi_bresp     => act_axi_card_mem0_bresp,
      s_axi_bvalid    => act_axi_card_mem0_bvalid,
      s_axi_rdata     => act_axi_card_mem0_rdata,
      s_axi_rid       => act_axi_card_mem0_rid,
      s_axi_rlast     => act_axi_card_mem0_rlast,
      s_axi_rready    => act_axi_card_mem0_rready,
      s_axi_rresp     => act_axi_card_mem0_rresp,
      s_axi_rvalid    => act_axi_card_mem0_rvalid,
      s_axi_wdata     => act_axi_card_mem0_wdata,
      s_axi_wlast     => act_axi_card_mem0_wlast,
      s_axi_wready    => act_axi_card_mem0_wready,
      s_axi_wstrb     => act_axi_card_mem0_wstrb,
      s_axi_wvalid    => act_axi_card_mem0_wvalid,
      --
      -- TO SDRAM
      m_axi_araddr    => sdram_axi_araddr,
      m_axi_arburst   => sdram_axi_arburst,
      m_axi_arcache   => sdram_axi_arcache,
      m_axi_arid      => sdram_axi_arid,
      m_axi_arlen     => sdram_axi_arlen,
      m_axi_arlock    => sdram_axi_arlock,
      m_axi_arprot    => sdram_axi_arprot,
      m_axi_arqos     => sdram_axi_arqos,
      m_axi_arready   => sdram_axi_arready,
      m_axi_arregion  => sdram_axi_arregion,
      m_axi_arsize    => sdram_axi_arsize,
      m_axi_arvalid   => sdram_axi_arvalid,
      m_axi_awaddr    => sdram_axi_awaddr,
      m_axi_awburst   => sdram_axi_awburst,
      m_axi_awcache   => sdram_axi_awcache,
      m_axi_awid      => sdram_axi_awid,
      m_axi_awlen     => sdram_axi_awlen,
      m_axi_awlock    => sdram_axi_awlock,
      m_axi_awprot    => sdram_axi_awprot,
      m_axi_awqos     => sdram_axi_awqos,
      m_axi_awready   => sdram_axi_awready,
      m_axi_awregion  => sdram_axi_awregion,
      m_axi_awsize    => sdram_axi_awsize,
      m_axi_awvalid   => sdram_axi_awvalid,
      m_axi_bid       => sdram_axi_bid,
      m_axi_bready    => sdram_axi_bready,
      m_axi_bresp     => sdram_axi_bresp,
      m_axi_bvalid    => sdram_axi_bvalid,
      m_axi_rdata     => sdram_axi_rdata,
      m_axi_rid       => sdram_axi_rid,
      m_axi_rlast     => sdram_axi_rlast,
      m_axi_rready    => sdram_axi_rready,
      m_axi_rresp     => sdram_axi_rresp,
      m_axi_rvalid    => sdram_axi_rvalid,
      m_axi_wdata     => sdram_axi_wdata,
      m_axi_wlast     => sdram_axi_wlast,
      m_axi_wready    => sdram_axi_wready,
      m_axi_wstrb     => sdram_axi_wstrb,
      m_axi_wvalid    => sdram_axi_wvalid
    );
#endif


#ifdef CONFIG_ENABLE_NVME
  act_axi_card_mem0_bid  (3 downto 1) <= "000";
  act_axi_card_mem0_rid  (3 downto 1) <= "000";

  nvm_axi_card_mem0_bid  (2 downto 0) <= "000";
  nvm_axi_card_mem0_rid  (2 downto 0) <= "000";

  sdram_axi_arid    <= tmp_sdram_axi_arid(3 DOWNTO 0);
  sdram_axi_awid    <= tmp_sdram_axi_awid(3 DOWNTO 0);                    
  tmp_sdram_axi_bid <= '0' & sdram_axi_bid(3 DOWNTO 0);
  tmp_sdram_axi_rid <= '0' & sdram_axi_rid(3 DOWNTO 0);
  axi_interconnect_i : axi_interconnect
    PORT MAP (
      INTERCONNECT_ACLK       => ha_pclock,
      INTERCONNECT_ARESETN    => action_reset_n_q,
      S00_AXI_ACLK            => ha_pclock,
      S00_AXI_ARESET_OUT_N    => open,
      S01_AXI_ACLK            => ddr_aclk,
      S01_AXI_ARESET_OUT_N    => open,
      M00_AXI_ACLK            => sdram_axi_clk,
      M00_AXI_ARESET_OUT_N    => open,

      --
      -- FROM ACTION
      s00_axi_araddr          => act_axi_card_mem0_araddr,
      s00_axi_arburst         => act_axi_card_mem0_arburst,
      s00_axi_arcache         => act_axi_card_mem0_arcache,
      s00_axi_arid            => act_axi_card_mem0_arid(0),
      s00_axi_arlen           => act_axi_card_mem0_arlen,
      s00_axi_arlock          => act_axi_card_mem0_arlock(0),
      s00_axi_arprot          => act_axi_card_mem0_arprot,
      s00_axi_arqos           => act_axi_card_mem0_arqos,
      s00_axi_arready         => act_axi_card_mem0_arready,
      s00_axi_arsize          => act_axi_card_mem0_arsize,
      s00_axi_arvalid         => act_axi_card_mem0_arvalid,
      s00_axi_awaddr          => act_axi_card_mem0_awaddr,
      s00_axi_awburst         => act_axi_card_mem0_awburst,
      s00_axi_awcache         => act_axi_card_mem0_awcache,
      s00_axi_awid            => act_axi_card_mem0_awid(0),
      s00_axi_awlen           => act_axi_card_mem0_awlen,
      s00_axi_awlock          => act_axi_card_mem0_awlock(0),
      s00_axi_awprot          => act_axi_card_mem0_awprot,
      s00_axi_awqos           => act_axi_card_mem0_awqos,
      s00_axi_awready         => act_axi_card_mem0_awready,
      s00_axi_awsize          => act_axi_card_mem0_awsize,
      s00_axi_awvalid         => act_axi_card_mem0_awvalid,
      s00_axi_bid             => act_axi_card_mem0_bid(0),
      s00_axi_bready          => act_axi_card_mem0_bready,
      s00_axi_bresp           => act_axi_card_mem0_bresp,
      s00_axi_bvalid          => act_axi_card_mem0_bvalid,
      s00_axi_rdata           => act_axi_card_mem0_rdata,
      s00_axi_rid             => act_axi_card_mem0_rid(0),
      s00_axi_rlast           => act_axi_card_mem0_rlast,
      s00_axi_rready          => act_axi_card_mem0_rready,
      s00_axi_rresp           => act_axi_card_mem0_rresp,
      s00_axi_rvalid          => act_axi_card_mem0_rvalid,
      s00_axi_wdata           => act_axi_card_mem0_wdata,
      s00_axi_wlast           => act_axi_card_mem0_wlast,
      s00_axi_wready          => act_axi_card_mem0_wready,
      s00_axi_wstrb           => act_axi_card_mem0_wstrb,
      s00_axi_wvalid          => act_axi_card_mem0_wvalid,
      --
      -- FROM NVMe
      s01_axi_araddr          => nvm_axi_card_mem0_araddr(31 downto 0),
      s01_axi_arburst         => nvm_axi_card_mem0_arburst,
      s01_axi_arcache         => nvm_axi_card_mem0_arcache,
      s01_axi_arid            => nvm_axi_card_mem0_arid(3),
      s01_axi_arlen           => nvm_axi_card_mem0_arlen,
      s01_axi_arlock          => nvm_axi_card_mem0_arlock(0),
      s01_axi_arprot          => nvm_axi_card_mem0_arprot,
      s01_axi_arqos           => nvm_axi_card_mem0_arqos,
      s01_axi_arready         => nvm_axi_card_mem0_arready(0),
      s01_axi_arsize          => nvm_axi_card_mem0_arsize,
      s01_axi_arvalid         => nvm_axi_card_mem0_arvalid(0),
      s01_axi_awaddr          => nvm_axi_card_mem0_awaddr(31 downto 0),
      s01_axi_awburst         => nvm_axi_card_mem0_awburst,
      s01_axi_awcache         => nvm_axi_card_mem0_awcache,
      s01_axi_awid            => nvm_axi_card_mem0_awid(3),
      s01_axi_awlen           => nvm_axi_card_mem0_awlen,
      s01_axi_awlock          => nvm_axi_card_mem0_awlock(0),
      s01_axi_awprot          => nvm_axi_card_mem0_awprot,
      s01_axi_awqos           => nvm_axi_card_mem0_awqos,
      s01_axi_awready         => nvm_axi_card_mem0_awready(0),
      s01_axi_awsize          => nvm_axi_card_mem0_awsize,
      s01_axi_awvalid         => nvm_axi_card_mem0_awvalid(0),
      s01_axi_bid             => nvm_axi_card_mem0_bid(3),
      s01_axi_bready          => nvm_axi_card_mem0_bready(0),
      s01_axi_bresp           => nvm_axi_card_mem0_bresp,
      s01_axi_bvalid          => nvm_axi_card_mem0_bvalid(0),
      s01_axi_rdata           => nvm_axi_card_mem0_rdata,
      s01_axi_rid             => nvm_axi_card_mem0_rid(3),
      s01_axi_rlast           => nvm_axi_card_mem0_rlast(0),
      s01_axi_rready          => nvm_axi_card_mem0_rready(0),
      s01_axi_rresp           => nvm_axi_card_mem0_rresp,
      s01_axi_rvalid          => nvm_axi_card_mem0_rvalid(0),
      s01_axi_wdata           => nvm_axi_card_mem0_wdata,
      s01_axi_wlast           => nvm_axi_card_mem0_wlast(0),
      s01_axi_wready          => nvm_axi_card_mem0_wready(0),
      s01_axi_wstrb           => nvm_axi_card_mem0_wstrb,
      s01_axi_wvalid          => nvm_axi_card_mem0_wvalid(0),
      --
      -- TO SDRAM
      m00_axi_araddr          => sdram_axi_araddr,
      m00_axi_arburst         => sdram_axi_arburst,
      m00_axi_arcache         => sdram_axi_arcache,
      m00_axi_arid            => tmp_sdram_axi_arid,
      m00_axi_arlen           => sdram_axi_arlen,
      m00_axi_arlock          => open, -- sdram_axi_arlock,
      m00_axi_arprot          => sdram_axi_arprot,
      m00_axi_arqos           => sdram_axi_arqos,
      m00_axi_arready         => sdram_axi_arready,
      m00_axi_arsize          => sdram_axi_arsize,
      m00_axi_arvalid         => sdram_axi_arvalid,
      m00_axi_awaddr          => sdram_axi_awaddr,
      m00_axi_awburst         => sdram_axi_awburst,
      m00_axi_awcache         => sdram_axi_awcache,
      m00_axi_awid            => tmp_sdram_axi_awid,
      m00_axi_awlen           => sdram_axi_awlen,
--      m00_axi_awlock        => sdram_axi_awlock,
      m00_axi_awprot          => sdram_axi_awprot,
      m00_axi_awqos           => sdram_axi_awqos,
      m00_axi_awready         => sdram_axi_awready,
      m00_axi_awsize          => sdram_axi_awsize,
      m00_axi_awvalid         => sdram_axi_awvalid,
      m00_axi_bid             => tmp_sdram_axi_bid,
      m00_axi_bready          => sdram_axi_bready,
      m00_axi_bresp           => sdram_axi_bresp,
      m00_axi_bvalid          => sdram_axi_bvalid,
      m00_axi_rdata           => sdram_axi_rdata,
      m00_axi_rid             => tmp_sdram_axi_rid,
      m00_axi_rlast           => sdram_axi_rlast,
      m00_axi_rready          => sdram_axi_rready,
      m00_axi_rresp           => sdram_axi_rresp,
      m00_axi_rvalid          => sdram_axi_rvalid,
      m00_axi_wdata           => sdram_axi_wdata,
      m00_axi_wlast           => sdram_axi_wlast,
      m00_axi_wready          => sdram_axi_wready,
      m00_axi_wstrb           => sdram_axi_wstrb,
      m00_axi_wvalid          => sdram_axi_wvalid
    );
#endif


#ifdef CONFIG_ENABLE_BRAM
  sdram_axi_araddr_s(31 DOWNTO 0) <= '0' & sdram_axi_araddr(31 DOWNTO 1);
  sdram_axi_awaddr_s(31 DOWNTO 0) <= '0' & sdram_axi_awaddr(31 DOWNTO 1);

  block_ram_i0 : block_RAM
    PORT MAP (
      s_aresetn      => sdram_axi_rst_n,
      s_aclk         => sdram_axi_clk,
      s_axi_araddr   => sdram_axi_araddr_s(31 DOWNTO 0),
      s_axi_arburst  => sdram_axi_arburst(1 DOWNTO 0),
      s_axi_arid     => sdram_axi_arid,
      s_axi_arlen    => sdram_axi_arlen(7 DOWNTO 0),
      s_axi_arready  => sdram_axi_arready,
      s_axi_arsize   => "101",
      s_axi_arvalid  => sdram_axi_arvalid,
      s_axi_awaddr   => sdram_axi_awaddr_s(31 DOWNTO 0),
      s_axi_awburst  => sdram_axi_awburst(1 DOWNTO 0),
      s_axi_awid     => sdram_axi_awid,
      s_axi_awlen    => sdram_axi_awlen(7 DOWNTO 0),
      s_axi_awready  => sdram_axi_awready,
      s_axi_awsize   => "101",
      s_axi_awvalid  => sdram_axi_awvalid,
      s_axi_bid      => sdram_axi_bid,
      s_axi_bready   => sdram_axi_bready,
      s_axi_bresp    => sdram_axi_bresp(1 DOWNTO 0),
      s_axi_bvalid   => sdram_axi_bvalid,
      s_axi_rdata    => sdram_axi_rdata((C_AXI_CARD_MEM0_DATA_WIDTH/2-1) DOWNTO 0),
      s_axi_rid      => sdram_axi_rid(3 downto 0),
      s_axi_rlast    => sdram_axi_rlast,
      s_axi_rready   => sdram_axi_rready,
      s_axi_rresp    => sdram_axi_rresp(1 DOWNTO 0),
      s_axi_rvalid   => sdram_axi_rvalid,
      s_axi_wdata    => sdram_axi_wdata((C_AXI_CARD_MEM0_DATA_WIDTH/2)-1 DOWNTO 0),
      s_axi_wlast    => sdram_axi_wlast,
      s_axi_wready   => sdram_axi_wready,
      s_axi_wstrb    => sdram_axi_wstrb((C_AXI_CARD_MEM0_DATA_WIDTH/16)-1 DOWNTO 0),
      s_axi_wvalid   => sdram_axi_wvalid
    );

  block_ram_i1 : block_RAM
    PORT MAP (
      s_aresetn      => sdram_axi_rst_n,
      s_aclk         => sdram_axi_clk,
      s_axi_araddr   => sdram_axi_araddr_s(31 DOWNTO 0),
      s_axi_arburst  => sdram_axi_arburst(1 DOWNTO 0),
      s_axi_arid     => sdram_axi_arid,
      s_axi_arlen    => sdram_axi_arlen(7 DOWNTO 0),
      s_axi_arready  => open,
      s_axi_arsize   => "101",
      s_axi_arvalid  => sdram_axi_arvalid,
      s_axi_awaddr   => sdram_axi_awaddr_s(31 DOWNTO 0),
      s_axi_awburst  => sdram_axi_awburst(1 DOWNTO 0),
      s_axi_awid     => sdram_axi_awid,
      s_axi_awlen    => sdram_axi_awlen(7 DOWNTO 0),
      s_axi_awready  => open,
      s_axi_awsize   => "101",
      s_axi_awvalid  => sdram_axi_awvalid,
      s_axi_bid      => open,
      s_axi_bready   => sdram_axi_bready,
      s_axi_bresp    => open,
      s_axi_bvalid   => open,
      s_axi_rdata    => sdram_axi_rdata(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO (C_AXI_CARD_MEM0_DATA_WIDTH/2)),
      s_axi_rid      => open,
      s_axi_rlast    => open,
      s_axi_rready   => sdram_axi_rready,
      s_axi_rresp    => open,
      s_axi_rvalid   => open,
      s_axi_wdata    => sdram_axi_wdata(C_AXI_CARD_MEM0_DATA_WIDTH-1 DOWNTO (C_AXI_CARD_MEM0_DATA_WIDTH/2)),
      s_axi_wlast    => sdram_axi_wlast,
      s_axi_wready   => open,
      s_axi_wstrb    => sdram_axi_wstrb((C_AXI_CARD_MEM0_DATA_WIDTH/8)-1 DOWNTO (C_AXI_CARD_MEM0_DATA_WIDTH/16)),
      s_axi_wvalid   => sdram_axi_wvalid
    );
#endif

#ifdef CONFIG_ENABLE_DDR4
  ddr4sdram_bank : ddr4sdram
    PORT MAP (
      c0_init_calib_complete     => sdram_init_calib_complete,
      dbg_clk                    => ddr4_dbg_clk,
      c0_sys_clk_p               => c0_sys_clk_p,
      c0_sys_clk_n               => c0_sys_clk_n,
      dbg_bus                    => ddr4_dbg_bus,
      c0_ddr4_adr                => c0_ddr4_adr,
      c0_ddr4_ba                 => c0_ddr4_ba,
      c0_ddr4_cke                => c0_ddr4_cke,
      c0_ddr4_cs_n               => c0_ddr4_cs_n,
      c0_ddr4_dm_dbi_n           => c0_ddr4_dm_dbi_n,
      c0_ddr4_dq                 => c0_ddr4_dq,
      c0_ddr4_dqs_c              => c0_ddr4_dqs_c,
      c0_ddr4_dqs_t              => c0_ddr4_dqs_t,
      c0_ddr4_odt                => c0_ddr4_odt,
      c0_ddr4_bg                 => c0_ddr4_bg,
      c0_ddr4_reset_n            => c0_ddr4_reset_n,
      c0_ddr4_act_n              => c0_ddr4_act_n,
      c0_ddr4_ck_c               => c0_ddr4_ck_c,
      c0_ddr4_ck_t               => c0_ddr4_ck_t,
      c0_ddr4_ui_clk             => sdram_ui_clk,
      c0_ddr4_ui_clk_sync_rst    => sdram_ui_clk_sync_rst,
      c0_ddr4_aresetn            => sdram_axi_rst_n,
      c0_ddr4_s_axi_ctrl_awvalid => sdram_axi_ctrl_awvalid,
      c0_ddr4_s_axi_ctrl_awready => sdram_axi_ctrl_awready,
      c0_ddr4_s_axi_ctrl_awaddr  => sdram_axi_ctrl_awaddr,
      c0_ddr4_s_axi_ctrl_wvalid  => sdram_axi_ctrl_wvalid,
      c0_ddr4_s_axi_ctrl_wready  => sdram_axi_ctrl_wready,
      c0_ddr4_s_axi_ctrl_wdata   => sdram_axi_ctrl_wdata,
      c0_ddr4_s_axi_ctrl_bvalid  => sdram_axi_ctrl_bvalid,
      c0_ddr4_s_axi_ctrl_bready  => sdram_axi_ctrl_bready,
      c0_ddr4_s_axi_ctrl_bresp   => sdram_axi_ctrl_bresp,
      c0_ddr4_s_axi_ctrl_arvalid => sdram_axi_ctrl_arvalid,
      c0_ddr4_s_axi_ctrl_arready => sdram_axi_ctrl_arready,
      c0_ddr4_s_axi_ctrl_araddr  => sdram_axi_ctrl_araddr,
      c0_ddr4_s_axi_ctrl_rvalid  => sdram_axi_ctrl_rvalid,
      c0_ddr4_s_axi_ctrl_rready  => sdram_axi_ctrl_rready,
      c0_ddr4_s_axi_ctrl_rdata   => sdram_axi_ctrl_rdata,
      c0_ddr4_s_axi_ctrl_rresp   => sdram_axi_ctrl_rresp,
      c0_ddr4_interrupt          => sdram_interrupt,
      c0_ddr4_s_axi_awid         => sdram_axi_awid,
      c0_ddr4_s_axi_awaddr       => sdram_axi_awaddr,
      c0_ddr4_s_axi_awlen        => sdram_axi_awlen,
      c0_ddr4_s_axi_awsize       => sdram_axi_awsize,
      c0_ddr4_s_axi_awburst      => sdram_axi_awburst,
      c0_ddr4_s_axi_awlock       => sdram_axi_awlock,
      c0_ddr4_s_axi_awcache      => sdram_axi_awcache,
      c0_ddr4_s_axi_awprot       => sdram_axi_awprot,
      c0_ddr4_s_axi_awqos        => sdram_axi_awqos,
      c0_ddr4_s_axi_awvalid      => sdram_axi_awvalid,
      c0_ddr4_s_axi_awready      => sdram_axi_awready,
      c0_ddr4_s_axi_wdata        => sdram_axi_wdata,
      c0_ddr4_s_axi_wstrb        => sdram_axi_wstrb,
      c0_ddr4_s_axi_wlast        => sdram_axi_wlast,
      c0_ddr4_s_axi_wvalid       => sdram_axi_wvalid,
      c0_ddr4_s_axi_wready       => sdram_axi_wready,
      c0_ddr4_s_axi_bready       => sdram_axi_bready,
      c0_ddr4_s_axi_bid          => sdram_axi_bid,
      c0_ddr4_s_axi_bresp        => sdram_axi_bresp,
      c0_ddr4_s_axi_bvalid       => sdram_axi_bvalid,
      c0_ddr4_s_axi_arid         => sdram_axi_arid,
      c0_ddr4_s_axi_araddr       => sdram_axi_araddr,
      c0_ddr4_s_axi_arlen        => sdram_axi_arlen,
      c0_ddr4_s_axi_arsize       => sdram_axi_arsize,
      c0_ddr4_s_axi_arburst      => sdram_axi_arburst,
      c0_ddr4_s_axi_arlock       => sdram_axi_arlock,
      c0_ddr4_s_axi_arcache      => sdram_axi_arcache,
      c0_ddr4_s_axi_arprot       => sdram_axi_arprot,
      c0_ddr4_s_axi_arqos        => sdram_axi_arqos,
      c0_ddr4_s_axi_arvalid      => sdram_axi_arvalid,
      c0_ddr4_s_axi_arready      => sdram_axi_arready,
      c0_ddr4_s_axi_rready       => sdram_axi_rready,
      c0_ddr4_s_axi_rlast        => sdram_axi_rlast,
      c0_ddr4_s_axi_rvalid       => sdram_axi_rvalid,
      c0_ddr4_s_axi_rresp        => sdram_axi_rresp,
      c0_ddr4_s_axi_rid          => sdram_axi_rid,
      c0_ddr4_s_axi_rdata        => sdram_axi_rdata,
      sys_rst                    => sdram_reset_q
    );
#endif


#ifdef CONFIG_ENABLE_NVME
  nvme_top_i: component nvme_top
    port map (
      --
      -- NVME <-> DDR4 Interface
      ddr_aclk                         => ddr_aclk,
      ddr_aresetn                      => ddr_aresetn,
      DDR_M_AXI_araddr(33 downto 0)    => nvm_axi_card_mem0_araddr(33 downto 0),
      DDR_M_AXI_arburst(1 downto 0)    => nvm_axi_card_mem0_arburst(1 downto 0),
      DDR_M_AXI_arcache(3 downto 0)    => nvm_axi_card_mem0_arcache(3 downto 0),
      DDR_M_AXI_arid(3 downto 0)       => nvm_axi_card_mem0_arid(3 downto 0),
      DDR_M_AXI_arlen(7 downto 0)      => nvm_axi_card_mem0_arlen(7 downto 0),
      DDR_M_AXI_arlock(0)              => nvm_axi_card_mem0_arlock(0),
      DDR_M_AXI_arprot(2 downto 0)     => nvm_axi_card_mem0_arprot(2 downto 0),
      DDR_M_AXI_arqos(3 downto 0)      => nvm_axi_card_mem0_arqos(3 downto 0),
      DDR_M_AXI_arready(0)             => nvm_axi_card_mem0_arready(0),
      DDR_M_AXI_arregion(3 downto 0)   => nvm_axi_card_mem0_arregion(3 downto 0),
      DDR_M_AXI_arsize(2 downto 0)     => nvm_axi_card_mem0_arsize(2 downto 0),
      DDR_M_AXI_arvalid(0)             => nvm_axi_card_mem0_arvalid(0),
      DDR_M_AXI_awaddr(33 downto 0)    => nvm_axi_card_mem0_awaddr(33 downto 0),
      DDR_M_AXI_awburst(1 downto 0)    => nvm_axi_card_mem0_awburst(1 downto 0),
      DDR_M_AXI_awcache(3 downto 0)    => nvm_axi_card_mem0_awcache(3 downto 0),
      DDR_M_AXI_awid(3 downto 0)       => nvm_axi_card_mem0_awid(3 downto 0),
      DDR_M_AXI_awlen(7 downto 0)      => nvm_axi_card_mem0_awlen(7 downto 0),
      DDR_M_AXI_awlock(0)              => nvm_axi_card_mem0_awlock(0),
      DDR_M_AXI_awprot(2 downto 0)     => nvm_axi_card_mem0_awprot(2 downto 0),
      DDR_M_AXI_awqos(3 downto 0)      => nvm_axi_card_mem0_awqos(3 downto 0),
      DDR_M_AXI_awready(0)             => nvm_axi_card_mem0_awready(0),
      DDR_M_AXI_awregion(3 downto 0)   => nvm_axi_card_mem0_awregion(3 downto 0),
      DDR_M_AXI_awsize(2 downto 0)     => nvm_axi_card_mem0_awsize(2 downto 0),
      DDR_M_AXI_awvalid(0)             => nvm_axi_card_mem0_awvalid(0),
      DDR_M_AXI_bid                    => nvm_axi_card_mem0_bid(3 downto 0),
      DDR_M_AXI_bready(0)              => nvm_axi_card_mem0_bready(0),
      DDR_M_AXI_bresp(1 downto 0)      => nvm_axi_card_mem0_bresp(1 downto 0),
      DDR_M_AXI_bvalid(0)              => nvm_axi_card_mem0_bvalid(0),
      DDR_M_AXI_rdata(127 downto 0)    => nvm_axi_card_mem0_rdata(127 downto 0),
      DDR_M_AXI_rid(3 downto 0)        => nvm_axi_card_mem0_rid(3 downto 0),
      DDR_M_AXI_rlast(0)               => nvm_axi_card_mem0_rlast(0),
      DDR_M_AXI_rready(0)              => nvm_axi_card_mem0_rready(0),
      DDR_M_AXI_rresp(1 downto 0)      => nvm_axi_card_mem0_rresp(1 downto 0),
      DDR_M_AXI_ruser(15 downto 0)     => nvm_axi_card_mem0_ruser(15 downto 0),
      DDR_M_AXI_rvalid(0)              => nvm_axi_card_mem0_rvalid(0),
      DDR_M_AXI_wdata(127 downto 0)    => nvm_axi_card_mem0_wdata(127 downto 0),
      DDR_M_AXI_wlast(0)               => nvm_axi_card_mem0_wlast(0),
      DDR_M_AXI_wready(0)              => nvm_axi_card_mem0_wready(0),
      DDR_M_AXI_wstrb(15 downto 0)     => nvm_axi_card_mem0_wstrb(15 downto 0),
      DDR_M_AXI_wuser(15 downto 0)     => nvm_axi_card_mem0_wuser(15 downto 0),
      DDR_M_AXI_wvalid(0)              => nvm_axi_card_mem0_wvalid(0),
      --
      -- NVME <-> action Interface
      ACT_NVME_aclk                       => ha_pclock,
      ACT_NVME_aresetn                    => action_reset_n_q,
      ACT_NVME_AXI_araddr(31 downto 0)    => ACT_NVME_AXI_araddr(31 downto 0),
      ACT_NVME_AXI_arburst(1 downto 0)    => ACT_NVME_AXI_arburst(1 downto 0),
      ACT_NVME_AXI_arcache(3 downto 0)    => ACT_NVME_AXI_arcache(3 downto 0),
      ACT_NVME_AXI_arlen(7 downto 0)      => ACT_NVME_AXI_arlen(7 downto 0),
      ACT_NVME_AXI_arlock                 => "0", -- ACT_NVME_AXI_arlock(0),
      ACT_NVME_AXI_arprot(2 downto 0)     => ACT_NVME_AXI_arprot(2 downto 0),
      ACT_NVME_AXI_arqos(3 downto 0)      => ACT_NVME_AXI_arqos(3 downto 0),
      ACT_NVME_AXI_arready                => ACT_NVME_AXI_arready,
      ACT_NVME_AXI_arregion(3 downto 0)   => ACT_NVME_AXI_arregion(3 downto 0),
      ACT_NVME_AXI_arsize(2 downto 0)     => ACT_NVME_AXI_arsize(2 downto 0),
      ACT_NVME_AXI_arvalid                => ACT_NVME_AXI_arvalid,
      ACT_NVME_AXI_awaddr(31 downto 0)    => ACT_NVME_AXI_awaddr(31 downto 0),
      ACT_NVME_AXI_awburst(1 downto 0)    => ACT_NVME_AXI_awburst(1 downto 0),
      ACT_NVME_AXI_awcache(3 downto 0)    => ACT_NVME_AXI_awcache(3 downto 0),
      ACT_NVME_AXI_awlen(7 downto 0)      => ACT_NVME_AXI_awlen(7 downto 0),
      ACT_NVME_AXI_awlock                 => "0",
      ACT_NVME_AXI_awprot(2 downto 0)     => ACT_NVME_AXI_awprot(2 downto 0),
      ACT_NVME_AXI_awqos(3 downto 0)      => ACT_NVME_AXI_awqos(3 downto 0),
      ACT_NVME_AXI_awready                => ACT_NVME_AXI_awready,
      ACT_NVME_AXI_awregion(3 downto 0)   => ACT_NVME_AXI_awregion(3 downto 0),
      ACT_NVME_AXI_awsize(2 downto 0)     => ACT_NVME_AXI_awsize(2 downto 0),
      ACT_NVME_AXI_awvalid                => ACT_NVME_AXI_awvalid,
      ACT_NVME_AXI_bready                 => ACT_NVME_AXI_bready,
      ACT_NVME_AXI_bresp(1 downto 0)      => ACT_NVME_AXI_bresp(1 downto 0),
      ACT_NVME_AXI_bvalid                 => ACT_NVME_AXI_bvalid,
      ACT_NVME_AXI_rdata(31 downto 0)     => ACT_NVME_AXI_rdata(31 downto 0),
      ACT_NVME_AXI_rlast                  => ACT_NVME_AXI_rlast,
      ACT_NVME_AXI_rready                 => ACT_NVME_AXI_rready,
      ACT_NVME_AXI_rresp(1 downto 0)      => ACT_NVME_AXI_rresp(1 downto 0),
      ACT_NVME_AXI_rvalid                 => ACT_NVME_AXI_rvalid,
      ACT_NVME_AXI_wdata(31 downto 0)     => ACT_NVME_AXI_wdata(31 downto 0),
      ACT_NVME_AXI_wlast                  => ACT_NVME_AXI_wlast,
      ACT_NVME_AXI_wready                 => ACT_NVME_AXI_wready,
      ACT_NVME_AXI_wstrb(3 downto 0)      => ACT_NVME_AXI_wstrb(3 downto 0),
      ACT_NVME_AXI_wvalid                 => ACT_NVME_AXI_wvalid,
      --
      -- NVME <-> CONTROL Interface
      NVME_S_ACLK                      => ha_pclock,
      NVME_S_ARESETN                   => action_reset_n_q,
      NVME_S_AXI_araddr(31 downto 0)   => xn_d.M_AXI_ARADDR,
      NVME_S_AXI_arprot(2 downto 0)    => xn_d.M_AXI_arprot(2 downto 0),
      NVME_S_AXI_arready(0)            => nx_d.M_AXI_arready,
      NVME_S_AXI_arvalid(0)            => xn_d.M_AXI_arvalid,
      NVME_S_AXI_awaddr(31 downto 0)   => xn_d.M_AXI_awaddr(31 downto 0),
      NVME_S_AXI_awprot(2 downto 0)    => xn_d.M_AXI_awprot(2 downto 0),
      NVME_S_AXI_awready(0)            => nx_d.M_AXI_awready,
      NVME_S_AXI_awvalid(0)            => xn_d.M_AXI_awvalid,
      NVME_S_AXI_bready(0)             => xn_d.M_AXI_bready,
      NVME_S_AXI_bresp(1 downto 0)     => nx_d.M_AXI_bresp(1 downto 0),
      NVME_S_AXI_bvalid(0)             => nx_d.M_AXI_bvalid,
      NVME_S_AXI_rdata(31 downto 0)    => nx_d.M_AXI_rdata(31 downto 0),
      NVME_S_AXI_rready(0)             => xn_d.M_AXI_rready,
      NVME_S_AXI_rresp(1 downto 0)     => nx_d.M_AXI_rresp(1 downto 0),
      NVME_S_AXI_rvalid(0)             => nx_d.M_AXI_rvalid,
      NVME_S_AXI_wdata(31 downto 0)    => xn_d.M_AXI_wdata(31 downto 0),
      NVME_S_AXI_wready(0)             => nx_d.M_AXI_wready,
      NVME_S_AXI_wstrb(3 downto 0)     => xn_d.M_AXI_wstrb(3 downto 0),
      NVME_S_AXI_wvalid(0)             => xN_d.M_AXI_wvalid,
      --
      -- NVME <-> PCIE Interface
      refclk_nvme_ch0_p                => refclk_nvme_ch0_p,
      refclk_nvme_ch0_n                => refclk_nvme_ch0_n,
      refclk_nvme_ch1_p                => refclk_nvme_ch1_p,
      refclk_nvme_ch1_n                => refclk_nvme_ch1_n,
      nvme_reset_n                     => nvme_reset_n,
      pcie_rc0_rxn(3 downto 0)         => pcie_rc0_rxn(3 downto 0),
      pcie_rc0_rxp(3 downto 0)         => pcie_rc0_rxp(3 downto 0),
      pcie_rc0_txn(3 downto 0)         => pcie_rc0_txn(3 downto 0),
      pcie_rc0_txp(3 downto 0)         => pcie_rc0_txp(3 downto 0),
      pcie_rc1_rxn(3 downto 0)         => pcie_rc1_rxn(3 downto 0),
      pcie_rc1_rxp(3 downto 0)         => pcie_rc1_rxp(3 downto 0),
      pcie_rc1_txn(3 downto 0)         => pcie_rc1_txn(3 downto 0),
      pcie_rc1_txp(3 downto 0)         => pcie_rc1_txp(3 downto 0)
    );
#endif
END psl_accel;
