#!/bin/bash

#
# Copyright 2017, International Business Machines
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Figure out SNAP supported cards in the system. We have AlphaData KU3
# and Nallatech 250S cards. This script should help automatic testing of
# any available cards in one system. It should print out a list of
# available cards of each type.
#

# output formatting
bold=$(tput bold)
normal=$(tput sgr0)

version=1.0
accel=UNKNOWN

# Print usage message helper function
function usage() {
	echo "Usage: $PROGRAM"
	echo "    [-A] <accelerator> use either GZIP, ADKU3, N250S or ALL"
	echo "    [-C] <0..3> Print accelerator name for this Card"
	echo "  prints out a list of cards found for the accelerator."
	echo "  The numbers reflect /dev/cxl/afu<n>.0."
	echo "  Print a list of all cards found if -A ALL."
	echo "  Print Accelerator Name if -C (0..3) is used."
}

#
# We need to take into account that there might be other CAPI cards
# in our system. Therefore we check the psl_revision, which identifies
# the card hardware and the device id in the configuration record cr0
# which is the unique id the card has. The combination of both, should
# be more or less bullet prove.
#
function detect_snap_cards() {
	local check_dev=$1
	local check_sub=$2
	# We have MAX 4 CAPI cards in one system

	for card in `seq 0 3` ; do
		if [ ! -d /sys/class/cxl/card${card} ]; then
			continue
		fi

		psl_revision=`cat /sys/class/cxl/card${card}/psl_revision`
		device=`cat /sys/class/cxl/card${card}/afu${card}.0/cr0/device`
		if [ $device != $check_dev ]; then
			continue
		fi
		sub=`cat /sys/class/cxl/card$card/device/subsystem_device`
		if [ $sub = $check_sub ]; then
			echo -n "${card} "
		fi
	done
}

#
# We need to take into account that there might be other CAPI cards
# in our system. Therefore we check the psl_revision, which identifies
# the card hardware and the device id in the configuration record cr0
# which is the unique id the card has. The combination of both, should
# be more or less bullet prove.
#
function detect_gzip_cards() {
	# We have MAX 4 CAPI cards in one system
	for card in `seq 0 3` ; do
		if [ ! -d /sys/class/cxl/card${card} ]; then
			continue
		fi
		psl_revision=`cat /sys/class/cxl/card${card}/psl_revision`
		if [ $psl_revision != 1 ] ; then
			continue
		fi
		device=`cat /sys/class/cxl/card${card}/afu${card}.0/cr0/device`
		if [ $device = 0x0602 ]; then
			echo -n "${card} "
		fi
	done
}

function detect_card_name()
{
	local card=$1
	local dev=$2
	local sub=$3
	local name=$4

	if [ -d /sys/class/cxl/card${card} ]; then
		psl_revision=`cat /sys/class/cxl/card${card}/psl_revision`
		this_dev=`cat /sys/class/cxl/card${card}/afu${card}.0/cr0/device`
		if [ $psl_revision = 1 ] ; then
			# GZIP
			if [ $this_dev = $dev ]; then
				echo -n $name
				return 0
			fi
		else
			if [ $this_dev = $dev ]; then
				this_sub=`cat /sys/class/cxl/card$card/device/subsystem_device`
				if [ $this_sub = $sub ]; then
					echo -n $name
					return 0
				fi
			fi
		fi
	fi
	return 1
}

# Main Start here
# Parse any options given on the command line

PROGRAM=$0
while getopts ":A:C:Vvh" opt; do
	case ${opt} in
	A)
		accel=${OPTARG};
		;;
	C)
		card=${OPTARG};
		if [[ $card -gt 3 ]]; then
			echo "Invalid option for -C -$OPTARG" >&2
			usage
		fi
		detect_card_name $card  "0x0632" "0x0605" "ADKU3"
		if [ $? != 0 ]; then
			detect_card_name $card  "0x0632" "0x060a" "N250S"
			if [ $? != 0 ]; then
				detect_card_name $card  "0x0602" "" "GZIP"
				if [ $? != 0 ]; then
					exit 1  # No accel fond fond Card
				fi
			fi
		fi
		exit 0
		;;
	V)
		echo "${version}" >&2
		exit 0
		;;
	h)
		usage;
		exit 0;
		;;
	\?)
		printf "${bold}ERROR:${normal} Invalid option: -${OPTARG}\n" >&2
		exit 1
		;;
	:)
		printf "${bold}ERROR:${normal} Option -$OPTARG requires an argument.\n" >&2
		exit 1
		;;
	esac
done

shift $((OPTIND-1))
# now do something with $@

case ${accel} in
	# GZIP Card from Nallatech
	"GZIP")
		detect_gzip_cards
		;;
	# KU3 Card from AlphaData
	"ADKU3")
		detect_snap_cards "0x0632" "0x0605"
		;;
	# 250s Card from Nallatech
	"N250S")
		detect_snap_cards "0x0632" "0x060a"
		;;
	"ALL")
		# detect all cards
		detect_gzip_cards
		detect_snap_cards "0x0632" "0x0605"
		detect_snap_cards "0x0632" "0x060a"
		;;
	*)
		usage
		exit 1
		;;
esac

exit 0
